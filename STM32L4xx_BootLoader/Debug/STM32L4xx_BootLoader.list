
STM32L4xx_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08008930  08008930  00018930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089cc  080089cc  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080089cc  080089cc  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089cc  080089cc  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089cc  080089cc  000189cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080089d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e0  20000190  08008b64  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001370  08008b64  00021370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011081  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d6  00000000  00000000  00031241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00034518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00035340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bee  00000000  00000000  00035ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ebc  00000000  00000000  00058be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c14f3  00000000  00000000  0006aaa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bf95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b0  00000000  00000000  0012bfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008918 	.word	0x08008918

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	08008918 	.word	0x08008918

080001cc <bootloaderInit>:
#include "bootloader.h"

void bootloaderInit(void) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	BootloaderMode bootloaderMode;
	if (HAL_GPIO_ReadPin(BootStat_GPIO_Port, BootStat_Pin) == GPIO_PIN_RESET)
 80001d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001da:	f000 fe5b 	bl	8000e94 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d102      	bne.n	80001ea <bootloaderInit+0x1e>
		bootloaderMode = FlashMode;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <bootloaderInit+0x22>
	else
		bootloaderMode = JumpMode;
 80001ea:	2300      	movs	r3, #0
 80001ec:	71fb      	strb	r3, [r7, #7]
	if (bootloaderMode == JumpMode) {
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d123      	bne.n	800023c <bootloaderInit+0x70>
		uint8_t emptyCellCount = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	71bb      	strb	r3, [r7, #6]
		for (uint8_t i = 0; i < 10; i++) {
 80001f8:	2300      	movs	r3, #0
 80001fa:	717b      	strb	r3, [r7, #5]
 80001fc:	e012      	b.n	8000224 <bootloaderInit+0x58>
			if (readWord(APP1_START + (i * 8)) == -1)
 80001fe:	797b      	ldrb	r3, [r7, #5]
 8000200:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8000204:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000208:	00db      	lsls	r3, r3, #3
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f81c 	bl	8000248 <readWord>
 8000210:	4603      	mov	r3, r0
 8000212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000216:	d102      	bne.n	800021e <bootloaderInit+0x52>
				emptyCellCount++;
 8000218:	79bb      	ldrb	r3, [r7, #6]
 800021a:	3301      	adds	r3, #1
 800021c:	71bb      	strb	r3, [r7, #6]
		for (uint8_t i = 0; i < 10; i++) {
 800021e:	797b      	ldrb	r3, [r7, #5]
 8000220:	3301      	adds	r3, #1
 8000222:	717b      	strb	r3, [r7, #5]
 8000224:	797b      	ldrb	r3, [r7, #5]
 8000226:	2b09      	cmp	r3, #9
 8000228:	d9e9      	bls.n	80001fe <bootloaderInit+0x32>
		}
		if (emptyCellCount != 10)
 800022a:	79bb      	ldrb	r3, [r7, #6]
 800022c:	2b0a      	cmp	r3, #10
 800022e:	d003      	beq.n	8000238 <bootloaderInit+0x6c>
			jumpToApp(APP1_START);
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <bootloaderInit+0x78>)
 8000232:	f000 f817 	bl	8000264 <jumpToApp>
		else
			errorBlink();
	}

}
 8000236:	e001      	b.n	800023c <bootloaderInit+0x70>
			errorBlink();
 8000238:	f000 f856 	bl	80002e8 <errorBlink>
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	08010000 	.word	0x08010000

08000248 <readWord>:

uint32_t readWord(uint32_t address){
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	uint32_t read_data;
	read_data = *(uint32_t*)(address);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	60fb      	str	r3, [r7, #12]
	return read_data;
 8000256:	68fb      	ldr	r3, [r7, #12]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr

08000264 <jumpToApp>:

void jumpToApp(const uint32_t address){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	const JumpStruct* vector_p = (JumpStruct*)address;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	60fb      	str	r3, [r7, #12]
	deinitEverything();
 8000270:	f000 f80c 	bl	800028c <deinitEverything>
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	6852      	ldr	r2, [r2, #4]
 800027c:	f383 8808 	msr	MSP, r3
 8000280:	4710      	bx	r2
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <deinitEverything>:

void deinitEverything(void){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(Buzzer_GPIO_Port, Buzzer_Pin);
 8000290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000298:	f000 fd32 	bl	8000d00 <HAL_GPIO_DeInit>
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <deinitEverything+0x54>)
 800029e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a0:	4a0f      	ldr	r2, [pc, #60]	; (80002e0 <deinitEverything+0x54>)
 80002a2:	f023 0304 	bic.w	r3, r3, #4
 80002a6:	64d3      	str	r3, [r2, #76]	; 0x4c
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <deinitEverything+0x54>)
 80002aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <deinitEverything+0x54>)
 80002ae:	f023 0302 	bic.w	r3, r3, #2
 80002b2:	64d3      	str	r3, [r2, #76]	; 0x4c
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <deinitEverything+0x54>)
 80002b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b8:	4a09      	ldr	r2, [pc, #36]	; (80002e0 <deinitEverything+0x54>)
 80002ba:	f023 0301 	bic.w	r3, r3, #1
 80002be:	64d3      	str	r3, [r2, #76]	; 0x4c
	HAL_RCC_DeInit();
 80002c0:	f002 fc42 	bl	8002b48 <HAL_RCC_DeInit>
	HAL_DeInit();
 80002c4:	f000 f9c2 	bl	800064c <HAL_DeInit>
	SysTick->CTRL = 0;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <deinitEverything+0x58>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <deinitEverything+0x58>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <deinitEverything+0x58>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000
 80002e4:	e000e010 	.word	0xe000e010

080002e8 <errorBlink>:

void errorBlink(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f6:	f000 fde5 	bl	8000ec4 <HAL_GPIO_WritePin>
	while(1){
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 80002fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f000 fdf7 	bl	8000ef4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000306:	2064      	movs	r0, #100	; 0x64
 8000308:	f000 fa38 	bl	800077c <HAL_Delay>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 800030c:	e7f5      	b.n	80002fa <errorBlink+0x12>
	...

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 f980 	bl	800061a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f827 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f889 	bl	8000434 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000322:	f007 fd1f 	bl	8007d64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_FLASH_Unlock();
 8000326:	f000 fb5f 	bl	80009e8 <HAL_FLASH_Unlock>
  bootloaderInit();
 800032a:	f7ff ff4f 	bl	80001cc <bootloaderInit>
	for (int x = 0; x < 2; x++) {
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e00c      	b.n	800034e <main+0x3e>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8000334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033c:	f000 fdda 	bl	8000ef4 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8000340:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000344:	f000 fa1a 	bl	800077c <HAL_Delay>
	for (int x = 0; x < 2; x++) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3301      	adds	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b01      	cmp	r3, #1
 8000352:	ddef      	ble.n	8000334 <main+0x24>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS((uint8_t*)&"Bootloader Mode\n", strlen("Bootloader Mode\n"));
 8000354:	2110      	movs	r1, #16
 8000356:	4804      	ldr	r0, [pc, #16]	; (8000368 <main+0x58>)
 8000358:	f007 fdc2 	bl	8007ee0 <CDC_Transmit_FS>
	  HAL_Delay(500);
 800035c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000360:	f000 fa0c 	bl	800077c <HAL_Delay>
	  CDC_Transmit_FS((uint8_t*)&"Bootloader Mode\n", strlen("Bootloader Mode\n"));
 8000364:	e7f6      	b.n	8000354 <main+0x44>
 8000366:	bf00      	nop
 8000368:	08008930 	.word	0x08008930

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b096      	sub	sp, #88	; 0x58
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2244      	movs	r2, #68	; 0x44
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f008 fac4 	bl	8008908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	463b      	mov	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800038e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000392:	f002 fb73 	bl	8002a7c <HAL_PWREx_ControlVoltageScaling>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800039c:	f000 f8a4 	bl	80004e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80003a0:	f002 fb4e 	bl	8002a40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80003a4:	4b22      	ldr	r3, [pc, #136]	; (8000430 <SystemClock_Config+0xc4>)
 80003a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003aa:	4a21      	ldr	r2, [pc, #132]	; (8000430 <SystemClock_Config+0xc4>)
 80003ac:	f023 0318 	bic.w	r3, r3, #24
 80003b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80003b4:	2334      	movs	r3, #52	; 0x34
 80003b6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80003b8:	2301      	movs	r3, #1
 80003ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003c8:	2360      	movs	r3, #96	; 0x60
 80003ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003cc:	2302      	movs	r3, #2
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003d0:	2301      	movs	r3, #1
 80003d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003d4:	2301      	movs	r3, #1
 80003d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80003d8:	2328      	movs	r3, #40	; 0x28
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003dc:	2307      	movs	r3, #7
 80003de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e0:	2302      	movs	r3, #2
 80003e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003e4:	2302      	movs	r3, #2
 80003e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	4618      	mov	r0, r3
 80003ee:	f002 fc43 	bl	8002c78 <HAL_RCC_OscConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003f8:	f000 f876 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fc:	230f      	movs	r3, #15
 80003fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000400:	2303      	movs	r3, #3
 8000402:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000410:	463b      	mov	r3, r7
 8000412:	2104      	movs	r1, #4
 8000414:	4618      	mov	r0, r3
 8000416:	f003 f843 	bl	80034a0 <HAL_RCC_ClockConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000420:	f000 f862 	bl	80004e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000424:	f003 fc1e 	bl	8003c64 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000428:	bf00      	nop
 800042a:	3758      	adds	r7, #88	; 0x58
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044a:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <MX_GPIO_Init+0xb0>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	4a25      	ldr	r2, [pc, #148]	; (80004e4 <MX_GPIO_Init+0xb0>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000456:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <MX_GPIO_Init+0xb0>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	f003 0304 	and.w	r3, r3, #4
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <MX_GPIO_Init+0xb0>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000466:	4a1f      	ldr	r2, [pc, #124]	; (80004e4 <MX_GPIO_Init+0xb0>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046e:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <MX_GPIO_Init+0xb0>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_GPIO_Init+0xb0>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <MX_GPIO_Init+0xb0>)
 8000480:	f043 0302 	orr.w	r3, r3, #2
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_GPIO_Init+0xb0>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	f003 0302 	and.w	r3, r3, #2
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049c:	f000 fd12 	bl	8000ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80004a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	4619      	mov	r1, r3
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004bc:	f000 fab6 	bl	8000a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BootStat_Pin */
  GPIO_InitStruct.Pin = BootStat_Pin;
 80004c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BootStat_GPIO_Port, &GPIO_InitStruct);
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d8:	f000 faa8 	bl	8000a2c <HAL_GPIO_Init>

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000

080004e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <Error_Handler+0x8>
	...

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_MspInit+0x44>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_MspInit+0x44>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6613      	str	r3, [r2, #96]	; 0x60
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_MspInit+0x44>)
 8000508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <HAL_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <HAL_MspInit+0x44>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051c:	6593      	str	r3, [r2, #88]	; 0x58
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_MspInit+0x44>)
 8000520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler+0x4>

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <MemManage_Handler+0x4>

0800054e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <UsageFault_Handler+0x4>

0800055a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000588:	f000 f8d8 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <USB_IRQHandler+0x10>)
 8000596:	f000 fe00 	bl	800119a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000e54 	.word	0x20000e54

080005a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <SystemInit+0x20>)
 80005aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ae:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <SystemInit+0x20>)
 80005b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000600 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005cc:	f7ff ffea 	bl	80005a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <LoopForever+0xe>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e8:	4c0a      	ldr	r4, [pc, #40]	; (8000614 <LoopForever+0x16>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005f6:	f008 f963 	bl	80088c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005fa:	f7ff fe89 	bl	8000310 <main>

080005fe <LoopForever>:

LoopForever:
    b LoopForever
 80005fe:	e7fe      	b.n	80005fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000600:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800060c:	080089d4 	.word	0x080089d4
  ldr r2, =_sbss
 8000610:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000614:	20001370 	.word	0x20001370

08000618 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_IRQHandler>

0800061a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000620:	2300      	movs	r3, #0
 8000622:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f99d 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062a:	200f      	movs	r0, #15
 800062c:	f000 f84a 	bl	80006c4 <HAL_InitTick>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	e001      	b.n	8000640 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800063c:	f7ff ff5a 	bl	80004f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000640:	79fb      	ldrb	r3, [r7, #7]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_DeInit+0x64>)
 8000652:	f04f 32ff 	mov.w	r2, #4294967295
 8000656:	639a      	str	r2, [r3, #56]	; 0x38
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_DeInit+0x64>)
 800065a:	f04f 32ff 	mov.w	r2, #4294967295
 800065e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_DeInit+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	639a      	str	r2, [r3, #56]	; 0x38
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_DeInit+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_DeInit+0x64>)
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
 8000672:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_DeInit+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <HAL_DeInit+0x64>)
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_DeInit+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_DeInit+0x64>)
 800068a:	f04f 32ff 	mov.w	r2, #4294967295
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <HAL_DeInit+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_DeInit+0x64>)
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HAL_DeInit+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80006a4:	f000 f806 	bl	80006b4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_InitTick+0x6c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d023      	beq.n	8000720 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_InitTick+0x70>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_InitTick+0x6c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f96d 	bl	80009ce <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10f      	bne.n	800071a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d809      	bhi.n	8000714 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f937 	bl	800097a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_InitTick+0x74>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e007      	b.n	8000724 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e004      	b.n	8000724 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e001      	b.n	8000724 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008
 8000734:	20000000 	.word	0x20000000
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_IncTick+0x20>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_IncTick+0x24>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_IncTick+0x24>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000008 	.word	0x20000008
 8000760:	200001ac 	.word	0x200001ac

08000764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return uwTick;
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <HAL_GetTick+0x14>)
 800076a:	681b      	ldr	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	200001ac 	.word	0x200001ac

0800077c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000784:	f7ff ffee 	bl	8000764 <HAL_GetTick>
 8000788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000794:	d005      	beq.n	80007a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_Delay+0x44>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a2:	bf00      	nop
 80007a4:	f7ff ffde 	bl	8000764 <HAL_GetTick>
 80007a8:	4602      	mov	r2, r0
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d8f7      	bhi.n	80007a4 <HAL_Delay+0x28>
  {
  }
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4907      	ldr	r1, [pc, #28]	; (8000860 <__NVIC_EnableIRQ+0x38>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000930:	d301      	bcc.n	8000936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000932:	2301      	movs	r3, #1
 8000934:	e00f      	b.n	8000956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <SysTick_Config+0x40>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093e:	210f      	movs	r1, #15
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f7ff ff8e 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SysTick_Config+0x40>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <SysTick_Config+0x40>)
 8000950:	2207      	movs	r2, #7
 8000952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010

08000964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff29 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800098c:	f7ff ff3e 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	6978      	ldr	r0, [r7, #20]
 8000998:	f7ff ff8e 	bl	80008b8 <NVIC_EncodePriority>
 800099c:	4602      	mov	r2, r0
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff5d 	bl	8000864 <__NVIC_SetPriority>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff31 	bl	8000828 <__NVIC_EnableIRQ>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffa2 	bl	8000920 <SysTick_Config>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_FLASH_Unlock+0x38>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da0b      	bge.n	8000a12 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_FLASH_Unlock+0x38>)
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_FLASH_Unlock+0x3c>)
 80009fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <HAL_FLASH_Unlock+0x38>)
 8000a02:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <HAL_FLASH_Unlock+0x40>)
 8000a04:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_FLASH_Unlock+0x38>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da01      	bge.n	8000a12 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40022000 	.word	0x40022000
 8000a24:	45670123 	.word	0x45670123
 8000a28:	cdef89ab 	.word	0xcdef89ab

08000a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3a:	e148      	b.n	8000cce <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 813a 	beq.w	8000cc8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d005      	beq.n	8000a6c <HAL_GPIO_Init+0x40>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	f003 0201 	and.w	r2, r3, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d017      	beq.n	8000b0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d123      	bne.n	8000b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	08da      	lsrs	r2, r3, #3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3208      	adds	r2, #8
 8000b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	08da      	lsrs	r2, r3, #3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3208      	adds	r2, #8
 8000b58:	6939      	ldr	r1, [r7, #16]
 8000b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0203 	and.w	r2, r3, #3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 8094 	beq.w	8000cc8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	4b52      	ldr	r3, [pc, #328]	; (8000cec <HAL_GPIO_Init+0x2c0>)
 8000ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba4:	4a51      	ldr	r2, [pc, #324]	; (8000cec <HAL_GPIO_Init+0x2c0>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6613      	str	r3, [r2, #96]	; 0x60
 8000bac:	4b4f      	ldr	r3, [pc, #316]	; (8000cec <HAL_GPIO_Init+0x2c0>)
 8000bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb8:	4a4d      	ldr	r2, [pc, #308]	; (8000cf0 <HAL_GPIO_Init+0x2c4>)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	220f      	movs	r2, #15
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1d4>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a43      	ldr	r2, [pc, #268]	; (8000cf4 <HAL_GPIO_Init+0x2c8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1d0>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <HAL_GPIO_Init+0x2cc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1cc>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e004      	b.n	8000c02 <HAL_GPIO_Init+0x1d6>
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_Init+0x1d6>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <HAL_GPIO_Init+0x1d6>
 8000c00:	2300      	movs	r3, #0
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	f002 0203 	and.w	r2, r2, #3
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c12:	4937      	ldr	r1, [pc, #220]	; (8000cf0 <HAL_GPIO_Init+0x2c4>)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c44:	4a2d      	ldr	r2, [pc, #180]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c98:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f47f aeaf 	bne.w	8000a3c <HAL_GPIO_Init+0x10>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000d0e:	e0ab      	b.n	8000e68 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000d10:	2201      	movs	r2, #1
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 809e 	beq.w	8000e62 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000d26:	4a57      	ldr	r2, [pc, #348]	; (8000e84 <HAL_GPIO_DeInit+0x184>)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d4e:	d00d      	beq.n	8000d6c <HAL_GPIO_DeInit+0x6c>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a4d      	ldr	r2, [pc, #308]	; (8000e88 <HAL_GPIO_DeInit+0x188>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d007      	beq.n	8000d68 <HAL_GPIO_DeInit+0x68>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a4c      	ldr	r2, [pc, #304]	; (8000e8c <HAL_GPIO_DeInit+0x18c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_GPIO_DeInit+0x64>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e004      	b.n	8000d6e <HAL_GPIO_DeInit+0x6e>
 8000d64:	2307      	movs	r3, #7
 8000d66:	e002      	b.n	8000d6e <HAL_GPIO_DeInit+0x6e>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <HAL_GPIO_DeInit+0x6e>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	f002 0203 	and.w	r2, r2, #3
 8000d74:	0092      	lsls	r2, r2, #2
 8000d76:	4093      	lsls	r3, r2
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d132      	bne.n	8000de4 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000d7e:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <HAL_GPIO_DeInit+0x190>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4942      	ldr	r1, [pc, #264]	; (8000e90 <HAL_GPIO_DeInit+0x190>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000d8c:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <HAL_GPIO_DeInit+0x190>)
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	493e      	ldr	r1, [pc, #248]	; (8000e90 <HAL_GPIO_DeInit+0x190>)
 8000d96:	4013      	ands	r3, r2
 8000d98:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <HAL_GPIO_DeInit+0x190>)
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	493b      	ldr	r1, [pc, #236]	; (8000e90 <HAL_GPIO_DeInit+0x190>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8000da8:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <HAL_GPIO_DeInit+0x190>)
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	4937      	ldr	r1, [pc, #220]	; (8000e90 <HAL_GPIO_DeInit+0x190>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000dc6:	4a2f      	ldr	r2, [pc, #188]	; (8000e84 <HAL_GPIO_DeInit+0x184>)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3302      	adds	r3, #2
 8000dce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	482b      	ldr	r0, [pc, #172]	; (8000e84 <HAL_GPIO_DeInit+0x184>)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	400a      	ands	r2, r1
 8000dde:	3302      	adds	r3, #2
 8000de0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2103      	movs	r1, #3
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	4019      	ands	r1, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2103      	movs	r1, #3
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	401a      	ands	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	401a      	ands	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2103      	movs	r1, #3
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f47f af4d 	bne.w	8000d10 <HAL_GPIO_DeInit+0x10>
  }
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40010000 	.word	0x40010000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	40010400 	.word	0x40010400

08000e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e001      	b.n	8000eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed4:	787b      	ldrb	r3, [r7, #1]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eda:	887a      	ldrh	r2, [r7, #2]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	041a      	lsls	r2, r3, #16
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43d9      	mvns	r1, r3
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	400b      	ands	r3, r1
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	619a      	str	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	b08b      	sub	sp, #44	; 0x2c
 8000f2c:	af06      	add	r7, sp, #24
 8000f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e109      	b.n	800114e <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d106      	bne.n	8000f54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f007 f920 	bl	8008194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2203      	movs	r2, #3
 8000f58:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 ffa9 	bl	8003eb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	687e      	ldr	r6, [r7, #4]
 8000f6e:	466d      	mov	r5, sp
 8000f70:	f106 0410 	add.w	r4, r6, #16
 8000f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f80:	1d33      	adds	r3, r6, #4
 8000f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f84:	6838      	ldr	r0, [r7, #0]
 8000f86:	f002 ff6f 	bl	8003e68 <USB_CoreInit>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0d8      	b.n	800114e <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 ffa3 	bl	8003eee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e04d      	b.n	800104a <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3305      	adds	r3, #5
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	b298      	uxth	r0, r3
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	333a      	adds	r3, #58	; 0x3a
 8000fee:	4602      	mov	r2, r0
 8000ff0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	3307      	adds	r3, #7
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	333c      	adds	r3, #60	; 0x3c
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	3340      	adds	r3, #64	; 0x40
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	3344      	adds	r3, #68	; 0x44
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	3301      	adds	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3ac      	bcc.n	8000fae <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e044      	b.n	80010e4 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d3b5      	bcc.n	800105a <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	687e      	ldr	r6, [r7, #4]
 80010f6:	466d      	mov	r5, sp
 80010f8:	f106 0410 	add.w	r4, r6, #16
 80010fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001100:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001104:	e885 0003 	stmia.w	r5, {r0, r1}
 8001108:	1d33      	adds	r3, r6, #4
 800110a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800110c:	6838      	ldr	r0, [r7, #0]
 800110e:	f002 fefb 	bl	8003f08 <USB_DevInit>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2202      	movs	r2, #2
 800111c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e014      	b.n	800114e <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d102      	bne.n	8001142 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f001 fc55 	bl	80029ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f005 f907 	bl	800635a <USB_DevDisconnect>

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001156 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_PCD_Start+0x16>
 8001168:	2302      	movs	r3, #2
 800116a:	e012      	b.n	8001192 <HAL_PCD_Start+0x3c>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fe86 	bl	8003e8a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f005 f8d2 	bl	800632c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f005 f8ec 	bl	8006384 <USB_ReadInterrupts>
 80011ac:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fb3e 	bl	800183a <PCD_EP_ISR_Handler>

    return;
 80011be:	e110      	b.n	80013e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d013      	beq.n	80011f2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011dc:	b292      	uxth	r2, r2
 80011de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f007 f867 	bl	80082b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011e8:	2100      	movs	r1, #0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f8fc 	bl	80013e8 <HAL_PCD_SetAddress>

    return;
 80011f0:	e0f7      	b.n	80013e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800120e:	b292      	uxth	r2, r2
 8001210:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001214:	e0e5      	b.n	80013e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00c      	beq.n	800123a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001228:	b29a      	uxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001232:	b292      	uxth	r2, r2
 8001234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001238:	e0d3      	b.n	80013e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d034      	beq.n	80012ae <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800124c:	b29a      	uxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0204 	bic.w	r2, r2, #4
 8001256:	b292      	uxth	r2, r2
 8001258:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001264:	b29a      	uxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0208 	bic.w	r2, r2, #8
 800126e:	b292      	uxth	r2, r2
 8001270:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001286:	2100      	movs	r1, #0
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f007 fac5 	bl	8008818 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f007 f84a 	bl	8008328 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800129c:	b29a      	uxth	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012a6:	b292      	uxth	r2, r2
 80012a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012ac:	e099      	b.n	80013e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d027      	beq.n	8001308 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0208 	orr.w	r2, r2, #8
 80012ca:	b292      	uxth	r2, r2
 80012cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012e2:	b292      	uxth	r2, r2
 80012e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0204 	orr.w	r2, r2, #4
 80012fa:	b292      	uxth	r2, r2
 80012fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f006 fff7 	bl	80082f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001306:	e06c      	b.n	80013e2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	2b00      	cmp	r3, #0
 8001310:	d040      	beq.n	8001394 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800131a:	b29a      	uxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001324:	b292      	uxth	r2, r2
 8001326:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d12b      	bne.n	800138c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0204 	orr.w	r2, r2, #4
 8001346:	b292      	uxth	r2, r2
 8001348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0208 	orr.w	r2, r2, #8
 800135e:	b292      	uxth	r2, r2
 8001360:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001374:	b29b      	uxth	r3, r3
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001382:	2101      	movs	r1, #1
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f007 fa47 	bl	8008818 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800138a:	e02a      	b.n	80013e2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f006 ffb1 	bl	80082f4 <HAL_PCD_SuspendCallback>
    return;
 8001392:	e026      	b.n	80013e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00f      	beq.n	80013be <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013b0:	b292      	uxth	r2, r2
 80013b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f006 ff6f 	bl	800829a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013bc:	e011      	b.n	80013e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00c      	beq.n	80013e2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013da:	b292      	uxth	r2, r2
 80013dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013e0:	bf00      	nop
  }
}
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_PCD_SetAddress+0x1a>
 80013fe:	2302      	movs	r3, #2
 8001400:	e013      	b.n	800142a <HAL_PCD_SetAddress+0x42>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	78fa      	ldrb	r2, [r7, #3]
 800140e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	78fa      	ldrb	r2, [r7, #3]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f004 ff72 	bl	8006304 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	4608      	mov	r0, r1
 800143c:	4611      	mov	r1, r2
 800143e:	461a      	mov	r2, r3
 8001440:	4603      	mov	r3, r0
 8001442:	70fb      	strb	r3, [r7, #3]
 8001444:	460b      	mov	r3, r1
 8001446:	803b      	strh	r3, [r7, #0]
 8001448:	4613      	mov	r3, r2
 800144a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001454:	2b00      	cmp	r3, #0
 8001456:	da0f      	bge.n	8001478 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	3304      	adds	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2201      	movs	r2, #1
 8001474:	705a      	strb	r2, [r3, #1]
 8001476:	e00f      	b.n	8001498 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	f003 0207 	and.w	r2, r3, #7
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	3304      	adds	r3, #4
 8001490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014a4:	883a      	ldrh	r2, [r7, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	78ba      	ldrb	r2, [r7, #2]
 80014ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014c2:	78bb      	ldrb	r3, [r7, #2]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d102      	bne.n	80014ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_PCD_EP_Open+0xaa>
 80014d8:	2302      	movs	r3, #2
 80014da:	e00e      	b.n	80014fa <HAL_PCD_EP_Open+0xc8>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fd2e 	bl	8003f4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 80014f8:	7afb      	ldrb	r3, [r7, #11]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800150e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001512:	2b00      	cmp	r3, #0
 8001514:	da0f      	bge.n	8001536 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	3304      	adds	r3, #4
 800152c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2201      	movs	r2, #1
 8001532:	705a      	strb	r2, [r3, #1]
 8001534:	e00f      	b.n	8001556 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	f003 0207 	and.w	r2, r3, #7
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	3304      	adds	r3, #4
 800154e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	b2da      	uxtb	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_PCD_EP_Close+0x6e>
 800156c:	2302      	movs	r3, #2
 800156e:	e00e      	b.n	800158e <HAL_PCD_EP_Close+0x8c>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68f9      	ldr	r1, [r7, #12]
 800157e:	4618      	mov	r0, r3
 8001580:	f003 f89e 	bl	80046c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	460b      	mov	r3, r1
 80015a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	f003 0207 	and.w	r2, r3, #7
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	3304      	adds	r3, #4
 80015be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2200      	movs	r2, #0
 80015d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015d8:	7afb      	ldrb	r3, [r7, #11]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6979      	ldr	r1, [r7, #20]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fa50 	bl	8004a9a <USB_EPStartXfer>
 80015fa:	e005      	b.n	8001608 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6979      	ldr	r1, [r7, #20]
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fa49 	bl	8004a9a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	f003 0207 	and.w	r2, r3, #7
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001634:	681b      	ldr	r3, [r3, #0]
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	460b      	mov	r3, r1
 8001650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4413      	add	r3, r2
 8001666:	3304      	adds	r3, #4
 8001668:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2201      	movs	r2, #1
 800168e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001690:	7afb      	ldrb	r3, [r7, #11]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	b2da      	uxtb	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800169c:	7afb      	ldrb	r3, [r7, #11]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6979      	ldr	r1, [r7, #20]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 f9f4 	bl	8004a9a <USB_EPStartXfer>
 80016b2:	e005      	b.n	80016c0 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6979      	ldr	r1, [r7, #20]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 f9ed 	bl	8004a9a <USB_EPStartXfer>
  }

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	f003 0207 	and.w	r2, r3, #7
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d901      	bls.n	80016e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e04e      	b.n	8001786 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da0f      	bge.n	8001710 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	3304      	adds	r3, #4
 8001706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	705a      	strb	r2, [r3, #1]
 800170e:	e00d      	b.n	800172c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	3304      	adds	r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	b2da      	uxtb	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_PCD_EP_SetStall+0x82>
 8001748:	2302      	movs	r3, #2
 800174a:	e01c      	b.n	8001786 <HAL_PCD_EP_SetStall+0xbc>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	4618      	mov	r0, r3
 800175c:	f004 fcd3 	bl	8006106 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	2b00      	cmp	r3, #0
 8001768:	d108      	bne.n	800177c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f004 fe14 	bl	80063a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	f003 020f 	and.w	r2, r3, #15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d901      	bls.n	80017ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e042      	b.n	8001832 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da0f      	bge.n	80017d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	3304      	adds	r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2201      	movs	r2, #1
 80017d0:	705a      	strb	r2, [r3, #1]
 80017d2:	e00f      	b.n	80017f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	f003 0207 	and.w	r2, r3, #7
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	3304      	adds	r3, #4
 80017ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	b2da      	uxtb	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_PCD_EP_ClrStall+0x86>
 8001810:	2302      	movs	r3, #2
 8001812:	e00e      	b.n	8001832 <HAL_PCD_EP_ClrStall+0xa4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f004 fcc0 	bl	80061a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b096      	sub	sp, #88	; 0x58
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001842:	e3a9      	b.n	8001f98 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001850:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800185e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8169 	bne.w	8001b3a <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001868:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b00      	cmp	r3, #0
 8001872:	d150      	bne.n	8001916 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001884:	81fb      	strh	r3, [r7, #14]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	89fb      	ldrh	r3, [r7, #14]
 800188c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001894:	b29b      	uxth	r3, r3
 8001896:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	332c      	adds	r3, #44	; 0x2c
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	441a      	add	r2, r3
 80018d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018d4:	2100      	movs	r1, #0
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f006 fcc5 	bl	8008266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8357 	beq.w	8001f98 <PCD_EP_ISR_Handler+0x75e>
 80018ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8352 	bne.w	8001f98 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001900:	b2da      	uxtb	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b292      	uxth	r2, r2
 8001908:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001914:	e340      	b.n	8001f98 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800191c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001928:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800192c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001930:	2b00      	cmp	r3, #0
 8001932:	d032      	beq.n	800199a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4413      	add	r3, r2
 800194e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800195a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8001966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001968:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800196a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800196c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800196e:	b29b      	uxth	r3, r3
 8001970:	f004 fd66 	bl	8006440 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b29a      	uxth	r2, r3
 800197c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001980:	4013      	ands	r3, r2
 8001982:	823b      	strh	r3, [r7, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	8a3a      	ldrh	r2, [r7, #16]
 800198a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800198e:	b292      	uxth	r2, r2
 8001990:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f006 fc3a 	bl	800820c <HAL_PCD_SetupStageCallback>
 8001998:	e2fe      	b.n	8001f98 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800199a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f280 82fa 	bge.w	8001f98 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019b0:	4013      	ands	r3, r2
 80019b2:	83fb      	strh	r3, [r7, #30]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	8bfa      	ldrh	r2, [r7, #30]
 80019ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019be:	b292      	uxth	r2, r2
 80019c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d019      	beq.n	8001a26 <PCD_EP_ISR_Handler+0x1ec>
 80019f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a00:	6959      	ldr	r1, [r3, #20]
 8001a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a04:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a08:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f004 fd18 	bl	8006440 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	441a      	add	r2, r3
 8001a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a1c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f006 fc05 	bl	8008230 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a30:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 82ad 	bne.w	8001f98 <PCD_EP_ISR_Handler+0x75e>
 8001a3e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a4a:	f000 82a5 	beq.w	8001f98 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	4413      	add	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b3e      	cmp	r3, #62	; 0x3e
 8001a74:	d918      	bls.n	8001aa8 <PCD_EP_ISR_Handler+0x26e>
 8001a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <PCD_EP_ISR_Handler+0x256>
 8001a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	029b      	lsls	r3, r3, #10
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	e029      	b.n	8001afc <PCD_EP_ISR_Handler+0x2c2>
 8001aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d112      	bne.n	8001ad6 <PCD_EP_ISR_Handler+0x29c>
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	801a      	strh	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	801a      	strh	r2, [r3, #0]
 8001ad4:	e012      	b.n	8001afc <PCD_EP_ISR_Handler+0x2c2>
 8001ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x2b6>
 8001aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aec:	3301      	adds	r3, #1
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
 8001af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0c:	827b      	strh	r3, [r7, #18]
 8001b0e:	8a7b      	ldrh	r3, [r7, #18]
 8001b10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b14:	827b      	strh	r3, [r7, #18]
 8001b16:	8a7b      	ldrh	r3, [r7, #18]
 8001b18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b1c:	827b      	strh	r3, [r7, #18]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	8a7b      	ldrh	r3, [r7, #18]
 8001b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	8013      	strh	r3, [r2, #0]
 8001b38:	e22e      	b.n	8001f98 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b4e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f280 80f7 	bge.w	8001d46 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b6e:	4013      	ands	r3, r2
 8001b70:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001b86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b8e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba8:	7b1b      	ldrb	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d123      	bne.n	8001bf6 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001bd6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 808e 	beq.w	8001cfc <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be6:	6959      	ldr	r1, [r3, #20]
 8001be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bea:	88da      	ldrh	r2, [r3, #6]
 8001bec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bf0:	f004 fc26 	bl	8006440 <USB_ReadPMA>
 8001bf4:	e082      	b.n	8001cfc <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf8:	78db      	ldrb	r3, [r3, #3]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d10a      	bne.n	8001c14 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bfe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c02:	461a      	mov	r2, r3
 8001c04:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f9d4 	bl	8001fb4 <HAL_PCD_EP_DB_Receive>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001c12:	e073      	b.n	8001cfc <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	441a      	add	r2, r3
 8001c40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d022      	beq.n	8001cb8 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001c9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d02c      	beq.n	8001cfc <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca8:	6959      	ldr	r1, [r3, #20]
 8001caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cac:	891a      	ldrh	r2, [r3, #8]
 8001cae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cb2:	f004 fbc5 	bl	8006440 <USB_ReadPMA>
 8001cb6:	e021      	b.n	8001cfc <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cdc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001ce0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cee:	6959      	ldr	r1, [r3, #20]
 8001cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf2:	895a      	ldrh	r2, [r3, #10]
 8001cf4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cf8:	f004 fba2 	bl	8006440 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cfe:	69da      	ldr	r2, [r3, #28]
 8001d00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d04:	441a      	add	r2, r3
 8001d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d08:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d12:	441a      	add	r2, r3
 8001d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d16:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <PCD_EP_ISR_Handler+0x4f2>
 8001d20:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d206      	bcs.n	8001d3a <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f006 fa7c 	bl	8008230 <HAL_PCD_DataOutStageCallback>
 8001d38:	e005      	b.n	8001d46 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 feaa 	bl	8004a9a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8122 	beq.w	8001f98 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	3304      	adds	r3, #4
 8001d68:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	441a      	add	r2, r3
 8001d96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	f040 80a2 	bne.w	8001ef4 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8001db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db8:	7b1b      	ldrb	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8093 	beq.w	8001ee6 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dc0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d046      	beq.n	8001e5a <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d126      	bne.n	8001e22 <PCD_EP_ISR_Handler+0x5e8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	4413      	add	r3, r2
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
 8001dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	00da      	lsls	r2, r3, #3
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	4413      	add	r3, r2
 8001df6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	801a      	strh	r2, [r3, #0]
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	801a      	strh	r2, [r3, #0]
 8001e20:	e061      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x6ac>
 8001e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d15d      	bne.n	8001ee6 <PCD_EP_ISR_Handler+0x6ac>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	4413      	add	r3, r2
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	00da      	lsls	r2, r3, #3
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e54:	2200      	movs	r2, #0
 8001e56:	801a      	strh	r2, [r3, #0]
 8001e58:	e045      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d126      	bne.n	8001eb6 <PCD_EP_ISR_Handler+0x67c>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7c:	4413      	add	r3, r2
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	00da      	lsls	r2, r3, #3
 8001e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e88:	4413      	add	r3, r2
 8001e8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	801a      	strh	r2, [r3, #0]
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	e017      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x6ac>
 8001eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d113      	bne.n	8001ee6 <PCD_EP_ISR_Handler+0x6ac>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ecc:	4413      	add	r3, r2
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	00da      	lsls	r2, r3, #3
 8001ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed8:	4413      	add	r3, r2
 8001eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f006 f9ba 	bl	8008266 <HAL_PCD_DataInStageCallback>
 8001ef2:	e051      	b.n	8001f98 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001ef4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d144      	bne.n	8001f8a <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d907      	bls.n	8001f44 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8001f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f3c:	1ad2      	subs	r2, r2, r3
 8001f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f40:	619a      	str	r2, [r3, #24]
 8001f42:	e002      	b.n	8001f4a <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f006 f984 	bl	8008266 <HAL_PCD_DataInStageCallback>
 8001f5e:	e01b      	b.n	8001f98 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f68:	441a      	add	r2, r3
 8001f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f6c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f76:	441a      	add	r2, r3
 8001f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 fd89 	bl	8004a9a <USB_EPStartXfer>
 8001f88:	e006      	b.n	8001f98 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f8a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f917 	bl	80021c6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f6ff ac4d 	blt.w	8001844 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3758      	adds	r7, #88	; 0x58
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d07c      	beq.n	80020c6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	8b7b      	ldrh	r3, [r7, #26]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d306      	bcc.n	800200a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	8b7b      	ldrh	r3, [r7, #26]
 8002002:	1ad2      	subs	r2, r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	619a      	str	r2, [r3, #24]
 8002008:	e002      	b.n	8002010 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d123      	bne.n	8002060 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800202e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002032:	833b      	strh	r3, [r7, #24]
 8002034:	8b3b      	ldrh	r3, [r7, #24]
 8002036:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800203a:	833b      	strh	r3, [r7, #24]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	441a      	add	r2, r3
 800204a:	8b3b      	ldrh	r3, [r7, #24]
 800204c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205c:	b29b      	uxth	r3, r3
 800205e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01f      	beq.n	80020aa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002084:	82fb      	strh	r3, [r7, #22]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	441a      	add	r2, r3
 8002094:	8afb      	ldrh	r3, [r7, #22]
 8002096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800209a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800209e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020aa:	8b7b      	ldrh	r3, [r7, #26]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8085 	beq.w	80021bc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	6959      	ldr	r1, [r3, #20]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	891a      	ldrh	r2, [r3, #8]
 80020be:	8b7b      	ldrh	r3, [r7, #26]
 80020c0:	f004 f9be 	bl	8006440 <USB_ReadPMA>
 80020c4:	e07a      	b.n	80021bc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	8b7b      	ldrh	r3, [r7, #26]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d306      	bcc.n	8002104 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	8b7b      	ldrh	r3, [r7, #26]
 80020fc:	1ad2      	subs	r2, r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	619a      	str	r2, [r3, #24]
 8002102:	e002      	b.n	800210a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d123      	bne.n	800215a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212c:	83fb      	strh	r3, [r7, #30]
 800212e:	8bfb      	ldrh	r3, [r7, #30]
 8002130:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002134:	83fb      	strh	r3, [r7, #30]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	441a      	add	r2, r3
 8002144:	8bfb      	ldrh	r3, [r7, #30]
 8002146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800214a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	b29b      	uxth	r3, r3
 8002158:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d11f      	bne.n	80021a4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800217a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217e:	83bb      	strh	r3, [r7, #28]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	8bbb      	ldrh	r3, [r7, #28]
 8002190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021a4:	8b7b      	ldrh	r3, [r7, #26]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	6959      	ldr	r1, [r3, #20]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	895a      	ldrh	r2, [r3, #10]
 80021b6:	8b7b      	ldrh	r3, [r7, #26]
 80021b8:	f004 f942 	bl	8006440 <USB_ReadPMA>
    }
  }

  return count;
 80021bc:	8b7b      	ldrh	r3, [r7, #26]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b0a2      	sub	sp, #136	; 0x88
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	4613      	mov	r3, r2
 80021d2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 81c5 	beq.w	800256a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002204:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002210:	429a      	cmp	r2, r3
 8002212:	d907      	bls.n	8002224 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800221c:	1ad2      	subs	r2, r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	619a      	str	r2, [r3, #24]
 8002222:	e002      	b.n	800222a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 80b9 	bne.w	80023a6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	785b      	ldrb	r3, [r3, #1]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d126      	bne.n	800228a <HAL_PCD_EP_DB_Transmit+0xc4>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224a:	b29b      	uxth	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	4413      	add	r3, r2
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	00da      	lsls	r2, r3, #3
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	4413      	add	r3, r2
 800225e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800226e:	b29a      	uxth	r2, r3
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800227e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002282:	b29a      	uxth	r2, r3
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	801a      	strh	r2, [r3, #0]
 8002288:	e01a      	b.n	80022c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d116      	bne.n	80022c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	4413      	add	r3, r2
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	00da      	lsls	r2, r3, #3
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	4413      	add	r3, r2
 80022b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	2200      	movs	r2, #0
 80022be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d126      	bne.n	800231c <HAL_PCD_EP_DB_Transmit+0x156>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022dc:	b29b      	uxth	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	4413      	add	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	00da      	lsls	r2, r3, #3
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	4413      	add	r3, r2
 80022f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002300:	b29a      	uxth	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002314:	b29a      	uxth	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	e017      	b.n	800234c <HAL_PCD_EP_DB_Transmit+0x186>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	785b      	ldrb	r3, [r3, #1]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d113      	bne.n	800234c <HAL_PCD_EP_DB_Transmit+0x186>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	4413      	add	r3, r2
 8002334:	623b      	str	r3, [r7, #32]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	00da      	lsls	r2, r3, #3
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	4413      	add	r3, r2
 8002340:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2200      	movs	r2, #0
 800234a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f005 ff87 	bl	8008266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 82d2 	beq.w	8002908 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237e:	827b      	strh	r3, [r7, #18]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	8a7b      	ldrh	r3, [r7, #18]
 8002390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800239c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	8013      	strh	r3, [r2, #0]
 80023a4:	e2b0      	b.n	8002908 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d021      	beq.n	80023f4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	441a      	add	r2, r3
 80023dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80023e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	f040 8284 	bne.w	8002908 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002408:	441a      	add	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	69da      	ldr	r2, [r3, #28]
 8002412:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002416:	441a      	add	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6a1a      	ldr	r2, [r3, #32]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d309      	bcc.n	800243c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	6a1a      	ldr	r2, [r3, #32]
 8002432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	621a      	str	r2, [r3, #32]
 800243a:	e015      	b.n	8002468 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002444:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002448:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002452:	e009      	b.n	8002468 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d155      	bne.n	800251c <HAL_PCD_EP_DB_Transmit+0x356>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	4413      	add	r3, r2
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	00da      	lsls	r2, r3, #3
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	4413      	add	r3, r2
 8002492:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
 8002498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249a:	2b3e      	cmp	r3, #62	; 0x3e
 800249c:	d916      	bls.n	80024cc <HAL_PCD_EP_DB_Transmit+0x306>
 800249e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80024ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b0:	3b01      	subs	r3, #1
 80024b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	029b      	lsls	r3, r3, #10
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	e043      	b.n	8002554 <HAL_PCD_EP_DB_Transmit+0x38e>
 80024cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d112      	bne.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x332>
 80024d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e02d      	b.n	8002554 <HAL_PCD_EP_DB_Transmit+0x38e>
 80024f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80024fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_PCD_EP_DB_Transmit+0x348>
 8002508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800250a:	3301      	adds	r3, #1
 800250c:	64bb      	str	r3, [r7, #72]	; 0x48
 800250e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002510:	b29b      	uxth	r3, r3
 8002512:	029b      	lsls	r3, r3, #10
 8002514:	b29a      	uxth	r2, r3
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	e01b      	b.n	8002554 <HAL_PCD_EP_DB_Transmit+0x38e>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	785b      	ldrb	r3, [r3, #1]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d117      	bne.n	8002554 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	643b      	str	r3, [r7, #64]	; 0x40
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002538:	4413      	add	r3, r2
 800253a:	643b      	str	r3, [r7, #64]	; 0x40
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	00da      	lsls	r2, r3, #3
 8002542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002544:	4413      	add	r3, r2
 8002546:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254e:	b29a      	uxth	r2, r3
 8002550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002552:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	6959      	ldr	r1, [r3, #20]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	891a      	ldrh	r2, [r3, #8]
 8002560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002562:	b29b      	uxth	r3, r3
 8002564:	f003 ff2a 	bl	80063bc <USB_WritePMA>
 8002568:	e1ce      	b.n	8002908 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800259a:	429a      	cmp	r2, r3
 800259c:	d307      	bcc.n	80025ae <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025a6:	1ad2      	subs	r2, r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	e002      	b.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 80c4 	bne.w	8002746 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d126      	bne.n	8002614 <HAL_PCD_EP_DB_Transmit+0x44e>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025da:	4413      	add	r3, r2
 80025dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	00da      	lsls	r2, r3, #3
 80025e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025e6:	4413      	add	r3, r2
 80025e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025ec:	667b      	str	r3, [r7, #100]	; 0x64
 80025ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800260c:	b29a      	uxth	r2, r3
 800260e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	e01a      	b.n	800264a <HAL_PCD_EP_DB_Transmit+0x484>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	785b      	ldrb	r3, [r3, #1]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d116      	bne.n	800264a <HAL_PCD_EP_DB_Transmit+0x484>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	673b      	str	r3, [r7, #112]	; 0x70
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002630:	4413      	add	r3, r2
 8002632:	673b      	str	r3, [r7, #112]	; 0x70
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	00da      	lsls	r2, r3, #3
 800263a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263c:	4413      	add	r3, r2
 800263e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002642:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002646:	2200      	movs	r2, #0
 8002648:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d12f      	bne.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002670:	4413      	add	r3, r2
 8002672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	00da      	lsls	r2, r3, #3
 800267c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002680:	4413      	add	r3, r2
 8002682:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002686:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800268a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002696:	b29a      	uxth	r2, r3
 8002698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800269c:	801a      	strh	r2, [r3, #0]
 800269e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b4:	801a      	strh	r2, [r3, #0]
 80026b6:	e017      	b.n	80026e8 <HAL_PCD_EP_DB_Transmit+0x522>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d113      	bne.n	80026e8 <HAL_PCD_EP_DB_Transmit+0x522>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026ce:	4413      	add	r3, r2
 80026d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	00da      	lsls	r2, r3, #3
 80026d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026da:	4413      	add	r3, r2
 80026dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80026e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e4:	2200      	movs	r2, #0
 80026e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f005 fdb9 	bl	8008266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 8104 	bne.w	8002908 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	441a      	add	r2, r3
 800272c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800273c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002740:	b29b      	uxth	r3, r3
 8002742:	8013      	strh	r3, [r2, #0]
 8002744:	e0e0      	b.n	8002908 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d121      	bne.n	8002794 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	441a      	add	r2, r3
 800277c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800278c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002790:	b29b      	uxth	r3, r3
 8002792:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800279a:	2b01      	cmp	r3, #1
 800279c:	f040 80b4 	bne.w	8002908 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	441a      	add	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027b6:	441a      	add	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6a1a      	ldr	r2, [r3, #32]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d309      	bcc.n	80027dc <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d4:	1ad2      	subs	r2, r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	621a      	str	r2, [r3, #32]
 80027da:	e015      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80027e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027f2:	e009      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2200      	movs	r2, #0
 80027fe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	663b      	str	r3, [r7, #96]	; 0x60
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d155      	bne.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	65bb      	str	r3, [r7, #88]	; 0x58
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282a:	4413      	add	r3, r2
 800282c:	65bb      	str	r3, [r7, #88]	; 0x58
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	00da      	lsls	r2, r3, #3
 8002834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002836:	4413      	add	r3, r2
 8002838:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800283c:	657b      	str	r3, [r7, #84]	; 0x54
 800283e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002840:	2b3e      	cmp	r3, #62	; 0x3e
 8002842:	d916      	bls.n	8002872 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	677b      	str	r3, [r7, #116]	; 0x74
 800284a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <HAL_PCD_EP_DB_Transmit+0x694>
 8002854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002856:	3b01      	subs	r3, #1
 8002858:	677b      	str	r3, [r7, #116]	; 0x74
 800285a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285c:	b29b      	uxth	r3, r3
 800285e:	029b      	lsls	r3, r3, #10
 8002860:	b29b      	uxth	r3, r3
 8002862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800286a:	b29a      	uxth	r2, r3
 800286c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286e:	801a      	strh	r2, [r3, #0]
 8002870:	e040      	b.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002874:	2b00      	cmp	r3, #0
 8002876:	d112      	bne.n	800289e <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002882:	b29a      	uxth	r2, r3
 8002884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002896:	b29a      	uxth	r2, r3
 8002898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289a:	801a      	strh	r2, [r3, #0]
 800289c:	e02a      	b.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x72e>
 800289e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	677b      	str	r3, [r7, #116]	; 0x74
 80028a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80028ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b0:	3301      	adds	r3, #1
 80028b2:	677b      	str	r3, [r7, #116]	; 0x74
 80028b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	029b      	lsls	r3, r3, #10
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028be:	801a      	strh	r2, [r3, #0]
 80028c0:	e018      	b.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x72e>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d114      	bne.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x72e>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d8:	4413      	add	r3, r2
 80028da:	663b      	str	r3, [r7, #96]	; 0x60
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	00da      	lsls	r2, r3, #3
 80028e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028e4:	4413      	add	r3, r2
 80028e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	6959      	ldr	r1, [r3, #20]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	895a      	ldrh	r2, [r3, #10]
 8002900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002902:	b29b      	uxth	r3, r3
 8002904:	f003 fd5a 	bl	80063bc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002922:	823b      	strh	r3, [r7, #16]
 8002924:	8a3b      	ldrh	r3, [r7, #16]
 8002926:	f083 0310 	eor.w	r3, r3, #16
 800292a:	823b      	strh	r3, [r7, #16]
 800292c:	8a3b      	ldrh	r3, [r7, #16]
 800292e:	f083 0320 	eor.w	r3, r3, #32
 8002932:	823b      	strh	r3, [r7, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	8a3b      	ldrh	r3, [r7, #16]
 8002944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800294c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002954:	b29b      	uxth	r3, r3
 8002956:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3788      	adds	r7, #136	; 0x88
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002962:	b480      	push	{r7}
 8002964:	b087      	sub	sp, #28
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
 8002970:	4613      	mov	r3, r2
 8002972:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002974:	897b      	ldrh	r3, [r7, #10]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00c      	beq.n	800299a <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002980:	897b      	ldrh	r3, [r7, #10]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e00a      	b.n	80029b0 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800299a:	897a      	ldrh	r2, [r7, #10]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	3304      	adds	r3, #4
 80029ae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029b0:	893b      	ldrh	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d107      	bne.n	80029c6 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	80da      	strh	r2, [r3, #6]
 80029c4:	e00b      	b.n	80029de <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2201      	movs	r2, #1
 80029ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	b29a      	uxth	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40007000 	.word	0x40007000

08002a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40007000 	.word	0x40007000

08002a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8a:	d130      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a8c:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d038      	beq.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2232      	movs	r2, #50	; 0x32
 8002ab0:	fb02 f303 	mul.w	r3, r2, r3
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0c9b      	lsrs	r3, r3, #18
 8002abc:	3301      	adds	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac0:	e002      	b.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad4:	d102      	bne.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f2      	bne.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae8:	d110      	bne.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e00f      	b.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afa:	d007      	beq.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b04:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	20000000 	.word	0x20000000
 8002b24:	431bde83 	.word	0x431bde83

08002b28 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b36:	6053      	str	r3, [r2, #4]
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40007000 	.word	0x40007000

08002b48 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002b4e:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a44      	ldr	r2, [pc, #272]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002b5a:	f7fd fe03 	bl	8000764 <HAL_GetTick>
 8002b5e:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b62:	f7fd fdff 	bl	8000764 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e073      	b.n	8002c5c <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b74:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b88:	4a36      	ldr	r2, [pc, #216]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002b8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8002b90:	4b34      	ldr	r3, [pc, #208]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8002b96:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_RCC_DeInit+0x120>)
 8002b98:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <HAL_RCC_DeInit+0x124>)
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_DeInit+0x128>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fd8f 	bl	80006c4 <HAL_InitTick>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e055      	b.n	8002c5c <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002bb0:	f7fd fdd8 	bl	8000764 <HAL_GetTick>
 8002bb4:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fd fdd4 	bl	8000764 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e046      	b.n	8002c5c <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8002bce:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ee      	bne.n	8002bb8 <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4921      	ldr	r1, [pc, #132]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002be0:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <HAL_RCC_DeInit+0x12c>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002be6:	f7fd fdbd 	bl	8000764 <HAL_GetTick>
 8002bea:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fd fdb9 	bl	8000764 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e02d      	b.n	8002c5c <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c1c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c2e:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295
 8002c48:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_RCC_DeInit+0x11c>)
 8002c52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	003d0900 	.word	0x003d0900
 8002c70:	20000004 	.word	0x20000004
 8002c74:	fafef4ff 	.word	0xfafef4ff

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f000 bc02 	b.w	8003490 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8c:	4b96      	ldr	r3, [pc, #600]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c96:	4b94      	ldr	r3, [pc, #592]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80e4 	beq.w	8002e76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4c>
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	f040 808b 	bne.w	8002dd2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	f040 8087 	bne.w	8002dd2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc4:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x64>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e3d9      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1a      	ldr	r2, [r3, #32]
 8002ce0:	4b81      	ldr	r3, [pc, #516]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d004      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x7e>
 8002cec:	4b7e      	ldr	r3, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf4:	e005      	b.n	8002d02 <HAL_RCC_OscConfig+0x8a>
 8002cf6:	4b7c      	ldr	r3, [pc, #496]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d223      	bcs.n	8002d4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fd54 	bl	80037b8 <RCC_SetFlashLatencyFromMSIRange>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e3ba      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d1a:	4b73      	ldr	r3, [pc, #460]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a72      	ldr	r2, [pc, #456]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	496d      	ldr	r1, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d38:	4b6b      	ldr	r3, [pc, #428]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	4968      	ldr	r1, [pc, #416]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	e025      	b.n	8002d9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d4e:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d54:	f043 0308 	orr.w	r3, r3, #8
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4960      	ldr	r1, [pc, #384]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	495b      	ldr	r1, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fd14 	bl	80037b8 <RCC_SetFlashLatencyFromMSIRange>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e37a      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d9a:	f000 fc81 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	4950      	ldr	r1, [pc, #320]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002dac:	5ccb      	ldrb	r3, [r1, r3]
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a4e      	ldr	r2, [pc, #312]	; (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002db8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dba:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <HAL_RCC_OscConfig+0x27c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fc80 	bl	80006c4 <HAL_InitTick>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d052      	beq.n	8002e74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	e35e      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d032      	beq.n	8002e40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dda:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a42      	ldr	r2, [pc, #264]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002de6:	f7fd fcbd 	bl	8000764 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dee:	f7fd fcb9 	bl	8000764 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e347      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e00:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a35      	ldr	r2, [pc, #212]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e12:	f043 0308 	orr.w	r3, r3, #8
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4930      	ldr	r1, [pc, #192]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	492b      	ldr	r1, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
 8002e3e:	e01a      	b.n	8002e76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e4c:	f7fd fc8a 	bl	8000764 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e54:	f7fd fc86 	bl	8000764 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e314      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x1dc>
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d073      	beq.n	8002f6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_OscConfig+0x21c>
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d10e      	bne.n	8002eac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d10b      	bne.n	8002eac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d063      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d15f      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e2f1      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e025      	b.n	8002f10 <HAL_RCC_OscConfig+0x298>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ecc:	d114      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x280>
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a02      	ldr	r2, [pc, #8]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e013      	b.n	8002f10 <HAL_RCC_OscConfig+0x298>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	0800898c 	.word	0x0800898c
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	4ba0      	ldr	r3, [pc, #640]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a9f      	ldr	r2, [pc, #636]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b9d      	ldr	r3, [pc, #628]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a9c      	ldr	r2, [pc, #624]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fd fc24 	bl	8000764 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fd fc20 	bl	8000764 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e2ae      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f32:	4b92      	ldr	r3, [pc, #584]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x2a8>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fd fc10 	bl	8000764 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fd fc0c 	bl	8000764 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e29a      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2d0>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d060      	beq.n	8003038 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_OscConfig+0x310>
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d119      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d116      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f88:	4b7c      	ldr	r3, [pc, #496]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x328>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e277      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa0:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	4973      	ldr	r1, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb4:	e040      	b.n	8003038 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d023      	beq.n	8003006 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6e      	ldr	r2, [pc, #440]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fd fbcb 	bl	8000764 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fd fbc7 	bl	8000764 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e255      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe4:	4b65      	ldr	r3, [pc, #404]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b62      	ldr	r3, [pc, #392]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	495f      	ldr	r1, [pc, #380]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
 8003004:	e018      	b.n	8003038 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a5c      	ldr	r2, [pc, #368]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800300c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fd fba7 	bl	8000764 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301a:	f7fd fba3 	bl	8000764 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e231      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800302c:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d03c      	beq.n	80030be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01c      	beq.n	8003086 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304c:	4b4b      	ldr	r3, [pc, #300]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800304e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003052:	4a4a      	ldr	r2, [pc, #296]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fd fb82 	bl	8000764 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003064:	f7fd fb7e 	bl	8000764 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e20c      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ef      	beq.n	8003064 <HAL_RCC_OscConfig+0x3ec>
 8003084:	e01b      	b.n	80030be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308c:	4a3b      	ldr	r2, [pc, #236]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fd fb65 	bl	8000764 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fd fb61 	bl	8000764 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1ef      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ef      	bne.n	800309e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80a6 	beq.w	8003218 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030cc:	2300      	movs	r3, #0
 80030ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10d      	bne.n	80030f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	4a26      	ldr	r2, [pc, #152]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e6:	6593      	str	r3, [r2, #88]	; 0x58
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f4:	2301      	movs	r3, #1
 80030f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f8:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_RCC_OscConfig+0x508>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d118      	bne.n	8003136 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003104:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_RCC_OscConfig+0x508>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_RCC_OscConfig+0x508>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003110:	f7fd fb28 	bl	8000764 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003118:	f7fd fb24 	bl	8000764 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1b2      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_RCC_OscConfig+0x508>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <HAL_RCC_OscConfig+0x4d8>
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800314e:	e029      	b.n	80031a4 <HAL_RCC_OscConfig+0x52c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d115      	bne.n	8003184 <HAL_RCC_OscConfig+0x50c>
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	4a03      	ldr	r2, [pc, #12]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003178:	e014      	b.n	80031a4 <HAL_RCC_OscConfig+0x52c>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000
 8003184:	4b9a      	ldr	r3, [pc, #616]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	4a99      	ldr	r2, [pc, #612]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003194:	4b96      	ldr	r3, [pc, #600]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	4a95      	ldr	r2, [pc, #596]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d016      	beq.n	80031da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fd fada 	bl	8000764 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fd fad6 	bl	8000764 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e162      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ca:	4b89      	ldr	r3, [pc, #548]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ed      	beq.n	80031b4 <HAL_RCC_OscConfig+0x53c>
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fd fac3 	bl	8000764 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fd fabf 	bl	8000764 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e14b      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f8:	4b7d      	ldr	r3, [pc, #500]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ed      	bne.n	80031e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003206:	7ffb      	ldrb	r3, [r7, #31]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b78      	ldr	r3, [pc, #480]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d03c      	beq.n	800329e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01c      	beq.n	8003266 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800322c:	4b70      	ldr	r3, [pc, #448]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 800322e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003232:	4a6f      	ldr	r2, [pc, #444]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fd fa92 	bl	8000764 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003244:	f7fd fa8e 	bl	8000764 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e11c      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003256:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 8003258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ef      	beq.n	8003244 <HAL_RCC_OscConfig+0x5cc>
 8003264:	e01b      	b.n	800329e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003266:	4b62      	ldr	r3, [pc, #392]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 8003268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800326c:	4a60      	ldr	r2, [pc, #384]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fd fa75 	bl	8000764 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800327e:	f7fd fa71 	bl	8000764 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0ff      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003290:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 8003292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ef      	bne.n	800327e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80f3 	beq.w	800348e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	f040 80c9 	bne.w	8003444 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032b2:	4b4f      	ldr	r3, [pc, #316]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0203 	and.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d12c      	bne.n	8003320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	3b01      	subs	r3, #1
 80032d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d123      	bne.n	8003320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d11b      	bne.n	8003320 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d113      	bne.n	8003320 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	3b01      	subs	r3, #1
 8003306:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d109      	bne.n	8003320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	3b01      	subs	r3, #1
 800331a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d06b      	beq.n	80033f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d062      	beq.n	80033ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003326:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0ac      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003336:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 800333c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003340:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003342:	f7fd fa0f 	bl	8000764 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334a:	f7fd fa0b 	bl	8000764 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e099      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003368:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_RCC_OscConfig+0x77c>)
 800336e:	4013      	ands	r3, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003378:	3a01      	subs	r2, #1
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	4311      	orrs	r1, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003382:	0212      	lsls	r2, r2, #8
 8003384:	4311      	orrs	r1, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800338a:	0852      	lsrs	r2, r2, #1
 800338c:	3a01      	subs	r2, #1
 800338e:	0552      	lsls	r2, r2, #21
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003396:	0852      	lsrs	r2, r2, #1
 8003398:	3a01      	subs	r2, #1
 800339a:	0652      	lsls	r2, r2, #25
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a2:	06d2      	lsls	r2, r2, #27
 80033a4:	430a      	orrs	r2, r1
 80033a6:	4912      	ldr	r1, [pc, #72]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 80033b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033c4:	f7fd f9ce 	bl	8000764 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fd f9ca 	bl	8000764 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e058      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ea:	e050      	b.n	800348e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e04f      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
 80033f0:	40021000 	.word	0x40021000
 80033f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d144      	bne.n	800348e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a23      	ldr	r2, [pc, #140]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a20      	ldr	r2, [pc, #128]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 8003416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800341c:	f7fd f9a2 	bl	8000764 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003424:	f7fd f99e 	bl	8000764 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e02c      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x7ac>
 8003442:	e024      	b.n	800348e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d01f      	beq.n	800348a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a12      	ldr	r2, [pc, #72]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 8003450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fd f985 	bl	8000764 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7fd f981 	bl	8000764 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e00f      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4905      	ldr	r1, [pc, #20]	; (8003498 <HAL_RCC_OscConfig+0x820>)
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_OscConfig+0x824>)
 8003484:	4013      	ands	r3, r2
 8003486:	60cb      	str	r3, [r1, #12]
 8003488:	e001      	b.n	800348e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3720      	adds	r7, #32
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	feeefffc 	.word	0xfeeefffc

080034a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0e7      	b.n	8003684 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b75      	ldr	r3, [pc, #468]	; (800368c <HAL_RCC_ClockConfig+0x1ec>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d910      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b72      	ldr	r3, [pc, #456]	; (800368c <HAL_RCC_ClockConfig+0x1ec>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0207 	bic.w	r2, r3, #7
 80034ca:	4970      	ldr	r1, [pc, #448]	; (800368c <HAL_RCC_ClockConfig+0x1ec>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b6e      	ldr	r3, [pc, #440]	; (800368c <HAL_RCC_ClockConfig+0x1ec>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0cf      	b.n	8003684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d010      	beq.n	8003512 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	4b66      	ldr	r3, [pc, #408]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d908      	bls.n	8003512 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003500:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4960      	ldr	r1, [pc, #384]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d04c      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003526:	4b5a      	ldr	r3, [pc, #360]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d121      	bne.n	8003576 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0a6      	b.n	8003684 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353e:	4b54      	ldr	r3, [pc, #336]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d115      	bne.n	8003576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e09a      	b.n	8003684 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003556:	4b4e      	ldr	r3, [pc, #312]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e08e      	b.n	8003684 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e086      	b.n	8003684 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003576:	4b46      	ldr	r3, [pc, #280]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 0203 	bic.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4943      	ldr	r1, [pc, #268]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003588:	f7fd f8ec 	bl	8000764 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003590:	f7fd f8e8 	bl	8000764 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e06e      	b.n	8003684 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 020c 	and.w	r2, r3, #12
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d1eb      	bne.n	8003590 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	4b31      	ldr	r3, [pc, #196]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d208      	bcs.n	80035e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d4:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	492b      	ldr	r1, [pc, #172]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_RCC_ClockConfig+0x1ec>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d210      	bcs.n	8003616 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_RCC_ClockConfig+0x1ec>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 0207 	bic.w	r2, r3, #7
 80035fc:	4923      	ldr	r1, [pc, #140]	; (800368c <HAL_RCC_ClockConfig+0x1ec>)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003604:	4b21      	ldr	r3, [pc, #132]	; (800368c <HAL_RCC_ClockConfig+0x1ec>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d001      	beq.n	8003616 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e036      	b.n	8003684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	4918      	ldr	r1, [pc, #96]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4910      	ldr	r1, [pc, #64]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	4313      	orrs	r3, r2
 8003652:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003654:	f000 f824 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	490b      	ldr	r1, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x1f4>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
 8003670:	4a09      	ldr	r2, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 8003672:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1fc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd f823 	bl	80006c4 <HAL_InitTick>
 800367e:	4603      	mov	r3, r0
 8003680:	72fb      	strb	r3, [r7, #11]

  return status;
 8003682:	7afb      	ldrb	r3, [r7, #11]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40022000 	.word	0x40022000
 8003690:	40021000 	.word	0x40021000
 8003694:	0800898c 	.word	0x0800898c
 8003698:	20000000 	.word	0x20000000
 800369c:	20000004 	.word	0x20000004

080036a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x34>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d121      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d11e      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036d4:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e6:	0a1b      	lsrs	r3, r3, #8
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e005      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036f0:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036fc:	4a2b      	ldr	r2, [pc, #172]	; (80037ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003710:	e00a      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d102      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	e004      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d101      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003724:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b0c      	cmp	r3, #12
 800372c:	d134      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0xa6>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d003      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0xac>
 8003744:	e005      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003748:	617b      	str	r3, [r7, #20]
      break;
 800374a:	e005      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800374e:	617b      	str	r3, [r7, #20]
      break;
 8003750:	e002      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	617b      	str	r3, [r7, #20]
      break;
 8003756:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003758:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	3301      	adds	r3, #1
 8003764:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	fb03 f202 	mul.w	r2, r3, r2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	0e5b      	lsrs	r3, r3, #25
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	3301      	adds	r3, #1
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003798:	69bb      	ldr	r3, [r7, #24]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	0800899c 	.word	0x0800899c
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	007a1200 	.word	0x007a1200

080037b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037c4:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037d0:	f7ff f946 	bl	8002a60 <HAL_PWREx_GetVoltageRange>
 80037d4:	6178      	str	r0, [r7, #20]
 80037d6:	e014      	b.n	8003802 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	4a24      	ldr	r2, [pc, #144]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6593      	str	r3, [r2, #88]	; 0x58
 80037e4:	4b22      	ldr	r3, [pc, #136]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037f0:	f7ff f936 	bl	8002a60 <HAL_PWREx_GetVoltageRange>
 80037f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003808:	d10b      	bne.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d919      	bls.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2ba0      	cmp	r3, #160	; 0xa0
 8003814:	d902      	bls.n	800381c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003816:	2302      	movs	r3, #2
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e013      	b.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800381c:	2301      	movs	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	e010      	b.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b80      	cmp	r3, #128	; 0x80
 8003826:	d902      	bls.n	800382e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003828:	2303      	movs	r3, #3
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e00a      	b.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d102      	bne.n	800383a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003834:	2302      	movs	r3, #2
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	e004      	b.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b70      	cmp	r3, #112	; 0x70
 800383e:	d101      	bne.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003840:	2301      	movs	r3, #1
 8003842:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 0207 	bic.w	r2, r3, #7
 800384c:	4909      	ldr	r1, [pc, #36]	; (8003874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003854:	4b07      	ldr	r3, [pc, #28]	; (8003874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	429a      	cmp	r2, r3
 8003860:	d001      	beq.n	8003866 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	40022000 	.word	0x40022000

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003880:	2300      	movs	r3, #0
 8003882:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003884:	2300      	movs	r3, #0
 8003886:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003890:	2b00      	cmp	r3, #0
 8003892:	d031      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003898:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800389c:	d01a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800389e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038a2:	d814      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ac:	d10f      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80038ae:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	4a5c      	ldr	r2, [pc, #368]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ba:	e00c      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f9de 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	74fb      	strb	r3, [r7, #19]
      break;
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038dc:	4b51      	ldr	r3, [pc, #324]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	494e      	ldr	r1, [pc, #312]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038f2:	e001      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 809e 	beq.w	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800390a:	4b46      	ldr	r3, [pc, #280]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00d      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003920:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	4a3f      	ldr	r2, [pc, #252]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6593      	str	r3, [r2, #88]	; 0x58
 800392c:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003938:	2301      	movs	r3, #1
 800393a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800393c:	4b3a      	ldr	r3, [pc, #232]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a39      	ldr	r2, [pc, #228]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003946:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003948:	f7fc ff0c 	bl	8000764 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800394e:	e009      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003950:	f7fc ff08 	bl	8000764 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d902      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	74fb      	strb	r3, [r7, #19]
        break;
 8003962:	e005      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ef      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d15a      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003976:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003980:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01e      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	429a      	cmp	r2, r3
 8003990:	d019      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800399e:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039be:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d016      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fc fec8 	bl	8000764 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d6:	e00b      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7fc fec4 	bl	8000764 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d902      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	74fb      	strb	r3, [r7, #19]
            break;
 80039ee:	e006      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ec      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a12:	4904      	ldr	r1, [pc, #16]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a1a:	e009      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
 8003a20:	e006      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a30:	7c7b      	ldrb	r3, [r7, #17]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d105      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a36:	4b8a      	ldr	r3, [pc, #552]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a89      	ldr	r2, [pc, #548]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a4e:	4b84      	ldr	r3, [pc, #528]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f023 0203 	bic.w	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4980      	ldr	r1, [pc, #512]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a70:	4b7b      	ldr	r3, [pc, #492]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f023 020c 	bic.w	r2, r3, #12
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	4978      	ldr	r1, [pc, #480]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a92:	4b73      	ldr	r3, [pc, #460]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	496f      	ldr	r1, [pc, #444]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac2:	4967      	ldr	r1, [pc, #412]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ad6:	4b62      	ldr	r3, [pc, #392]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	495e      	ldr	r1, [pc, #376]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003af8:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	4956      	ldr	r1, [pc, #344]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b1a:	4b51      	ldr	r3, [pc, #324]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	494d      	ldr	r1, [pc, #308]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d028      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b3c:	4b48      	ldr	r3, [pc, #288]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4945      	ldr	r1, [pc, #276]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b5c:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b66:	60d3      	str	r3, [r2, #12]
 8003b68:	e011      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f882 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d028      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b9a:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	492d      	ldr	r1, [pc, #180]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	4a28      	ldr	r2, [pc, #160]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc4:	60d3      	str	r3, [r2, #12]
 8003bc6:	e011      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 f853 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01c      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c06:	4916      	ldr	r1, [pc, #88]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f830 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	4904      	ldr	r1, [pc, #16]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c54:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000

08003c64 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	6013      	str	r3, [r2, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000

08003c84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c92:	4b74      	ldr	r3, [pc, #464]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d018      	beq.n	8003cd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c9e:	4b71      	ldr	r3, [pc, #452]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0203 	and.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d10d      	bne.n	8003cca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cb6:	4b6b      	ldr	r3, [pc, #428]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d047      	beq.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
 8003cce:	e044      	b.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d018      	beq.n	8003d0a <RCCEx_PLLSAI1_Config+0x86>
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d825      	bhi.n	8003d28 <RCCEx_PLLSAI1_Config+0xa4>
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x62>
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d009      	beq.n	8003cf8 <RCCEx_PLLSAI1_Config+0x74>
 8003ce4:	e020      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ce6:	4b5f      	ldr	r3, [pc, #380]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11d      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf6:	e01a      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cf8:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d116      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d08:	e013      	b.n	8003d32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d0a:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d16:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d26:	e006      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2c:	e004      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e002      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10d      	bne.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d3e:	4b49      	ldr	r3, [pc, #292]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	430b      	orrs	r3, r1
 8003d54:	4943      	ldr	r1, [pc, #268]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d17c      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d60:	4b40      	ldr	r3, [pc, #256]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3f      	ldr	r2, [pc, #252]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fc fcfa 	bl	8000764 <HAL_GetTick>
 8003d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d72:	e009      	b.n	8003d88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d74:	f7fc fcf6 	bl	8000764 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	73fb      	strb	r3, [r7, #15]
        break;
 8003d86:	e005      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ef      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d15f      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d110      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da0:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003da8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	0211      	lsls	r1, r2, #8
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68d2      	ldr	r2, [r2, #12]
 8003db6:	06d2      	lsls	r2, r2, #27
 8003db8:	430a      	orrs	r2, r1
 8003dba:	492a      	ldr	r1, [pc, #168]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	610b      	str	r3, [r1, #16]
 8003dc0:	e027      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d112      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6892      	ldr	r2, [r2, #8]
 8003dd8:	0211      	lsls	r1, r2, #8
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6912      	ldr	r2, [r2, #16]
 8003dde:	0852      	lsrs	r2, r2, #1
 8003de0:	3a01      	subs	r2, #1
 8003de2:	0552      	lsls	r2, r2, #21
 8003de4:	430a      	orrs	r2, r1
 8003de6:	491f      	ldr	r1, [pc, #124]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	610b      	str	r3, [r1, #16]
 8003dec:	e011      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dee:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003df6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6892      	ldr	r2, [r2, #8]
 8003dfe:	0211      	lsls	r1, r2, #8
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6952      	ldr	r2, [r2, #20]
 8003e04:	0852      	lsrs	r2, r2, #1
 8003e06:	3a01      	subs	r2, #1
 8003e08:	0652      	lsls	r2, r2, #25
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	4915      	ldr	r1, [pc, #84]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fc fca1 	bl	8000764 <HAL_GetTick>
 8003e22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e24:	e009      	b.n	8003e3a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e26:	f7fc fc9d 	bl	8000764 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d902      	bls.n	8003e3a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	73fb      	strb	r3, [r7, #15]
          break;
 8003e38:	e005      	b.n	8003e46 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ef      	beq.n	8003e26 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	4903      	ldr	r1, [pc, #12]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000

08003e68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e68:	b084      	sub	sp, #16
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	f107 0014 	add.w	r0, r7, #20
 8003e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	b004      	add	sp, #16
 8003e88:	4770      	bx	lr

08003e8a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e9a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003e9e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ec0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003ec4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f08:	b084      	sub	sp, #16
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	f107 0014 	add.w	r0, r7, #20
 8003f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	b004      	add	sp, #16
 8003f48:	4770      	bx	lr
	...

08003f4c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b09d      	sub	sp, #116	; 0x74
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	78db      	ldrb	r3, [r3, #3]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d81f      	bhi.n	8003fbe <USB_ActivateEndpoint+0x72>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <USB_ActivateEndpoint+0x38>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003f95 	.word	0x08003f95
 8003f88:	08003fb1 	.word	0x08003fb1
 8003f8c:	08003fc7 	.word	0x08003fc7
 8003f90:	08003fa3 	.word	0x08003fa3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003fa0:	e012      	b.n	8003fc8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003fa2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003fa6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003faa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003fae:	e00b      	b.n	8003fc8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003fb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003fbc:	e004      	b.n	8003fc8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003fc4:	e000      	b.n	8003fc8 <USB_ActivateEndpoint+0x7c>
      break;
 8003fc6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	b21b      	sxth	r3, r3
 8003ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	b21a      	sxth	r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	b21b      	sxth	r3, r3
 800400a:	4313      	orrs	r3, r2
 800400c:	b21b      	sxth	r3, r3
 800400e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	441a      	add	r2, r3
 800401c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004030:	b29b      	uxth	r3, r3
 8004032:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	7b1b      	ldrb	r3, [r3, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 816e 	bne.w	800431a <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8084 	beq.w	8004150 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4413      	add	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	00da      	lsls	r2, r3, #3
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	88db      	ldrh	r3, [r3, #6]
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	827b      	strh	r3, [r7, #18]
 800408a:	8a7b      	ldrh	r3, [r7, #18]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01b      	beq.n	80040cc <USB_ActivateEndpoint+0x180>
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	823b      	strh	r3, [r7, #16]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	441a      	add	r2, r3
 80040b6:	8a3b      	ldrh	r3, [r7, #16]
 80040b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	78db      	ldrb	r3, [r3, #3]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d020      	beq.n	8004116 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ea:	81bb      	strh	r3, [r7, #12]
 80040ec:	89bb      	ldrh	r3, [r7, #12]
 80040ee:	f083 0320 	eor.w	r3, r3, #32
 80040f2:	81bb      	strh	r3, [r7, #12]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	89bb      	ldrh	r3, [r7, #12]
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]
 8004114:	e2cb      	b.n	80046ae <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412c:	81fb      	strh	r3, [r7, #14]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	441a      	add	r2, r3
 8004138:	89fb      	ldrh	r3, [r7, #14]
 800413a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800413e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414a:	b29b      	uxth	r3, r3
 800414c:	8013      	strh	r3, [r2, #0]
 800414e:	e2ae      	b.n	80046ae <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	633b      	str	r3, [r7, #48]	; 0x30
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	4413      	add	r3, r2
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	00da      	lsls	r2, r3, #3
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	4413      	add	r3, r2
 800416e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	88db      	ldrh	r3, [r3, #6]
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418e:	b29b      	uxth	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	4413      	add	r3, r2
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	00da      	lsls	r2, r3, #3
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	4413      	add	r3, r2
 80041a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b3e      	cmp	r3, #62	; 0x3e
 80041ae:	d918      	bls.n	80041e2 <USB_ActivateEndpoint+0x296>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <USB_ActivateEndpoint+0x27e>
 80041c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c6:	3b01      	subs	r3, #1
 80041c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	029b      	lsls	r3, r3, #10
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041da:	b29a      	uxth	r2, r3
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	e029      	b.n	8004236 <USB_ActivateEndpoint+0x2ea>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d112      	bne.n	8004210 <USB_ActivateEndpoint+0x2c4>
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004208:	b29a      	uxth	r2, r3
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	801a      	strh	r2, [r3, #0]
 800420e:	e012      	b.n	8004236 <USB_ActivateEndpoint+0x2ea>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	66bb      	str	r3, [r7, #104]	; 0x68
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <USB_ActivateEndpoint+0x2de>
 8004224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004226:	3301      	adds	r3, #1
 8004228:	66bb      	str	r3, [r7, #104]	; 0x68
 800422a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800422c:	b29b      	uxth	r3, r3
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	b29a      	uxth	r2, r3
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	847b      	strh	r3, [r7, #34]	; 0x22
 8004244:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01b      	beq.n	8004286 <USB_ActivateEndpoint+0x33a>
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004264:	843b      	strh	r3, [r7, #32]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	8c3b      	ldrh	r3, [r7, #32]
 8004272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004282:	b29b      	uxth	r3, r3
 8004284:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d124      	bne.n	80042d8 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a4:	83bb      	strh	r3, [r7, #28]
 80042a6:	8bbb      	ldrh	r3, [r7, #28]
 80042a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042ac:	83bb      	strh	r3, [r7, #28]
 80042ae:	8bbb      	ldrh	r3, [r7, #28]
 80042b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042b4:	83bb      	strh	r3, [r7, #28]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	441a      	add	r2, r3
 80042c0:	8bbb      	ldrh	r3, [r7, #28]
 80042c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8013      	strh	r3, [r2, #0]
 80042d6:	e1ea      	b.n	80046ae <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	83fb      	strh	r3, [r7, #30]
 80042f0:	8bfb      	ldrh	r3, [r7, #30]
 80042f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042f6:	83fb      	strh	r3, [r7, #30]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	8bfb      	ldrh	r3, [r7, #30]
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]
 8004318:	e1c9      	b.n	80046ae <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	78db      	ldrb	r3, [r3, #3]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d11e      	bne.n	8004360 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004338:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	441a      	add	r2, r3
 8004346:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800434a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004352:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435a:	b29b      	uxth	r3, r3
 800435c:	8013      	strh	r3, [r2, #0]
 800435e:	e01d      	b.n	800439c <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	441a      	add	r2, r3
 8004384:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ac:	4413      	add	r3, r2
 80043ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	00da      	lsls	r2, r3, #3
 80043b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043be:	65bb      	str	r3, [r7, #88]	; 0x58
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	891b      	ldrh	r3, [r3, #8]
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ce:	801a      	strh	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	657b      	str	r3, [r7, #84]	; 0x54
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043da:	b29b      	uxth	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e0:	4413      	add	r3, r2
 80043e2:	657b      	str	r3, [r7, #84]	; 0x54
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	00da      	lsls	r2, r3, #3
 80043ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ec:	4413      	add	r3, r2
 80043ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043f2:	653b      	str	r3, [r7, #80]	; 0x50
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	895b      	ldrh	r3, [r3, #10]
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004402:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 8093 	bne.w	8004534 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800441e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01b      	beq.n	8004462 <USB_ActivateEndpoint+0x516>
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004440:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	441a      	add	r2, r3
 800444c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800444e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800445a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445e:	b29b      	uxth	r3, r3
 8004460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004470:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01b      	beq.n	80044b2 <USB_ActivateEndpoint+0x566>
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	441a      	add	r2, r3
 800449c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80044ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80044d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004510:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	441a      	add	r2, r3
 800451c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800451e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452e:	b29b      	uxth	r3, r3
 8004530:	8013      	strh	r3, [r2, #0]
 8004532:	e0bc      	b.n	80046ae <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01d      	beq.n	800458c <USB_ActivateEndpoint+0x640>
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004588:	b29b      	uxth	r3, r3
 800458a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800459c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01d      	beq.n	80045e4 <USB_ActivateEndpoint+0x698>
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	441a      	add	r2, r3
 80045cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	78db      	ldrb	r3, [r3, #3]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d024      	beq.n	8004636 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004602:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004606:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800460a:	f083 0320 	eor.w	r3, r3, #32
 800460e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004630:	b29b      	uxth	r3, r3
 8004632:	8013      	strh	r3, [r2, #0]
 8004634:	e01d      	b.n	8004672 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800464c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800465e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	b29b      	uxth	r3, r3
 8004670:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800469a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80046ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3774      	adds	r7, #116	; 0x74
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop

080046c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b08d      	sub	sp, #52	; 0x34
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	7b1b      	ldrb	r3, [r3, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 808e 	bne.w	80047f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d044      	beq.n	8004766 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	81bb      	strh	r3, [r7, #12]
 80046ea:	89bb      	ldrh	r3, [r7, #12]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <USB_DeactivateEndpoint+0x6c>
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	817b      	strh	r3, [r7, #10]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	897b      	ldrh	r3, [r7, #10]
 8004718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004724:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004742:	813b      	strh	r3, [r7, #8]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	893b      	ldrh	r3, [r7, #8]
 8004750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004760:	b29b      	uxth	r3, r3
 8004762:	8013      	strh	r3, [r2, #0]
 8004764:	e192      	b.n	8004a8c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	827b      	strh	r3, [r7, #18]
 8004774:	8a7b      	ldrh	r3, [r7, #18]
 8004776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01b      	beq.n	80047b6 <USB_DeactivateEndpoint+0xf6>
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004794:	823b      	strh	r3, [r7, #16]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	8a3b      	ldrh	r3, [r7, #16]
 80047a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047cc:	81fb      	strh	r3, [r7, #14]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	89fb      	ldrh	r3, [r7, #14]
 80047da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	8013      	strh	r3, [r2, #0]
 80047ee:	e14d      	b.n	8004a8c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f040 80a5 	bne.w	8004944 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	843b      	strh	r3, [r7, #32]
 8004808:	8c3b      	ldrh	r3, [r7, #32]
 800480a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01b      	beq.n	800484a <USB_DeactivateEndpoint+0x18a>
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	83fb      	strh	r3, [r7, #30]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	441a      	add	r2, r3
 8004834:	8bfb      	ldrh	r3, [r7, #30]
 8004836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800483a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800483e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004846:	b29b      	uxth	r3, r3
 8004848:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	83bb      	strh	r3, [r7, #28]
 8004858:	8bbb      	ldrh	r3, [r7, #28]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01b      	beq.n	800489a <USB_DeactivateEndpoint+0x1da>
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004878:	837b      	strh	r3, [r7, #26]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	441a      	add	r2, r3
 8004884:	8b7b      	ldrh	r3, [r7, #26]
 8004886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004892:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004896:	b29b      	uxth	r3, r3
 8004898:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b0:	833b      	strh	r3, [r7, #24]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	441a      	add	r2, r3
 80048bc:	8b3b      	ldrh	r3, [r7, #24]
 80048be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e8:	82fb      	strh	r3, [r7, #22]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	8afb      	ldrh	r3, [r7, #22]
 80048f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004920:	82bb      	strh	r3, [r7, #20]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	8abb      	ldrh	r3, [r7, #20]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
 8004942:	e0a3      	b.n	8004a8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004952:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <USB_DeactivateEndpoint+0x2d4>
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	441a      	add	r2, r3
 800497e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800498c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004990:	b29b      	uxth	r3, r3
 8004992:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80049a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01b      	beq.n	80049e4 <USB_DeactivateEndpoint+0x324>
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	441a      	add	r2, r3
 8004a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3734      	adds	r7, #52	; 0x34
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b0c2      	sub	sp, #264	; 0x108
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aa8:	6018      	str	r0, [r3, #0]
 8004aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ab2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	f040 867b 	bne.w	80057bc <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d908      	bls.n	8004af4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004af2:	e007      	b.n	8004b04 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	7b1b      	ldrb	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d13a      	bne.n	8004b8a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6959      	ldr	r1, [r3, #20]
 8004b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	88da      	ldrh	r2, [r3, #6]
 8004b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004b36:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004b3a:	6800      	ldr	r0, [r0, #0]
 8004b3c:	f001 fc3e 	bl	80063bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4413      	add	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	00da      	lsls	r2, r3, #3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4413      	add	r3, r2
 8004b76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	801a      	strh	r2, [r3, #0]
 8004b86:	f000 bde3 	b.w	8005750 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	78db      	ldrb	r3, [r3, #3]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	f040 843a 	bne.w	8005410 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	f240 83b7 	bls.w	8005328 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	441a      	add	r2, r3
 8004bfe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a1a      	ldr	r2, [r3, #32]
 8004c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 81b3 	beq.w	8004fc2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
 8004c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d16d      	bne.n	8004d54 <USB_EPStartXfer+0x2ba>
 8004c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	4413      	add	r3, r2
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	00da      	lsls	r2, r3, #3
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	4413      	add	r3, r2
 8004cae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8004cba:	d91c      	bls.n	8004cf6 <USB_EPStartXfer+0x25c>
 8004cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <USB_EPStartXfer+0x242>
 8004cd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	029b      	lsls	r3, r3, #10
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	e053      	b.n	8004d9e <USB_EPStartXfer+0x304>
 8004cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d112      	bne.n	8004d24 <USB_EPStartXfer+0x28a>
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	e03c      	b.n	8004d9e <USB_EPStartXfer+0x304>
 8004d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <USB_EPStartXfer+0x2aa>
 8004d3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d3e:	3301      	adds	r3, #1
 8004d40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	029b      	lsls	r3, r3, #10
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	801a      	strh	r2, [r3, #0]
 8004d52:	e024      	b.n	8004d9e <USB_EPStartXfer+0x304>
 8004d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d11c      	bne.n	8004d9e <USB_EPStartXfer+0x304>
 8004d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	4413      	add	r3, r2
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	00da      	lsls	r2, r3, #3
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	895b      	ldrh	r3, [r3, #10]
 8004daa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6959      	ldr	r1, [r3, #20]
 8004dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004dc4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004dc8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004dcc:	6800      	ldr	r0, [r0, #0]
 8004dce:	f001 faf5 	bl	80063bc <USB_WritePMA>
            ep->xfer_buff += len;
 8004dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de2:	441a      	add	r2, r3
 8004de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a1a      	ldr	r2, [r3, #32]
 8004dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d90f      	bls.n	8004e2c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8004e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	621a      	str	r2, [r3, #32]
 8004e2a:	e00e      	b.n	8004e4a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d16d      	bne.n	8004f36 <USB_EPStartXfer+0x49c>
 8004e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	00da      	lsls	r2, r3, #3
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e9c:	d91c      	bls.n	8004ed8 <USB_EPStartXfer+0x43e>
 8004e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <USB_EPStartXfer+0x424>
 8004eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	e059      	b.n	8004f8c <USB_EPStartXfer+0x4f2>
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d112      	bne.n	8004f06 <USB_EPStartXfer+0x46c>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	801a      	strh	r2, [r3, #0]
 8004f04:	e042      	b.n	8004f8c <USB_EPStartXfer+0x4f2>
 8004f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d004      	beq.n	8004f26 <USB_EPStartXfer+0x48c>
 8004f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f20:	3301      	adds	r3, #1
 8004f22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	029b      	lsls	r3, r3, #10
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	e02a      	b.n	8004f8c <USB_EPStartXfer+0x4f2>
 8004f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d122      	bne.n	8004f8c <USB_EPStartXfer+0x4f2>
 8004f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	623b      	str	r3, [r7, #32]
 8004f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	4413      	add	r3, r2
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	00da      	lsls	r2, r3, #3
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	891b      	ldrh	r3, [r3, #8]
 8004f98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6959      	ldr	r1, [r3, #20]
 8004fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004fb2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004fb6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	f001 f9fe 	bl	80063bc <USB_WritePMA>
 8004fc0:	e3c6      	b.n	8005750 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d16d      	bne.n	80050ae <USB_EPStartXfer+0x614>
 8004fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff2:	4413      	add	r3, r2
 8004ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	00da      	lsls	r2, r3, #3
 8005004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005006:	4413      	add	r3, r2
 8005008:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800500c:	647b      	str	r3, [r7, #68]	; 0x44
 800500e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005012:	2b3e      	cmp	r3, #62	; 0x3e
 8005014:	d91c      	bls.n	8005050 <USB_EPStartXfer+0x5b6>
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <USB_EPStartXfer+0x59c>
 800502c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005030:	3b01      	subs	r3, #1
 8005032:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005036:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800503a:	b29b      	uxth	r3, r3
 800503c:	029b      	lsls	r3, r3, #10
 800503e:	b29b      	uxth	r3, r3
 8005040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005048:	b29a      	uxth	r2, r3
 800504a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	e059      	b.n	8005104 <USB_EPStartXfer+0x66a>
 8005050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005054:	2b00      	cmp	r3, #0
 8005056:	d112      	bne.n	800507e <USB_EPStartXfer+0x5e4>
 8005058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005062:	b29a      	uxth	r2, r3
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005076:	b29a      	uxth	r2, r3
 8005078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e042      	b.n	8005104 <USB_EPStartXfer+0x66a>
 800507e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <USB_EPStartXfer+0x604>
 8005094:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005098:	3301      	adds	r3, #1
 800509a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800509e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	029b      	lsls	r3, r3, #10
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	e02a      	b.n	8005104 <USB_EPStartXfer+0x66a>
 80050ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d122      	bne.n	8005104 <USB_EPStartXfer+0x66a>
 80050be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	653b      	str	r3, [r7, #80]	; 0x50
 80050ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d8:	b29b      	uxth	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050de:	4413      	add	r3, r2
 80050e0:	653b      	str	r3, [r7, #80]	; 0x50
 80050e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	00da      	lsls	r2, r3, #3
 80050f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f2:	4413      	add	r3, r2
 80050f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005102:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	891b      	ldrh	r3, [r3, #8]
 8005110:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6959      	ldr	r1, [r3, #20]
 8005120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005124:	b29b      	uxth	r3, r3
 8005126:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800512a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800512e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005132:	6800      	ldr	r0, [r0, #0]
 8005134:	f001 f942 	bl	80063bc <USB_WritePMA>
            ep->xfer_buff += len;
 8005138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005148:	441a      	add	r2, r3
 800514a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a1a      	ldr	r2, [r3, #32]
 8005162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	429a      	cmp	r2, r3
 8005170:	d90f      	bls.n	8005192 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8005172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a1a      	ldr	r2, [r3, #32]
 800517e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	621a      	str	r2, [r3, #32]
 8005190:	e00e      	b.n	80051b0 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8005192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80051a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2200      	movs	r2, #0
 80051ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	643b      	str	r3, [r7, #64]	; 0x40
 80051bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d16d      	bne.n	80052a8 <USB_EPStartXfer+0x80e>
 80051cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	4413      	add	r3, r2
 80051ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	00da      	lsls	r2, r3, #3
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	4413      	add	r3, r2
 8005202:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520c:	2b3e      	cmp	r3, #62	; 0x3e
 800520e:	d91c      	bls.n	800524a <USB_EPStartXfer+0x7b0>
 8005210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800521a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <USB_EPStartXfer+0x796>
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522a:	3b01      	subs	r3, #1
 800522c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	b29b      	uxth	r3, r3
 8005236:	029b      	lsls	r3, r3, #10
 8005238:	b29b      	uxth	r3, r3
 800523a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800523e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005242:	b29a      	uxth	r2, r3
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	e053      	b.n	80052f2 <USB_EPStartXfer+0x858>
 800524a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524e:	2b00      	cmp	r3, #0
 8005250:	d112      	bne.n	8005278 <USB_EPStartXfer+0x7de>
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800525c:	b29a      	uxth	r2, r3
 800525e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005270:	b29a      	uxth	r2, r3
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	e03c      	b.n	80052f2 <USB_EPStartXfer+0x858>
 8005278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <USB_EPStartXfer+0x7fe>
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	3301      	adds	r3, #1
 8005294:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	b29b      	uxth	r3, r3
 800529e:	029b      	lsls	r3, r3, #10
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	e024      	b.n	80052f2 <USB_EPStartXfer+0x858>
 80052a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d11c      	bne.n	80052f2 <USB_EPStartXfer+0x858>
 80052b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052cc:	4413      	add	r3, r2
 80052ce:	643b      	str	r3, [r7, #64]	; 0x40
 80052d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	00da      	lsls	r2, r3, #3
 80052de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e0:	4413      	add	r3, r2
 80052e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	895b      	ldrh	r3, [r3, #10]
 80052fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6959      	ldr	r1, [r3, #20]
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005312:	b29b      	uxth	r3, r3
 8005314:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005318:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800531c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005320:	6800      	ldr	r0, [r0, #0]
 8005322:	f001 f84b 	bl	80063bc <USB_WritePMA>
 8005326:	e213      	b.n	8005750 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005390:	b29b      	uxth	r3, r3
 8005392:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b4:	4413      	add	r3, r2
 80053b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	00da      	lsls	r2, r3, #3
 80053c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c8:	4413      	add	r3, r2
 80053ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	891b      	ldrh	r3, [r3, #8]
 80053e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6959      	ldr	r1, [r3, #20]
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005400:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005404:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005408:	6800      	ldr	r0, [r0, #0]
 800540a:	f000 ffd7 	bl	80063bc <USB_WritePMA>
 800540e:	e19f      	b.n	8005750 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800542e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80bc 	beq.w	80055ce <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	673b      	str	r3, [r7, #112]	; 0x70
 8005462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d16d      	bne.n	800554e <USB_EPStartXfer+0xab4>
 8005472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	66bb      	str	r3, [r7, #104]	; 0x68
 800547e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548c:	b29b      	uxth	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005492:	4413      	add	r3, r2
 8005494:	66bb      	str	r3, [r7, #104]	; 0x68
 8005496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	00da      	lsls	r2, r3, #3
 80054a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054a6:	4413      	add	r3, r2
 80054a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054ac:	667b      	str	r3, [r7, #100]	; 0x64
 80054ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b2:	2b3e      	cmp	r3, #62	; 0x3e
 80054b4:	d91c      	bls.n	80054f0 <USB_EPStartXfer+0xa56>
 80054b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <USB_EPStartXfer+0xa3c>
 80054cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054d0:	3b01      	subs	r3, #1
 80054d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29b      	uxth	r3, r3
 80054e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	e053      	b.n	8005598 <USB_EPStartXfer+0xafe>
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d112      	bne.n	800551e <USB_EPStartXfer+0xa84>
 80054f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005502:	b29a      	uxth	r2, r3
 8005504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005516:	b29a      	uxth	r2, r3
 8005518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	e03c      	b.n	8005598 <USB_EPStartXfer+0xafe>
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <USB_EPStartXfer+0xaa4>
 8005534:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005538:	3301      	adds	r3, #1
 800553a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800553e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005542:	b29b      	uxth	r3, r3
 8005544:	029b      	lsls	r3, r3, #10
 8005546:	b29a      	uxth	r2, r3
 8005548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e024      	b.n	8005598 <USB_EPStartXfer+0xafe>
 800554e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d11c      	bne.n	8005598 <USB_EPStartXfer+0xafe>
 800555e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005572:	4413      	add	r3, r2
 8005574:	673b      	str	r3, [r7, #112]	; 0x70
 8005576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	00da      	lsls	r2, r3, #3
 8005584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005586:	4413      	add	r3, r2
 8005588:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800558c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800558e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005592:	b29a      	uxth	r2, r3
 8005594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005596:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	895b      	ldrh	r3, [r3, #10]
 80055a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6959      	ldr	r1, [r3, #20]
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	f000 fef8 	bl	80063bc <USB_WritePMA>
 80055cc:	e0c0      	b.n	8005750 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d16d      	bne.n	80056ba <USB_EPStartXfer+0xc20>
 80055de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055fe:	4413      	add	r3, r2
 8005600:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	00da      	lsls	r2, r3, #3
 8005610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005612:	4413      	add	r3, r2
 8005614:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005618:	67bb      	str	r3, [r7, #120]	; 0x78
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561e:	2b3e      	cmp	r3, #62	; 0x3e
 8005620:	d91c      	bls.n	800565c <USB_EPStartXfer+0xbc2>
 8005622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <USB_EPStartXfer+0xba8>
 8005638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800563c:	3b01      	subs	r3, #1
 800563e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005642:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005646:	b29b      	uxth	r3, r3
 8005648:	029b      	lsls	r3, r3, #10
 800564a:	b29b      	uxth	r3, r3
 800564c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005654:	b29a      	uxth	r2, r3
 8005656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	e05f      	b.n	800571c <USB_EPStartXfer+0xc82>
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005660:	2b00      	cmp	r3, #0
 8005662:	d112      	bne.n	800568a <USB_EPStartXfer+0xbf0>
 8005664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800566e:	b29a      	uxth	r2, r3
 8005670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005682:	b29a      	uxth	r2, r3
 8005684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	e048      	b.n	800571c <USB_EPStartXfer+0xc82>
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <USB_EPStartXfer+0xc10>
 80056a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056a4:	3301      	adds	r3, #1
 80056a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	029b      	lsls	r3, r3, #10
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	e030      	b.n	800571c <USB_EPStartXfer+0xc82>
 80056ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d128      	bne.n	800571c <USB_EPStartXfer+0xc82>
 80056ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056ee:	4413      	add	r3, r2
 80056f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	00da      	lsls	r2, r3, #3
 8005702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005706:	4413      	add	r3, r2
 8005708:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800570c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005714:	b29a      	uxth	r2, r3
 8005716:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800571a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800571c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	891b      	ldrh	r3, [r3, #8]
 8005728:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6959      	ldr	r1, [r3, #20]
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573c:	b29b      	uxth	r3, r3
 800573e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005742:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005746:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	f000 fe36 	bl	80063bc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005776:	817b      	strh	r3, [r7, #10]
 8005778:	897b      	ldrh	r3, [r7, #10]
 800577a:	f083 0310 	eor.w	r3, r3, #16
 800577e:	817b      	strh	r3, [r7, #10]
 8005780:	897b      	ldrh	r3, [r7, #10]
 8005782:	f083 0320 	eor.w	r3, r3, #32
 8005786:	817b      	strh	r3, [r7, #10]
 8005788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	897b      	ldrh	r3, [r7, #10]
 80057a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8013      	strh	r3, [r2, #0]
 80057b8:	f000 bc9f 	b.w	80060fa <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80057bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	7b1b      	ldrb	r3, [r3, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f040 80ae 	bne.w	800592a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d917      	bls.n	800581a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80057ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580a:	1ad2      	subs	r2, r2, r3
 800580c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	619a      	str	r2, [r3, #24]
 8005818:	e00e      	b.n	8005838 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800581a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800582a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2200      	movs	r2, #0
 8005836:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005854:	b29b      	uxth	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800585c:	4413      	add	r3, r2
 800585e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	00da      	lsls	r2, r3, #3
 8005870:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005874:	4413      	add	r3, r2
 8005876:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800587a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005882:	2b3e      	cmp	r3, #62	; 0x3e
 8005884:	d91d      	bls.n	80058c2 <USB_EPStartXfer+0xe28>
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <USB_EPStartXfer+0xe0c>
 800589c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058a0:	3b01      	subs	r3, #1
 80058a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	029b      	lsls	r3, r3, #10
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	e3e1      	b.n	8006086 <USB_EPStartXfer+0x15ec>
 80058c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d116      	bne.n	80058f8 <USB_EPStartXfer+0xe5e>
 80058ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058dc:	801a      	strh	r2, [r3, #0]
 80058de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e3c6      	b.n	8006086 <USB_EPStartXfer+0x15ec>
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <USB_EPStartXfer+0xe7e>
 800590e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005912:	3301      	adds	r3, #1
 8005914:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800591c:	b29b      	uxth	r3, r3
 800591e:	029b      	lsls	r3, r3, #10
 8005920:	b29a      	uxth	r2, r3
 8005922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e3ad      	b.n	8006086 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800592a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	78db      	ldrb	r3, [r3, #3]
 8005936:	2b02      	cmp	r3, #2
 8005938:	f040 8200 	bne.w	8005d3c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800593c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 8091 	bne.w	8005a70 <USB_EPStartXfer+0xfd6>
 800594e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800595c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005972:	4413      	add	r3, r2
 8005974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	00da      	lsls	r2, r3, #3
 8005986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800598a:	4413      	add	r3, r2
 800598c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b3e      	cmp	r3, #62	; 0x3e
 80059a2:	d925      	bls.n	80059f0 <USB_EPStartXfer+0xf56>
 80059a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <USB_EPStartXfer+0xf3a>
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ce:	3b01      	subs	r3, #1
 80059d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d8:	b29b      	uxth	r3, r3
 80059da:	029b      	lsls	r3, r3, #10
 80059dc:	b29b      	uxth	r3, r3
 80059de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	e074      	b.n	8005ada <USB_EPStartXfer+0x1040>
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d116      	bne.n	8005a2e <USB_EPStartXfer+0xf94>
 8005a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a2a:	801a      	strh	r2, [r3, #0]
 8005a2c:	e055      	b.n	8005ada <USB_EPStartXfer+0x1040>
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <USB_EPStartXfer+0xfc4>
 8005a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a58:	3301      	adds	r3, #1
 8005a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	029b      	lsls	r3, r3, #10
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e034      	b.n	8005ada <USB_EPStartXfer+0x1040>
 8005a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d12c      	bne.n	8005ada <USB_EPStartXfer+0x1040>
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	00da      	lsls	r2, r3, #3
 8005ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005abc:	4413      	add	r3, r2
 8005abe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f040 8091 	bne.w	8005c1c <USB_EPStartXfer+0x1182>
 8005afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b1e:	4413      	add	r3, r2
 8005b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	00da      	lsls	r2, r3, #3
 8005b32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b36:	4413      	add	r3, r2
 8005b38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b4e:	d925      	bls.n	8005b9c <USB_EPStartXfer+0x1102>
 8005b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d104      	bne.n	8005b80 <USB_EPStartXfer+0x10e6>
 8005b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	029b      	lsls	r3, r3, #10
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	e06d      	b.n	8005c78 <USB_EPStartXfer+0x11de>
 8005b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d116      	bne.n	8005bda <USB_EPStartXfer+0x1140>
 8005bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e04e      	b.n	8005c78 <USB_EPStartXfer+0x11de>
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <USB_EPStartXfer+0x1170>
 8005c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c04:	3301      	adds	r3, #1
 8005c06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	029b      	lsls	r3, r3, #10
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c18:	801a      	strh	r2, [r3, #0]
 8005c1a:	e02d      	b.n	8005c78 <USB_EPStartXfer+0x11de>
 8005c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d125      	bne.n	8005c78 <USB_EPStartXfer+0x11de>
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c42:	4413      	add	r3, r2
 8005c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	00da      	lsls	r2, r3, #3
 8005c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c76:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 81fe 	beq.w	8006086 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005caa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <USB_EPStartXfer+0x1228>
 8005cb6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10d      	bne.n	8005cde <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cc2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f040 81db 	bne.w	8006086 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cd0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f040 81d4 	bne.w	8006086 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	8013      	strh	r3, [r2, #0]
 8005d3a:	e1a4      	b.n	8006086 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	78db      	ldrb	r3, [r3, #3]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	f040 819a 	bne.w	8006082 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d917      	bls.n	8005d9a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8005d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8a:	1ad2      	subs	r2, r2, r3
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	619a      	str	r2, [r3, #24]
 8005d98:	e00e      	b.n	8005db8 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8005d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2200      	movs	r2, #0
 8005db6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d178      	bne.n	8005eba <USB_EPStartXfer+0x1420>
 8005dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dec:	4413      	add	r3, r2
 8005dee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	00da      	lsls	r2, r3, #3
 8005e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e04:	4413      	add	r3, r2
 8005e06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e12:	2b3e      	cmp	r3, #62	; 0x3e
 8005e14:	d91d      	bls.n	8005e52 <USB_EPStartXfer+0x13b8>
 8005e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <USB_EPStartXfer+0x139c>
 8005e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e30:	3b01      	subs	r3, #1
 8005e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	029b      	lsls	r3, r3, #10
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	e064      	b.n	8005f1c <USB_EPStartXfer+0x1482>
 8005e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d116      	bne.n	8005e88 <USB_EPStartXfer+0x13ee>
 8005e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e049      	b.n	8005f1c <USB_EPStartXfer+0x1482>
 8005e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <USB_EPStartXfer+0x140e>
 8005e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e030      	b.n	8005f1c <USB_EPStartXfer+0x1482>
 8005eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d128      	bne.n	8005f1c <USB_EPStartXfer+0x1482>
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005edc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eee:	4413      	add	r3, r2
 8005ef0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	00da      	lsls	r2, r3, #3
 8005f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f06:	4413      	add	r3, r2
 8005f08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d178      	bne.n	800602c <USB_EPStartXfer+0x1592>
 8005f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f5e:	4413      	add	r3, r2
 8005f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	00da      	lsls	r2, r3, #3
 8005f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f76:	4413      	add	r3, r2
 8005f78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f84:	2b3e      	cmp	r3, #62	; 0x3e
 8005f86:	d91d      	bls.n	8005fc4 <USB_EPStartXfer+0x152a>
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <USB_EPStartXfer+0x150e>
 8005f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	029b      	lsls	r3, r3, #10
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	e060      	b.n	8006086 <USB_EPStartXfer+0x15ec>
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d116      	bne.n	8005ffa <USB_EPStartXfer+0x1560>
 8005fcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	e045      	b.n	8006086 <USB_EPStartXfer+0x15ec>
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <USB_EPStartXfer+0x1580>
 8006010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006014:	3301      	adds	r3, #1
 8006016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800601a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800601e:	b29b      	uxth	r3, r3
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	b29a      	uxth	r2, r3
 8006024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006028:	801a      	strh	r2, [r3, #0]
 800602a:	e02c      	b.n	8006086 <USB_EPStartXfer+0x15ec>
 800602c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d124      	bne.n	8006086 <USB_EPStartXfer+0x15ec>
 800603c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604a:	b29b      	uxth	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006052:	4413      	add	r3, r2
 8006054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	00da      	lsls	r2, r3, #3
 8006066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800606a:	4413      	add	r3, r2
 800606c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006078:	b29a      	uxth	r2, r3
 800607a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	e001      	b.n	8006086 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e03a      	b.n	80060fc <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80060b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80060bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060c4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80060c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d020      	beq.n	800615a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800612e:	81bb      	strh	r3, [r7, #12]
 8006130:	89bb      	ldrh	r3, [r7, #12]
 8006132:	f083 0310 	eor.w	r3, r3, #16
 8006136:	81bb      	strh	r3, [r7, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	441a      	add	r2, r3
 8006142:	89bb      	ldrh	r3, [r7, #12]
 8006144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006154:	b29b      	uxth	r3, r3
 8006156:	8013      	strh	r3, [r2, #0]
 8006158:	e01f      	b.n	800619a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800616c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006170:	81fb      	strh	r3, [r7, #14]
 8006172:	89fb      	ldrh	r3, [r7, #14]
 8006174:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006178:	81fb      	strh	r3, [r7, #14]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	441a      	add	r2, r3
 8006184:	89fb      	ldrh	r3, [r7, #14]
 8006186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	7b1b      	ldrb	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 809d 	bne.w	80062f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d04c      	beq.n	800625e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	823b      	strh	r3, [r7, #16]
 80061d2:	8a3b      	ldrh	r3, [r7, #16]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <USB_EPClearStall+0x6c>
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	81fb      	strh	r3, [r7, #14]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	89fb      	ldrh	r3, [r7, #14]
 8006200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800620c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006210:	b29b      	uxth	r3, r3
 8006212:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	78db      	ldrb	r3, [r3, #3]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d06c      	beq.n	80062f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006232:	81bb      	strh	r3, [r7, #12]
 8006234:	89bb      	ldrh	r3, [r7, #12]
 8006236:	f083 0320 	eor.w	r3, r3, #32
 800623a:	81bb      	strh	r3, [r7, #12]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	89bb      	ldrh	r3, [r7, #12]
 8006248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006258:	b29b      	uxth	r3, r3
 800625a:	8013      	strh	r3, [r2, #0]
 800625c:	e04b      	b.n	80062f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	82fb      	strh	r3, [r7, #22]
 800626c:	8afb      	ldrh	r3, [r7, #22]
 800626e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01b      	beq.n	80062ae <USB_EPClearStall+0x106>
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628c:	82bb      	strh	r3, [r7, #20]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	441a      	add	r2, r3
 8006298:	8abb      	ldrh	r3, [r7, #20]
 800629a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c4:	827b      	strh	r3, [r7, #18]
 80062c6:	8a7b      	ldrh	r3, [r7, #18]
 80062c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062cc:	827b      	strh	r3, [r7, #18]
 80062ce:	8a7b      	ldrh	r3, [r7, #18]
 80062d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062d4:	827b      	strh	r3, [r7, #18]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	441a      	add	r2, r3
 80062e0:	8a7b      	ldrh	r3, [r7, #18]
 80062e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2280      	movs	r2, #128	; 0x80
 800631a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800633a:	b29b      	uxth	r3, r3
 800633c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006368:	b29b      	uxth	r3, r3
 800636a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006392:	b29b      	uxth	r3, r3
 8006394:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006396:	68fb      	ldr	r3, [r7, #12]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063bc:	b480      	push	{r7}
 80063be:	b08b      	sub	sp, #44	; 0x2c
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4611      	mov	r1, r2
 80063c8:	461a      	mov	r2, r3
 80063ca:	460b      	mov	r3, r1
 80063cc:	80fb      	strh	r3, [r7, #6]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80063d2:	88bb      	ldrh	r3, [r7, #4]
 80063d4:	3301      	adds	r3, #1
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063e2:	88fa      	ldrh	r2, [r7, #6]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
 80063f2:	e01b      	b.n	800642c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	3301      	adds	r3, #1
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	b21a      	sxth	r2, r3
 8006404:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006408:	4313      	orrs	r3, r2
 800640a:	b21b      	sxth	r3, r3
 800640c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	8a7a      	ldrh	r2, [r7, #18]
 8006412:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	3302      	adds	r3, #2
 8006418:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	3301      	adds	r3, #1
 800641e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	3301      	adds	r3, #1
 8006424:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	3b01      	subs	r3, #1
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e0      	bne.n	80063f4 <USB_WritePMA+0x38>
  }
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	372c      	adds	r7, #44	; 0x2c
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006440:	b480      	push	{r7}
 8006442:	b08b      	sub	sp, #44	; 0x2c
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	460b      	mov	r3, r1
 8006450:	80fb      	strh	r3, [r7, #6]
 8006452:	4613      	mov	r3, r2
 8006454:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006456:	88bb      	ldrh	r3, [r7, #4]
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	b29b      	uxth	r3, r3
 800645c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006466:	88fa      	ldrh	r2, [r7, #6]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006470:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
 8006476:	e018      	b.n	80064aa <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	3302      	adds	r3, #2
 8006484:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	b2da      	uxtb	r2, r3
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	3301      	adds	r3, #1
 8006492:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	b2da      	uxtb	r2, r3
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3301      	adds	r3, #1
 80064a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	3b01      	subs	r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e3      	bne.n	8006478 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80064b0:	88bb      	ldrh	r3, [r7, #4]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	701a      	strb	r2, [r3, #0]
  }
}
 80064cc:	bf00      	nop
 80064ce:	372c      	adds	r7, #44	; 0x2c
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064e8:	f002 f9cc 	bl	8008884 <USBD_static_malloc>
 80064ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d105      	bne.n	8006500 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80064fc:	2302      	movs	r3, #2
 80064fe:	e066      	b.n	80065ce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	7c1b      	ldrb	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d119      	bne.n	8006544 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006514:	2202      	movs	r2, #2
 8006516:	2181      	movs	r1, #129	; 0x81
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 ffb5 	bl	8008488 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006528:	2202      	movs	r2, #2
 800652a:	2101      	movs	r1, #1
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 ffab 	bl	8008488 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2210      	movs	r2, #16
 800653e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006542:	e016      	b.n	8006572 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006544:	2340      	movs	r3, #64	; 0x40
 8006546:	2202      	movs	r2, #2
 8006548:	2181      	movs	r1, #129	; 0x81
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 ff9c 	bl	8008488 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006556:	2340      	movs	r3, #64	; 0x40
 8006558:	2202      	movs	r2, #2
 800655a:	2101      	movs	r1, #1
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 ff93 	bl	8008488 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2210      	movs	r2, #16
 800656e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006572:	2308      	movs	r3, #8
 8006574:	2203      	movs	r2, #3
 8006576:	2182      	movs	r1, #130	; 0x82
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 ff85 	bl	8008488 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	7c1b      	ldrb	r3, [r3, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b2:	2101      	movs	r1, #1
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f002 f8e3 	bl	8008780 <USBD_LL_PrepareReceive>
 80065ba:	e007      	b.n	80065cc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	2101      	movs	r1, #1
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f002 f8da 	bl	8008780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80065e2:	2181      	movs	r1, #129	; 0x81
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 ff8d 	bl	8008504 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80065f0:	2101      	movs	r1, #1
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 ff86 	bl	8008504 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006600:	2182      	movs	r1, #130	; 0x82
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 ff7e 	bl	8008504 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00e      	beq.n	8006640 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006632:	4618      	mov	r0, r3
 8006634:	f002 f934 	bl	80088a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800665c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006670:	2303      	movs	r3, #3
 8006672:	e0af      	b.n	80067d4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800667c:	2b00      	cmp	r3, #0
 800667e:	d03f      	beq.n	8006700 <USBD_CDC_Setup+0xb4>
 8006680:	2b20      	cmp	r3, #32
 8006682:	f040 809f 	bne.w	80067c4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	88db      	ldrh	r3, [r3, #6]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d02e      	beq.n	80066ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	b25b      	sxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	da16      	bge.n	80066c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80066a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	88d2      	ldrh	r2, [r2, #6]
 80066aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	88db      	ldrh	r3, [r3, #6]
 80066b0:	2b07      	cmp	r3, #7
 80066b2:	bf28      	it	cs
 80066b4:	2307      	movcs	r3, #7
 80066b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	89fa      	ldrh	r2, [r7, #14]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 facf 	bl	8007c62 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80066c4:	e085      	b.n	80067d2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	785a      	ldrb	r2, [r3, #1]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	88db      	ldrh	r3, [r3, #6]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80066dc:	6939      	ldr	r1, [r7, #16]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	88db      	ldrh	r3, [r3, #6]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 fae8 	bl	8007cba <USBD_CtlPrepareRx>
      break;
 80066ea:	e072      	b.n	80067d2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	7850      	ldrb	r0, [r2, #1]
 80066f8:	2200      	movs	r2, #0
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	4798      	blx	r3
      break;
 80066fe:	e068      	b.n	80067d2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b0b      	cmp	r3, #11
 8006706:	d852      	bhi.n	80067ae <USBD_CDC_Setup+0x162>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <USBD_CDC_Setup+0xc4>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006741 	.word	0x08006741
 8006714:	080067bd 	.word	0x080067bd
 8006718:	080067af 	.word	0x080067af
 800671c:	080067af 	.word	0x080067af
 8006720:	080067af 	.word	0x080067af
 8006724:	080067af 	.word	0x080067af
 8006728:	080067af 	.word	0x080067af
 800672c:	080067af 	.word	0x080067af
 8006730:	080067af 	.word	0x080067af
 8006734:	080067af 	.word	0x080067af
 8006738:	0800676b 	.word	0x0800676b
 800673c:	08006795 	.word	0x08006795
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b03      	cmp	r3, #3
 800674a:	d107      	bne.n	800675c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800674c:	f107 030a 	add.w	r3, r7, #10
 8006750:	2202      	movs	r2, #2
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fa84 	bl	8007c62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800675a:	e032      	b.n	80067c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fa0e 	bl	8007b80 <USBD_CtlError>
            ret = USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	75fb      	strb	r3, [r7, #23]
          break;
 8006768:	e02b      	b.n	80067c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b03      	cmp	r3, #3
 8006774:	d107      	bne.n	8006786 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006776:	f107 030d 	add.w	r3, r7, #13
 800677a:	2201      	movs	r2, #1
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 fa6f 	bl	8007c62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006784:	e01d      	b.n	80067c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 f9f9 	bl	8007b80 <USBD_CtlError>
            ret = USBD_FAIL;
 800678e:	2303      	movs	r3, #3
 8006790:	75fb      	strb	r3, [r7, #23]
          break;
 8006792:	e016      	b.n	80067c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b03      	cmp	r3, #3
 800679e:	d00f      	beq.n	80067c0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 f9ec 	bl	8007b80 <USBD_CtlError>
            ret = USBD_FAIL;
 80067a8:	2303      	movs	r3, #3
 80067aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067ac:	e008      	b.n	80067c0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 f9e5 	bl	8007b80 <USBD_CtlError>
          ret = USBD_FAIL;
 80067b6:	2303      	movs	r3, #3
 80067b8:	75fb      	strb	r3, [r7, #23]
          break;
 80067ba:	e002      	b.n	80067c2 <USBD_CDC_Setup+0x176>
          break;
 80067bc:	bf00      	nop
 80067be:	e008      	b.n	80067d2 <USBD_CDC_Setup+0x186>
          break;
 80067c0:	bf00      	nop
      }
      break;
 80067c2:	e006      	b.n	80067d2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 f9da 	bl	8007b80 <USBD_CtlError>
      ret = USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	75fb      	strb	r3, [r7, #23]
      break;
 80067d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e04f      	b.n	800689e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006804:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	3318      	adds	r3, #24
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d029      	beq.n	8006870 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	3318      	adds	r3, #24
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	78f9      	ldrb	r1, [r7, #3]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	460b      	mov	r3, r1
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	4403      	add	r3, r0
 800683c:	333c      	adds	r3, #60	; 0x3c
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	fbb2 f1f3 	udiv	r1, r2, r3
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800684a:	2b00      	cmp	r3, #0
 800684c:	d110      	bne.n	8006870 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	3318      	adds	r3, #24
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006862:	78f9      	ldrb	r1, [r7, #3]
 8006864:	2300      	movs	r3, #0
 8006866:	2200      	movs	r2, #0
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 ff51 	bl	8008710 <USBD_LL_Transmit>
 800686e:	e015      	b.n	800689c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006898:	78fa      	ldrb	r2, [r7, #3]
 800689a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e015      	b.n	80068f4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 ff8f 	bl	80087f0 <USBD_LL_GetRxDataSize>
 80068d2:	4602      	mov	r2, r0
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068ee:	4611      	mov	r1, r2
 80068f0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800690a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006912:	2303      	movs	r3, #3
 8006914:	e01b      	b.n	800694e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d015      	beq.n	800694c <USBD_CDC_EP0_RxReady+0x50>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006926:	2bff      	cmp	r3, #255	; 0xff
 8006928:	d010      	beq.n	800694c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006938:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006940:	b292      	uxth	r2, r2
 8006942:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	22ff      	movs	r2, #255	; 0xff
 8006948:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2243      	movs	r2, #67	; 0x43
 8006964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006966:	4b03      	ldr	r3, [pc, #12]	; (8006974 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	20000094 	.word	0x20000094

08006978 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2243      	movs	r2, #67	; 0x43
 8006984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006986:	4b03      	ldr	r3, [pc, #12]	; (8006994 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20000050 	.word	0x20000050

08006998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2243      	movs	r2, #67	; 0x43
 80069a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80069a6:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	200000d8 	.word	0x200000d8

080069b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	220a      	movs	r2, #10
 80069c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80069c6:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	2000000c 	.word	0x2000000c

080069d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e004      	b.n	80069f6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b087      	sub	sp, #28
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a14:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e008      	b.n	8006a32 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e004      	b.n	8006a64 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a7e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e01a      	b.n	8006ac8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d114      	bne.n	8006ac6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006aba:	2181      	movs	r1, #129	; 0x81
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fe27 	bl	8008710 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ade:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e016      	b.n	8006b1c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	7c1b      	ldrb	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d109      	bne.n	8006b0a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b00:	2101      	movs	r1, #1
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fe3c 	bl	8008780 <USBD_LL_PrepareReceive>
 8006b08:	e007      	b.n	8006b1a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b10:	2340      	movs	r3, #64	; 0x40
 8006b12:	2101      	movs	r1, #1
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 fe33 	bl	8008780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e01f      	b.n	8006b7c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	79fa      	ldrb	r2, [r7, #7]
 8006b6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f001 fbf5 	bl	8008360 <USBD_LL_Init>
 8006b76:	4603      	mov	r3, r0
 8006b78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e016      	b.n	8006bca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	f107 020e 	add.w	r2, r7, #14
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4798      	blx	r3
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fc22 	bl	8008424 <USBD_LL_Start>
 8006be0:	4603      	mov	r3, r0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	78fa      	ldrb	r2, [r7, #3]
 8006c24:	4611      	mov	r1, r2
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
  }

  return USBD_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 ff46 	bl	8007b0c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d01a      	beq.n	8006cda <USBD_LL_SetupStage+0x72>
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d822      	bhi.n	8006cee <USBD_LL_SetupStage+0x86>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <USBD_LL_SetupStage+0x4a>
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d00a      	beq.n	8006cc6 <USBD_LL_SetupStage+0x5e>
 8006cb0:	e01d      	b.n	8006cee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f9ee 	bl	800709c <USBD_StdDevReq>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc4:	e020      	b.n	8006d08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa52 	bl	8007178 <USBD_StdItfReq>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd8:	e016      	b.n	8006d08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fa91 	bl	800720a <USBD_StdEPReq>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]
      break;
 8006cec:	e00c      	b.n	8006d08 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fc37 	bl	8008570 <USBD_LL_StallEP>
 8006d02:	4603      	mov	r3, r0
 8006d04:	73fb      	strb	r3, [r7, #15]
      break;
 8006d06:	bf00      	nop
  }

  return ret;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	607a      	str	r2, [r7, #4]
 8006d1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d20:	7afb      	ldrb	r3, [r7, #11]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d138      	bne.n	8006d98 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d14a      	bne.n	8006dce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d913      	bls.n	8006d6c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	1ad2      	subs	r2, r2, r3
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	bf28      	it	cs
 8006d5e:	4613      	movcs	r3, r2
 8006d60:	461a      	mov	r2, r3
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 ffc5 	bl	8007cf4 <USBD_CtlContinueRx>
 8006d6a:	e030      	b.n	8006dce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d10b      	bne.n	8006d90 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 ffc0 	bl	8007d16 <USBD_CtlSendStatus>
 8006d96:	e01a      	b.n	8006dce <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d114      	bne.n	8006dce <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00e      	beq.n	8006dce <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	7afa      	ldrb	r2, [r7, #11]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	4798      	blx	r3
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	e000      	b.n	8006dd0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	460b      	mov	r3, r1
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006de6:	7afb      	ldrb	r3, [r7, #11]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d16b      	bne.n	8006ec4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3314      	adds	r3, #20
 8006df0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d156      	bne.n	8006eaa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d914      	bls.n	8006e32 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 ff3a 	bl	8007c98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e24:	2300      	movs	r3, #0
 8006e26:	2200      	movs	r2, #0
 8006e28:	2100      	movs	r1, #0
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f001 fca8 	bl	8008780 <USBD_LL_PrepareReceive>
 8006e30:	e03b      	b.n	8006eaa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d11c      	bne.n	8006e78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d316      	bcc.n	8006e78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d20f      	bcs.n	8006e78 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 ff1b 	bl	8007c98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2100      	movs	r1, #0
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f001 fc85 	bl	8008780 <USBD_LL_PrepareReceive>
 8006e76:	e018      	b.n	8006eaa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d10b      	bne.n	8006e9c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e9c:	2180      	movs	r1, #128	; 0x80
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f001 fb66 	bl	8008570 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 ff49 	bl	8007d3c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d122      	bne.n	8006efa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff fe98 	bl	8006bea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ec2:	e01a      	b.n	8006efa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d114      	bne.n	8006efa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00e      	beq.n	8006efa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	7afa      	ldrb	r2, [r7, #11]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	4798      	blx	r3
 8006eec:	4603      	mov	r3, r0
 8006eee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	e000      	b.n	8006efc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e02f      	b.n	8006f98 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00f      	beq.n	8006f62 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d009      	beq.n	8006f62 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6852      	ldr	r2, [r2, #4]
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	2200      	movs	r2, #0
 8006f66:	2100      	movs	r1, #0
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fa8d 	bl	8008488 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2240      	movs	r2, #64	; 0x40
 8006f7a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f7e:	2340      	movs	r3, #64	; 0x40
 8006f80:	2200      	movs	r2, #0
 8006f82:	2180      	movs	r1, #128	; 0x80
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fa7f 	bl	8008488 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2240      	movs	r2, #64	; 0x40
 8006f94:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d106      	bne.n	800700e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007006:	b2da      	uxtb	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800702e:	2303      	movs	r3, #3
 8007030:	e012      	b.n	8007058 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b03      	cmp	r3, #3
 800703c:	d10b      	bne.n	8007056 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	3301      	adds	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800707e:	8a3b      	ldrh	r3, [r7, #16]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	b21a      	sxth	r2, r3
 8007084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007088:	4313      	orrs	r3, r2
 800708a:	b21b      	sxth	r3, r3
 800708c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800708e:	89fb      	ldrh	r3, [r7, #14]
}
 8007090:	4618      	mov	r0, r3
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d005      	beq.n	80070c2 <USBD_StdDevReq+0x26>
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d853      	bhi.n	8007162 <USBD_StdDevReq+0xc6>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <USBD_StdDevReq+0x3a>
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d14f      	bne.n	8007162 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
 80070d0:	4603      	mov	r3, r0
 80070d2:	73fb      	strb	r3, [r7, #15]
      break;
 80070d4:	e04a      	b.n	800716c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	2b09      	cmp	r3, #9
 80070dc:	d83b      	bhi.n	8007156 <USBD_StdDevReq+0xba>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <USBD_StdDevReq+0x48>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	08007139 	.word	0x08007139
 80070e8:	0800714d 	.word	0x0800714d
 80070ec:	08007157 	.word	0x08007157
 80070f0:	08007143 	.word	0x08007143
 80070f4:	08007157 	.word	0x08007157
 80070f8:	08007117 	.word	0x08007117
 80070fc:	0800710d 	.word	0x0800710d
 8007100:	08007157 	.word	0x08007157
 8007104:	0800712f 	.word	0x0800712f
 8007108:	08007121 	.word	0x08007121
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9de 	bl	80074d0 <USBD_GetDescriptor>
          break;
 8007114:	e024      	b.n	8007160 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fb6d 	bl	80077f8 <USBD_SetAddress>
          break;
 800711e:	e01f      	b.n	8007160 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fbac 	bl	8007880 <USBD_SetConfig>
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]
          break;
 800712c:	e018      	b.n	8007160 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc4b 	bl	80079cc <USBD_GetConfig>
          break;
 8007136:	e013      	b.n	8007160 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fc7c 	bl	8007a38 <USBD_GetStatus>
          break;
 8007140:	e00e      	b.n	8007160 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fcab 	bl	8007aa0 <USBD_SetFeature>
          break;
 800714a:	e009      	b.n	8007160 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fcba 	bl	8007ac8 <USBD_ClrFeature>
          break;
 8007154:	e004      	b.n	8007160 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fd11 	bl	8007b80 <USBD_CtlError>
          break;
 800715e:	bf00      	nop
      }
      break;
 8007160:	e004      	b.n	800716c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fd0b 	bl	8007b80 <USBD_CtlError>
      break;
 800716a:	bf00      	nop
  }

  return ret;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop

08007178 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800718e:	2b40      	cmp	r3, #64	; 0x40
 8007190:	d005      	beq.n	800719e <USBD_StdItfReq+0x26>
 8007192:	2b40      	cmp	r3, #64	; 0x40
 8007194:	d82f      	bhi.n	80071f6 <USBD_StdItfReq+0x7e>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <USBD_StdItfReq+0x26>
 800719a:	2b20      	cmp	r3, #32
 800719c:	d12b      	bne.n	80071f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d81d      	bhi.n	80071e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	889b      	ldrh	r3, [r3, #4]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d813      	bhi.n	80071de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	88db      	ldrh	r3, [r3, #6]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d110      	bne.n	80071f2 <USBD_StdItfReq+0x7a>
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10d      	bne.n	80071f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fd9d 	bl	8007d16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071dc:	e009      	b.n	80071f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fccd 	bl	8007b80 <USBD_CtlError>
          break;
 80071e6:	e004      	b.n	80071f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fcc8 	bl	8007b80 <USBD_CtlError>
          break;
 80071f0:	e000      	b.n	80071f4 <USBD_StdItfReq+0x7c>
          break;
 80071f2:	bf00      	nop
      }
      break;
 80071f4:	e004      	b.n	8007200 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fcc1 	bl	8007b80 <USBD_CtlError>
      break;
 80071fe:	bf00      	nop
  }

  return ret;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	889b      	ldrh	r3, [r3, #4]
 800721c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d007      	beq.n	800723a <USBD_StdEPReq+0x30>
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	f200 8145 	bhi.w	80074ba <USBD_StdEPReq+0x2b0>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00c      	beq.n	800724e <USBD_StdEPReq+0x44>
 8007234:	2b20      	cmp	r3, #32
 8007236:	f040 8140 	bne.w	80074ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
      break;
 800724c:	e13a      	b.n	80074c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b03      	cmp	r3, #3
 8007254:	d007      	beq.n	8007266 <USBD_StdEPReq+0x5c>
 8007256:	2b03      	cmp	r3, #3
 8007258:	f300 8129 	bgt.w	80074ae <USBD_StdEPReq+0x2a4>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d07f      	beq.n	8007360 <USBD_StdEPReq+0x156>
 8007260:	2b01      	cmp	r3, #1
 8007262:	d03c      	beq.n	80072de <USBD_StdEPReq+0xd4>
 8007264:	e123      	b.n	80074ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d002      	beq.n	8007278 <USBD_StdEPReq+0x6e>
 8007272:	2b03      	cmp	r3, #3
 8007274:	d016      	beq.n	80072a4 <USBD_StdEPReq+0x9a>
 8007276:	e02c      	b.n	80072d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <USBD_StdEPReq+0x90>
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d00a      	beq.n	800729a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f971 	bl	8008570 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800728e:	2180      	movs	r1, #128	; 0x80
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f96d 	bl	8008570 <USBD_LL_StallEP>
 8007296:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007298:	e020      	b.n	80072dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fc6f 	bl	8007b80 <USBD_CtlError>
              break;
 80072a2:	e01b      	b.n	80072dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	885b      	ldrh	r3, [r3, #2]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10e      	bne.n	80072ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <USBD_StdEPReq+0xc0>
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b80      	cmp	r3, #128	; 0x80
 80072b6:	d008      	beq.n	80072ca <USBD_StdEPReq+0xc0>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	88db      	ldrh	r3, [r3, #6]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f953 	bl	8008570 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fd23 	bl	8007d16 <USBD_CtlSendStatus>

              break;
 80072d0:	e004      	b.n	80072dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fc53 	bl	8007b80 <USBD_CtlError>
              break;
 80072da:	bf00      	nop
          }
          break;
 80072dc:	e0ec      	b.n	80074b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d002      	beq.n	80072f0 <USBD_StdEPReq+0xe6>
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d016      	beq.n	800731c <USBD_StdEPReq+0x112>
 80072ee:	e030      	b.n	8007352 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <USBD_StdEPReq+0x108>
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b80      	cmp	r3, #128	; 0x80
 80072fa:	d00a      	beq.n	8007312 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f935 	bl	8008570 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007306:	2180      	movs	r1, #128	; 0x80
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f931 	bl	8008570 <USBD_LL_StallEP>
 800730e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007310:	e025      	b.n	800735e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fc33 	bl	8007b80 <USBD_CtlError>
              break;
 800731a:	e020      	b.n	800735e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	885b      	ldrh	r3, [r3, #2]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d11b      	bne.n	800735c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 f952 	bl	80085dc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fcec 	bl	8007d16 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007350:	e004      	b.n	800735c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fc13 	bl	8007b80 <USBD_CtlError>
              break;
 800735a:	e000      	b.n	800735e <USBD_StdEPReq+0x154>
              break;
 800735c:	bf00      	nop
          }
          break;
 800735e:	e0ab      	b.n	80074b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d002      	beq.n	8007372 <USBD_StdEPReq+0x168>
 800736c:	2b03      	cmp	r3, #3
 800736e:	d032      	beq.n	80073d6 <USBD_StdEPReq+0x1cc>
 8007370:	e097      	b.n	80074a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d007      	beq.n	8007388 <USBD_StdEPReq+0x17e>
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	2b80      	cmp	r3, #128	; 0x80
 800737c:	d004      	beq.n	8007388 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fbfd 	bl	8007b80 <USBD_CtlError>
                break;
 8007386:	e091      	b.n	80074ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800738c:	2b00      	cmp	r3, #0
 800738e:	da0b      	bge.n	80073a8 <USBD_StdEPReq+0x19e>
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	3310      	adds	r3, #16
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	4413      	add	r3, r2
 80073a4:	3304      	adds	r3, #4
 80073a6:	e00b      	b.n	80073c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	3304      	adds	r3, #4
 80073c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2202      	movs	r2, #2
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fc47 	bl	8007c62 <USBD_CtlSendData>
              break;
 80073d4:	e06a      	b.n	80074ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da11      	bge.n	8007402 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	f003 020f 	and.w	r2, r3, #15
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	3324      	adds	r3, #36	; 0x24
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d117      	bne.n	8007428 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fbc0 	bl	8007b80 <USBD_CtlError>
                  break;
 8007400:	e054      	b.n	80074ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007402:	7bbb      	ldrb	r3, [r7, #14]
 8007404:	f003 020f 	and.w	r2, r3, #15
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d104      	bne.n	8007428 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fbad 	bl	8007b80 <USBD_CtlError>
                  break;
 8007426:	e041      	b.n	80074ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800742c:	2b00      	cmp	r3, #0
 800742e:	da0b      	bge.n	8007448 <USBD_StdEPReq+0x23e>
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	3310      	adds	r3, #16
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	3304      	adds	r3, #4
 8007446:	e00b      	b.n	8007460 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	3304      	adds	r3, #4
 8007460:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <USBD_StdEPReq+0x264>
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	2b80      	cmp	r3, #128	; 0x80
 800746c:	d103      	bne.n	8007476 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	e00e      	b.n	8007494 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 f8e4 	bl	8008648 <USBD_LL_IsStallEP>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2201      	movs	r2, #1
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	e002      	b.n	8007494 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2202      	movs	r2, #2
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fbe1 	bl	8007c62 <USBD_CtlSendData>
              break;
 80074a0:	e004      	b.n	80074ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fb6b 	bl	8007b80 <USBD_CtlError>
              break;
 80074aa:	bf00      	nop
          }
          break;
 80074ac:	e004      	b.n	80074b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fb65 	bl	8007b80 <USBD_CtlError>
          break;
 80074b6:	bf00      	nop
      }
      break;
 80074b8:	e004      	b.n	80074c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fb5f 	bl	8007b80 <USBD_CtlError>
      break;
 80074c2:	bf00      	nop
  }

  return ret;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	885b      	ldrh	r3, [r3, #2]
 80074ea:	0a1b      	lsrs	r3, r3, #8
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3b01      	subs	r3, #1
 80074f0:	2b0e      	cmp	r3, #14
 80074f2:	f200 8152 	bhi.w	800779a <USBD_GetDescriptor+0x2ca>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <USBD_GetDescriptor+0x2c>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	0800756d 	.word	0x0800756d
 8007500:	08007585 	.word	0x08007585
 8007504:	080075c5 	.word	0x080075c5
 8007508:	0800779b 	.word	0x0800779b
 800750c:	0800779b 	.word	0x0800779b
 8007510:	0800773b 	.word	0x0800773b
 8007514:	08007767 	.word	0x08007767
 8007518:	0800779b 	.word	0x0800779b
 800751c:	0800779b 	.word	0x0800779b
 8007520:	0800779b 	.word	0x0800779b
 8007524:	0800779b 	.word	0x0800779b
 8007528:	0800779b 	.word	0x0800779b
 800752c:	0800779b 	.word	0x0800779b
 8007530:	0800779b 	.word	0x0800779b
 8007534:	08007539 	.word	0x08007539
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	7c12      	ldrb	r2, [r2, #16]
 8007550:	f107 0108 	add.w	r1, r7, #8
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800755a:	e126      	b.n	80077aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fb0e 	bl	8007b80 <USBD_CtlError>
        err++;
 8007564:	7afb      	ldrb	r3, [r7, #11]
 8007566:	3301      	adds	r3, #1
 8007568:	72fb      	strb	r3, [r7, #11]
      break;
 800756a:	e11e      	b.n	80077aa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	7c12      	ldrb	r2, [r2, #16]
 8007578:	f107 0108 	add.w	r1, r7, #8
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	60f8      	str	r0, [r7, #12]
      break;
 8007582:	e112      	b.n	80077aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	7c1b      	ldrb	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10d      	bne.n	80075a8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	f107 0208 	add.w	r2, r7, #8
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3301      	adds	r3, #1
 80075a2:	2202      	movs	r2, #2
 80075a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075a6:	e100      	b.n	80077aa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	f107 0208 	add.w	r2, r7, #8
 80075b4:	4610      	mov	r0, r2
 80075b6:	4798      	blx	r3
 80075b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	2202      	movs	r2, #2
 80075c0:	701a      	strb	r2, [r3, #0]
      break;
 80075c2:	e0f2      	b.n	80077aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	885b      	ldrh	r3, [r3, #2]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	f200 80ac 	bhi.w	8007728 <USBD_GetDescriptor+0x258>
 80075d0:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <USBD_GetDescriptor+0x108>)
 80075d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d6:	bf00      	nop
 80075d8:	080075f1 	.word	0x080075f1
 80075dc:	08007625 	.word	0x08007625
 80075e0:	08007659 	.word	0x08007659
 80075e4:	0800768d 	.word	0x0800768d
 80075e8:	080076c1 	.word	0x080076c1
 80075ec:	080076f5 	.word	0x080076f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	7c12      	ldrb	r2, [r2, #16]
 8007608:	f107 0108 	add.w	r1, r7, #8
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
 8007610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007612:	e091      	b.n	8007738 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fab2 	bl	8007b80 <USBD_CtlError>
            err++;
 800761c:	7afb      	ldrb	r3, [r7, #11]
 800761e:	3301      	adds	r3, #1
 8007620:	72fb      	strb	r3, [r7, #11]
          break;
 8007622:	e089      	b.n	8007738 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7c12      	ldrb	r2, [r2, #16]
 800763c:	f107 0108 	add.w	r1, r7, #8
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007646:	e077      	b.n	8007738 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fa98 	bl	8007b80 <USBD_CtlError>
            err++;
 8007650:	7afb      	ldrb	r3, [r7, #11]
 8007652:	3301      	adds	r3, #1
 8007654:	72fb      	strb	r3, [r7, #11]
          break;
 8007656:	e06f      	b.n	8007738 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	7c12      	ldrb	r2, [r2, #16]
 8007670:	f107 0108 	add.w	r1, r7, #8
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800767a:	e05d      	b.n	8007738 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa7e 	bl	8007b80 <USBD_CtlError>
            err++;
 8007684:	7afb      	ldrb	r3, [r7, #11]
 8007686:	3301      	adds	r3, #1
 8007688:	72fb      	strb	r3, [r7, #11]
          break;
 800768a:	e055      	b.n	8007738 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00b      	beq.n	80076b0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	7c12      	ldrb	r2, [r2, #16]
 80076a4:	f107 0108 	add.w	r1, r7, #8
 80076a8:	4610      	mov	r0, r2
 80076aa:	4798      	blx	r3
 80076ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ae:	e043      	b.n	8007738 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa64 	bl	8007b80 <USBD_CtlError>
            err++;
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	3301      	adds	r3, #1
 80076bc:	72fb      	strb	r3, [r7, #11]
          break;
 80076be:	e03b      	b.n	8007738 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	7c12      	ldrb	r2, [r2, #16]
 80076d8:	f107 0108 	add.w	r1, r7, #8
 80076dc:	4610      	mov	r0, r2
 80076de:	4798      	blx	r3
 80076e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e2:	e029      	b.n	8007738 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa4a 	bl	8007b80 <USBD_CtlError>
            err++;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	3301      	adds	r3, #1
 80076f0:	72fb      	strb	r3, [r7, #11]
          break;
 80076f2:	e021      	b.n	8007738 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	7c12      	ldrb	r2, [r2, #16]
 800770c:	f107 0108 	add.w	r1, r7, #8
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
 8007714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007716:	e00f      	b.n	8007738 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa30 	bl	8007b80 <USBD_CtlError>
            err++;
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	3301      	adds	r3, #1
 8007724:	72fb      	strb	r3, [r7, #11]
          break;
 8007726:	e007      	b.n	8007738 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa28 	bl	8007b80 <USBD_CtlError>
          err++;
 8007730:	7afb      	ldrb	r3, [r7, #11]
 8007732:	3301      	adds	r3, #1
 8007734:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007736:	bf00      	nop
      }
      break;
 8007738:	e037      	b.n	80077aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7c1b      	ldrb	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d109      	bne.n	8007756 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774a:	f107 0208 	add.w	r2, r7, #8
 800774e:	4610      	mov	r0, r2
 8007750:	4798      	blx	r3
 8007752:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007754:	e029      	b.n	80077aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa11 	bl	8007b80 <USBD_CtlError>
        err++;
 800775e:	7afb      	ldrb	r3, [r7, #11]
 8007760:	3301      	adds	r3, #1
 8007762:	72fb      	strb	r3, [r7, #11]
      break;
 8007764:	e021      	b.n	80077aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7c1b      	ldrb	r3, [r3, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10d      	bne.n	800778a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	f107 0208 	add.w	r2, r7, #8
 800777a:	4610      	mov	r0, r2
 800777c:	4798      	blx	r3
 800777e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3301      	adds	r3, #1
 8007784:	2207      	movs	r2, #7
 8007786:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007788:	e00f      	b.n	80077aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f9f7 	bl	8007b80 <USBD_CtlError>
        err++;
 8007792:	7afb      	ldrb	r3, [r7, #11]
 8007794:	3301      	adds	r3, #1
 8007796:	72fb      	strb	r3, [r7, #11]
      break;
 8007798:	e007      	b.n	80077aa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f9ef 	bl	8007b80 <USBD_CtlError>
      err++;
 80077a2:	7afb      	ldrb	r3, [r7, #11]
 80077a4:	3301      	adds	r3, #1
 80077a6:	72fb      	strb	r3, [r7, #11]
      break;
 80077a8:	bf00      	nop
  }

  if (err != 0U)
 80077aa:	7afb      	ldrb	r3, [r7, #11]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d11e      	bne.n	80077ee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	88db      	ldrh	r3, [r3, #6]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d016      	beq.n	80077e6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80077b8:	893b      	ldrh	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	88da      	ldrh	r2, [r3, #6]
 80077c2:	893b      	ldrh	r3, [r7, #8]
 80077c4:	4293      	cmp	r3, r2
 80077c6:	bf28      	it	cs
 80077c8:	4613      	movcs	r3, r2
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077ce:	893b      	ldrh	r3, [r7, #8]
 80077d0:	461a      	mov	r2, r3
 80077d2:	68f9      	ldr	r1, [r7, #12]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fa44 	bl	8007c62 <USBD_CtlSendData>
 80077da:	e009      	b.n	80077f0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9ce 	bl	8007b80 <USBD_CtlError>
 80077e4:	e004      	b.n	80077f0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa95 	bl	8007d16 <USBD_CtlSendStatus>
 80077ec:	e000      	b.n	80077f0 <USBD_GetDescriptor+0x320>
    return;
 80077ee:	bf00      	nop
  }
}
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop

080077f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	889b      	ldrh	r3, [r3, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d131      	bne.n	800786e <USBD_SetAddress+0x76>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	88db      	ldrh	r3, [r3, #6]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d12d      	bne.n	800786e <USBD_SetAddress+0x76>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	2b7f      	cmp	r3, #127	; 0x7f
 8007818:	d829      	bhi.n	800786e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	885b      	ldrh	r3, [r3, #2]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007824:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b03      	cmp	r3, #3
 8007830:	d104      	bne.n	800783c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f9a3 	bl	8007b80 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800783a:	e01d      	b.n	8007878 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7bfa      	ldrb	r2, [r7, #15]
 8007840:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 ff2b 	bl	80086a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa61 	bl	8007d16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d004      	beq.n	8007864 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2202      	movs	r2, #2
 800785e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007862:	e009      	b.n	8007878 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786c:	e004      	b.n	8007878 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f985 	bl	8007b80 <USBD_CtlError>
  }
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	885b      	ldrh	r3, [r3, #2]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	4b4c      	ldr	r3, [pc, #304]	; (80079c8 <USBD_SetConfig+0x148>)
 8007896:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007898:	4b4b      	ldr	r3, [pc, #300]	; (80079c8 <USBD_SetConfig+0x148>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d905      	bls.n	80078ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f96c 	bl	8007b80 <USBD_CtlError>
    return USBD_FAIL;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e088      	b.n	80079be <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d002      	beq.n	80078be <USBD_SetConfig+0x3e>
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d025      	beq.n	8007908 <USBD_SetConfig+0x88>
 80078bc:	e071      	b.n	80079a2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80078be:	4b42      	ldr	r3, [pc, #264]	; (80079c8 <USBD_SetConfig+0x148>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01c      	beq.n	8007900 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80078c6:	4b40      	ldr	r3, [pc, #256]	; (80079c8 <USBD_SetConfig+0x148>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078d0:	4b3d      	ldr	r3, [pc, #244]	; (80079c8 <USBD_SetConfig+0x148>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff f992 	bl	8006c00 <USBD_SetClassConfig>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d004      	beq.n	80078f0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f949 	bl	8007b80 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078ee:	e065      	b.n	80079bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fa10 	bl	8007d16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2203      	movs	r2, #3
 80078fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078fe:	e05d      	b.n	80079bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fa08 	bl	8007d16 <USBD_CtlSendStatus>
      break;
 8007906:	e059      	b.n	80079bc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007908:	4b2f      	ldr	r3, [pc, #188]	; (80079c8 <USBD_SetConfig+0x148>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d112      	bne.n	8007936 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007918:	4b2b      	ldr	r3, [pc, #172]	; (80079c8 <USBD_SetConfig+0x148>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	461a      	mov	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007922:	4b29      	ldr	r3, [pc, #164]	; (80079c8 <USBD_SetConfig+0x148>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff f985 	bl	8006c38 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f9f1 	bl	8007d16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007934:	e042      	b.n	80079bc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007936:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <USBD_SetConfig+0x148>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d02a      	beq.n	800799a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff f973 	bl	8006c38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007952:	4b1d      	ldr	r3, [pc, #116]	; (80079c8 <USBD_SetConfig+0x148>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800795c:	4b1a      	ldr	r3, [pc, #104]	; (80079c8 <USBD_SetConfig+0x148>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff f94c 	bl	8006c00 <USBD_SetClassConfig>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00f      	beq.n	8007992 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f903 	bl	8007b80 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff f958 	bl	8006c38 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007990:	e014      	b.n	80079bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f9bf 	bl	8007d16 <USBD_CtlSendStatus>
      break;
 8007998:	e010      	b.n	80079bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f9bb 	bl	8007d16 <USBD_CtlSendStatus>
      break;
 80079a0:	e00c      	b.n	80079bc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f8eb 	bl	8007b80 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079aa:	4b07      	ldr	r3, [pc, #28]	; (80079c8 <USBD_SetConfig+0x148>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff f941 	bl	8006c38 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80079b6:	2303      	movs	r3, #3
 80079b8:	73fb      	strb	r3, [r7, #15]
      break;
 80079ba:	bf00      	nop
  }

  return ret;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200001b0 	.word	0x200001b0

080079cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	88db      	ldrh	r3, [r3, #6]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d004      	beq.n	80079e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f8cd 	bl	8007b80 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079e6:	e023      	b.n	8007a30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	dc02      	bgt.n	80079fa <USBD_GetConfig+0x2e>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dc03      	bgt.n	8007a00 <USBD_GetConfig+0x34>
 80079f8:	e015      	b.n	8007a26 <USBD_GetConfig+0x5a>
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d00b      	beq.n	8007a16 <USBD_GetConfig+0x4a>
 80079fe:	e012      	b.n	8007a26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3308      	adds	r3, #8
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f927 	bl	8007c62 <USBD_CtlSendData>
        break;
 8007a14:	e00c      	b.n	8007a30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f91f 	bl	8007c62 <USBD_CtlSendData>
        break;
 8007a24:	e004      	b.n	8007a30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f8a9 	bl	8007b80 <USBD_CtlError>
        break;
 8007a2e:	bf00      	nop
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d81e      	bhi.n	8007a8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	88db      	ldrh	r3, [r3, #6]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d004      	beq.n	8007a62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f890 	bl	8007b80 <USBD_CtlError>
        break;
 8007a60:	e01a      	b.n	8007a98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f043 0202 	orr.w	r2, r3, #2
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	330c      	adds	r3, #12
 8007a82:	2202      	movs	r2, #2
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8eb 	bl	8007c62 <USBD_CtlSendData>
      break;
 8007a8c:	e004      	b.n	8007a98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f875 	bl	8007b80 <USBD_CtlError>
      break;
 8007a96:	bf00      	nop
  }
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d106      	bne.n	8007ac0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f92b 	bl	8007d16 <USBD_CtlSendStatus>
  }
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d80b      	bhi.n	8007af8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	885b      	ldrh	r3, [r3, #2]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d10c      	bne.n	8007b02 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f910 	bl	8007d16 <USBD_CtlSendStatus>
      }
      break;
 8007af6:	e004      	b.n	8007b02 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f840 	bl	8007b80 <USBD_CtlError>
      break;
 8007b00:	e000      	b.n	8007b04 <USBD_ClrFeature+0x3c>
      break;
 8007b02:	bf00      	nop
  }
}
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	781a      	ldrb	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	781a      	ldrb	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3301      	adds	r3, #1
 8007b34:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7ff fa92 	bl	8007060 <SWAPBYTE>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7ff fa85 	bl	8007060 <SWAPBYTE>
 8007b56:	4603      	mov	r3, r0
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3301      	adds	r3, #1
 8007b62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3301      	adds	r3, #1
 8007b68:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f7ff fa78 	bl	8007060 <SWAPBYTE>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	80da      	strh	r2, [r3, #6]
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b8a:	2180      	movs	r1, #128	; 0x80
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fcef 	bl	8008570 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b92:	2100      	movs	r1, #0
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fceb 	bl	8008570 <USBD_LL_StallEP>
}
 8007b9a:	bf00      	nop
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b086      	sub	sp, #24
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d036      	beq.n	8007c26 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007bbc:	6938      	ldr	r0, [r7, #16]
 8007bbe:	f000 f836 	bl	8007c2e <USBD_GetLen>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	3301      	adds	r3, #1
 8007be0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	4413      	add	r3, r2
 8007be8:	2203      	movs	r2, #3
 8007bea:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bf2:	e013      	b.n	8007c1c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	3301      	adds	r3, #1
 8007c04:	613b      	str	r3, [r7, #16]
    idx++;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	4413      	add	r3, r2
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e7      	bne.n	8007bf4 <USBD_GetString+0x52>
 8007c24:	e000      	b.n	8007c28 <USBD_GetString+0x86>
    return;
 8007c26:	bf00      	nop
  }
}
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c3e:	e005      	b.n	8007c4c <USBD_GetLen+0x1e>
  {
    len++;
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	3301      	adds	r3, #1
 8007c44:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1f5      	bne.n	8007c40 <USBD_GetLen+0x12>
  }

  return len;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2202      	movs	r2, #2
 8007c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	2100      	movs	r1, #0
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 fd41 	bl	8008710 <USBD_LL_Transmit>

  return USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fd30 	bl	8008710 <USBD_LL_Transmit>

  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fd4b 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	2100      	movs	r1, #0
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fd3a 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2204      	movs	r2, #4
 8007d22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d26:	2300      	movs	r3, #0
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fcef 	bl	8008710 <USBD_LL_Transmit>

  return USBD_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2205      	movs	r2, #5
 8007d48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2100      	movs	r1, #0
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fd14 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4912      	ldr	r1, [pc, #72]	; (8007db4 <MX_USB_DEVICE_Init+0x50>)
 8007d6c:	4812      	ldr	r0, [pc, #72]	; (8007db8 <MX_USB_DEVICE_Init+0x54>)
 8007d6e:	f7fe fed9 	bl	8006b24 <USBD_Init>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d78:	f7f8 fbb6 	bl	80004e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d7c:	490f      	ldr	r1, [pc, #60]	; (8007dbc <MX_USB_DEVICE_Init+0x58>)
 8007d7e:	480e      	ldr	r0, [pc, #56]	; (8007db8 <MX_USB_DEVICE_Init+0x54>)
 8007d80:	f7fe ff00 	bl	8006b84 <USBD_RegisterClass>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d8a:	f7f8 fbad 	bl	80004e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d8e:	490c      	ldr	r1, [pc, #48]	; (8007dc0 <MX_USB_DEVICE_Init+0x5c>)
 8007d90:	4809      	ldr	r0, [pc, #36]	; (8007db8 <MX_USB_DEVICE_Init+0x54>)
 8007d92:	f7fe fe21 	bl	80069d8 <USBD_CDC_RegisterInterface>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d9c:	f7f8 fba4 	bl	80004e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007da0:	4805      	ldr	r0, [pc, #20]	; (8007db8 <MX_USB_DEVICE_Init+0x54>)
 8007da2:	f7fe ff16 	bl	8006bd2 <USBD_Start>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007dac:	f7f8 fb9c 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007db0:	bf00      	nop
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000130 	.word	0x20000130
 8007db8:	200001b4 	.word	0x200001b4
 8007dbc:	20000018 	.word	0x20000018
 8007dc0:	2000011c 	.word	0x2000011c

08007dc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4905      	ldr	r1, [pc, #20]	; (8007de0 <CDC_Init_FS+0x1c>)
 8007dcc:	4805      	ldr	r0, [pc, #20]	; (8007de4 <CDC_Init_FS+0x20>)
 8007dce:	f7fe fe18 	bl	8006a02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007dd2:	4905      	ldr	r1, [pc, #20]	; (8007de8 <CDC_Init_FS+0x24>)
 8007dd4:	4803      	ldr	r0, [pc, #12]	; (8007de4 <CDC_Init_FS+0x20>)
 8007dd6:	f7fe fe32 	bl	8006a3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007dda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	2000086c 	.word	0x2000086c
 8007de4:	200001b4 	.word	0x200001b4
 8007de8:	20000484 	.word	0x20000484

08007dec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007df0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	2b23      	cmp	r3, #35	; 0x23
 8007e10:	d84a      	bhi.n	8007ea8 <CDC_Control_FS+0xac>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <CDC_Control_FS+0x1c>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007ea9 	.word	0x08007ea9
 8007e1c:	08007ea9 	.word	0x08007ea9
 8007e20:	08007ea9 	.word	0x08007ea9
 8007e24:	08007ea9 	.word	0x08007ea9
 8007e28:	08007ea9 	.word	0x08007ea9
 8007e2c:	08007ea9 	.word	0x08007ea9
 8007e30:	08007ea9 	.word	0x08007ea9
 8007e34:	08007ea9 	.word	0x08007ea9
 8007e38:	08007ea9 	.word	0x08007ea9
 8007e3c:	08007ea9 	.word	0x08007ea9
 8007e40:	08007ea9 	.word	0x08007ea9
 8007e44:	08007ea9 	.word	0x08007ea9
 8007e48:	08007ea9 	.word	0x08007ea9
 8007e4c:	08007ea9 	.word	0x08007ea9
 8007e50:	08007ea9 	.word	0x08007ea9
 8007e54:	08007ea9 	.word	0x08007ea9
 8007e58:	08007ea9 	.word	0x08007ea9
 8007e5c:	08007ea9 	.word	0x08007ea9
 8007e60:	08007ea9 	.word	0x08007ea9
 8007e64:	08007ea9 	.word	0x08007ea9
 8007e68:	08007ea9 	.word	0x08007ea9
 8007e6c:	08007ea9 	.word	0x08007ea9
 8007e70:	08007ea9 	.word	0x08007ea9
 8007e74:	08007ea9 	.word	0x08007ea9
 8007e78:	08007ea9 	.word	0x08007ea9
 8007e7c:	08007ea9 	.word	0x08007ea9
 8007e80:	08007ea9 	.word	0x08007ea9
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007ea9 	.word	0x08007ea9
 8007e8c:	08007ea9 	.word	0x08007ea9
 8007e90:	08007ea9 	.word	0x08007ea9
 8007e94:	08007ea9 	.word	0x08007ea9
 8007e98:	08007ea9 	.word	0x08007ea9
 8007e9c:	08007ea9 	.word	0x08007ea9
 8007ea0:	08007ea9 	.word	0x08007ea9
 8007ea4:	08007ea9 	.word	0x08007ea9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ea8:	bf00      	nop
  }

  return (USBD_OK);
 8007eaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	4805      	ldr	r0, [pc, #20]	; (8007edc <CDC_Receive_FS+0x24>)
 8007ec6:	f7fe fdba 	bl	8006a3e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007eca:	4804      	ldr	r0, [pc, #16]	; (8007edc <CDC_Receive_FS+0x24>)
 8007ecc:	f7fe fe00 	bl	8006ad0 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8007ed0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	200001b4 	.word	0x200001b4

08007ee0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ef0:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <CDC_Transmit_FS+0x48>)
 8007ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e00b      	b.n	8007f1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f06:	887b      	ldrh	r3, [r7, #2]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4806      	ldr	r0, [pc, #24]	; (8007f28 <CDC_Transmit_FS+0x48>)
 8007f0e:	f7fe fd78 	bl	8006a02 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f12:	4805      	ldr	r0, [pc, #20]	; (8007f28 <CDC_Transmit_FS+0x48>)
 8007f14:	f7fe fdac 	bl	8006a70 <USBD_CDC_TransmitPacket>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	200001b4 	.word	0x200001b4

08007f2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	6039      	str	r1, [r7, #0]
 8007f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2212      	movs	r2, #18
 8007f60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f62:	4b03      	ldr	r3, [pc, #12]	; (8007f70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	20000150 	.word	0x20000150

08007f74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2204      	movs	r2, #4
 8007f84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f86:	4b03      	ldr	r3, [pc, #12]	; (8007f94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	20000170 	.word	0x20000170

08007f98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	6039      	str	r1, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d105      	bne.n	8007fb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	4907      	ldr	r1, [pc, #28]	; (8007fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8007fae:	4808      	ldr	r0, [pc, #32]	; (8007fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fb0:	f7ff fdf7 	bl	8007ba2 <USBD_GetString>
 8007fb4:	e004      	b.n	8007fc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	4904      	ldr	r1, [pc, #16]	; (8007fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8007fba:	4805      	ldr	r0, [pc, #20]	; (8007fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fbc:	f7ff fdf1 	bl	8007ba2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fc0:	4b02      	ldr	r3, [pc, #8]	; (8007fcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000c54 	.word	0x20000c54
 8007fd0:	08008944 	.word	0x08008944

08007fd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	6039      	str	r1, [r7, #0]
 8007fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	4904      	ldr	r1, [pc, #16]	; (8007ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fe4:	4804      	ldr	r0, [pc, #16]	; (8007ff8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fe6:	f7ff fddc 	bl	8007ba2 <USBD_GetString>
  return USBD_StrDesc;
 8007fea:	4b02      	ldr	r3, [pc, #8]	; (8007ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20000c54 	.word	0x20000c54
 8007ff8:	0800895c 	.word	0x0800895c

08007ffc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	6039      	str	r1, [r7, #0]
 8008006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	221a      	movs	r2, #26
 800800c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800800e:	f000 f855 	bl	80080bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008012:	4b02      	ldr	r3, [pc, #8]	; (800801c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20000174 	.word	0x20000174

08008020 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d105      	bne.n	800803e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	4907      	ldr	r1, [pc, #28]	; (8008054 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008036:	4808      	ldr	r0, [pc, #32]	; (8008058 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008038:	f7ff fdb3 	bl	8007ba2 <USBD_GetString>
 800803c:	e004      	b.n	8008048 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4904      	ldr	r1, [pc, #16]	; (8008054 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008042:	4805      	ldr	r0, [pc, #20]	; (8008058 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008044:	f7ff fdad 	bl	8007ba2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000c54 	.word	0x20000c54
 8008058:	08008970 	.word	0x08008970

0800805c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d105      	bne.n	800807a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	4907      	ldr	r1, [pc, #28]	; (8008090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008072:	4808      	ldr	r0, [pc, #32]	; (8008094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008074:	f7ff fd95 	bl	8007ba2 <USBD_GetString>
 8008078:	e004      	b.n	8008084 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	4904      	ldr	r1, [pc, #16]	; (8008090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800807e:	4805      	ldr	r0, [pc, #20]	; (8008094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008080:	f7ff fd8f 	bl	8007ba2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008084:	4b02      	ldr	r3, [pc, #8]	; (8008090 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20000c54 	.word	0x20000c54
 8008094:	0800897c 	.word	0x0800897c

08008098 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	220c      	movs	r2, #12
 80080a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80080aa:	4b03      	ldr	r3, [pc, #12]	; (80080b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	20000164 	.word	0x20000164

080080bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080c2:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <Get_SerialNum+0x44>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080c8:	4b0e      	ldr	r3, [pc, #56]	; (8008104 <Get_SerialNum+0x48>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080ce:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <Get_SerialNum+0x4c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d009      	beq.n	80080f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080e2:	2208      	movs	r2, #8
 80080e4:	4909      	ldr	r1, [pc, #36]	; (800810c <Get_SerialNum+0x50>)
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f814 	bl	8008114 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080ec:	2204      	movs	r2, #4
 80080ee:	4908      	ldr	r1, [pc, #32]	; (8008110 <Get_SerialNum+0x54>)
 80080f0:	68b8      	ldr	r0, [r7, #8]
 80080f2:	f000 f80f 	bl	8008114 <IntToUnicode>
  }
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	1fff7590 	.word	0x1fff7590
 8008104:	1fff7594 	.word	0x1fff7594
 8008108:	1fff7598 	.word	0x1fff7598
 800810c:	20000176 	.word	0x20000176
 8008110:	20000186 	.word	0x20000186

08008114 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4613      	mov	r3, r2
 8008120:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008126:	2300      	movs	r3, #0
 8008128:	75fb      	strb	r3, [r7, #23]
 800812a:	e027      	b.n	800817c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	0f1b      	lsrs	r3, r3, #28
 8008130:	2b09      	cmp	r3, #9
 8008132:	d80b      	bhi.n	800814c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	0f1b      	lsrs	r3, r3, #28
 8008138:	b2da      	uxtb	r2, r3
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	4619      	mov	r1, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	440b      	add	r3, r1
 8008144:	3230      	adds	r2, #48	; 0x30
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e00a      	b.n	8008162 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	0f1b      	lsrs	r3, r3, #28
 8008150:	b2da      	uxtb	r2, r3
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	4619      	mov	r1, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	440b      	add	r3, r1
 800815c:	3237      	adds	r2, #55	; 0x37
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	3301      	adds	r3, #1
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	4413      	add	r3, r2
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	3301      	adds	r3, #1
 800817a:	75fb      	strb	r3, [r7, #23]
 800817c:	7dfa      	ldrb	r2, [r7, #23]
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	429a      	cmp	r2, r3
 8008182:	d3d3      	bcc.n	800812c <IntToUnicode+0x18>
  }
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
	...

08008194 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b098      	sub	sp, #96	; 0x60
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800819c:	f107 030c 	add.w	r3, r7, #12
 80081a0:	2254      	movs	r2, #84	; 0x54
 80081a2:	2100      	movs	r1, #0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 fbaf 	bl	8008908 <memset>
  if(pcdHandle->Instance==USB)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a15      	ldr	r2, [pc, #84]	; (8008204 <HAL_PCD_MspInit+0x70>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d122      	bne.n	80081fa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80081b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80081ba:	2300      	movs	r3, #0
 80081bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80081be:	f107 030c 	add.w	r3, r7, #12
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fb fb58 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80081ce:	f7f8 f98b 	bl	80004e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80081d2:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <HAL_PCD_MspInit+0x74>)
 80081d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d6:	4a0c      	ldr	r2, [pc, #48]	; (8008208 <HAL_PCD_MspInit+0x74>)
 80081d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081dc:	6593      	str	r3, [r2, #88]	; 0x58
 80081de:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <HAL_PCD_MspInit+0x74>)
 80081e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081e6:	60bb      	str	r3, [r7, #8]
 80081e8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80081ea:	2200      	movs	r2, #0
 80081ec:	2100      	movs	r1, #0
 80081ee:	2043      	movs	r0, #67	; 0x43
 80081f0:	f7f8 fbc3 	bl	800097a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80081f4:	2043      	movs	r0, #67	; 0x43
 80081f6:	f7f8 fbdc 	bl	80009b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80081fa:	bf00      	nop
 80081fc:	3760      	adds	r7, #96	; 0x60
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	40006800 	.word	0x40006800
 8008208:	40021000 	.word	0x40021000

0800820c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fe fd20 	bl	8006c68 <USBD_LL_SetupStage>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8008242:	78fa      	ldrb	r2, [r7, #3]
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	440b      	add	r3, r1
 8008250:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	4619      	mov	r1, r3
 800825a:	f7fe fd5a 	bl	8006d12 <USBD_LL_DataOutStage>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	440b      	add	r3, r1
 8008286:	3340      	adds	r3, #64	; 0x40
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	4619      	mov	r1, r3
 800828e:	f7fe fda3 	bl	8006dd8 <USBD_LL_DataInStage>
}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe feb7 	bl	800701c <USBD_LL_SOF>
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082be:	2301      	movs	r3, #1
 80082c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d001      	beq.n	80082ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082ca:	f7f8 f90d 	bl	80004e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80082d4:	7bfa      	ldrb	r2, [r7, #15]
 80082d6:	4611      	mov	r1, r2
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fe fe61 	bl	8006fa0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe fe0d 	bl	8006f04 <USBD_LL_Reset>
}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fe5c 	bl	8006fc0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <HAL_PCD_SuspendCallback+0x30>)
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	4a03      	ldr	r2, [pc, #12]	; (8008324 <HAL_PCD_SuspendCallback+0x30>)
 8008316:	f043 0306 	orr.w	r3, r3, #6
 800831a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	e000ed00 	.word	0xe000ed00

08008328 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008338:	4b08      	ldr	r3, [pc, #32]	; (800835c <HAL_PCD_ResumeCallback+0x34>)
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	4a07      	ldr	r2, [pc, #28]	; (800835c <HAL_PCD_ResumeCallback+0x34>)
 800833e:	f023 0306 	bic.w	r3, r3, #6
 8008342:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008344:	f000 fab6 	bl	80088b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fe4c 	bl	8006fec <USBD_LL_Resume>
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	e000ed00 	.word	0xe000ed00

08008360 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008368:	f7fa fbde 	bl	8002b28 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800836c:	4a2b      	ldr	r2, [pc, #172]	; (800841c <USBD_LL_Init+0xbc>)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a29      	ldr	r2, [pc, #164]	; (800841c <USBD_LL_Init+0xbc>)
 8008378:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800837c:	4b27      	ldr	r3, [pc, #156]	; (800841c <USBD_LL_Init+0xbc>)
 800837e:	4a28      	ldr	r2, [pc, #160]	; (8008420 <USBD_LL_Init+0xc0>)
 8008380:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008382:	4b26      	ldr	r3, [pc, #152]	; (800841c <USBD_LL_Init+0xbc>)
 8008384:	2208      	movs	r2, #8
 8008386:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008388:	4b24      	ldr	r3, [pc, #144]	; (800841c <USBD_LL_Init+0xbc>)
 800838a:	2202      	movs	r2, #2
 800838c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800838e:	4b23      	ldr	r3, [pc, #140]	; (800841c <USBD_LL_Init+0xbc>)
 8008390:	2202      	movs	r2, #2
 8008392:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008394:	4b21      	ldr	r3, [pc, #132]	; (800841c <USBD_LL_Init+0xbc>)
 8008396:	2200      	movs	r2, #0
 8008398:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800839a:	4b20      	ldr	r3, [pc, #128]	; (800841c <USBD_LL_Init+0xbc>)
 800839c:	2200      	movs	r2, #0
 800839e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80083a0:	4b1e      	ldr	r3, [pc, #120]	; (800841c <USBD_LL_Init+0xbc>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083a6:	4b1d      	ldr	r3, [pc, #116]	; (800841c <USBD_LL_Init+0xbc>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083ac:	481b      	ldr	r0, [pc, #108]	; (800841c <USBD_LL_Init+0xbc>)
 80083ae:	f7f8 fdbb 	bl	8000f28 <HAL_PCD_Init>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80083b8:	f7f8 f896 	bl	80004e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083c2:	2318      	movs	r3, #24
 80083c4:	2200      	movs	r2, #0
 80083c6:	2100      	movs	r1, #0
 80083c8:	f7fa facb 	bl	8002962 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083d2:	2358      	movs	r3, #88	; 0x58
 80083d4:	2200      	movs	r2, #0
 80083d6:	2180      	movs	r1, #128	; 0x80
 80083d8:	f7fa fac3 	bl	8002962 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083e2:	23c0      	movs	r3, #192	; 0xc0
 80083e4:	2200      	movs	r2, #0
 80083e6:	2181      	movs	r1, #129	; 0x81
 80083e8:	f7fa fabb 	bl	8002962 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80083f6:	2200      	movs	r2, #0
 80083f8:	2101      	movs	r1, #1
 80083fa:	f7fa fab2 	bl	8002962 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008408:	2200      	movs	r2, #0
 800840a:	2182      	movs	r1, #130	; 0x82
 800840c:	f7fa faa9 	bl	8002962 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000e54 	.word	0x20000e54
 8008420:	40006800 	.word	0x40006800

08008424 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800843a:	4618      	mov	r0, r3
 800843c:	f7f8 fe8b 	bl	8001156 <HAL_PCD_Start>
 8008440:	4603      	mov	r3, r0
 8008442:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	2b03      	cmp	r3, #3
 8008448:	d816      	bhi.n	8008478 <USBD_LL_Start+0x54>
 800844a:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <USBD_LL_Start+0x2c>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	08008461 	.word	0x08008461
 8008454:	08008467 	.word	0x08008467
 8008458:	0800846d 	.word	0x0800846d
 800845c:	08008473 	.word	0x08008473
    case HAL_OK :
      usb_status = USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]
    break;
 8008464:	e00b      	b.n	800847e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008466:	2303      	movs	r3, #3
 8008468:	73fb      	strb	r3, [r7, #15]
    break;
 800846a:	e008      	b.n	800847e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
    break;
 8008470:	e005      	b.n	800847e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008472:	2303      	movs	r3, #3
 8008474:	73fb      	strb	r3, [r7, #15]
    break;
 8008476:	e002      	b.n	800847e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008478:	2303      	movs	r3, #3
 800847a:	73fb      	strb	r3, [r7, #15]
    break;
 800847c:	bf00      	nop
  }
  return usb_status;
 800847e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	461a      	mov	r2, r3
 8008496:	4603      	mov	r3, r0
 8008498:	70fb      	strb	r3, [r7, #3]
 800849a:	460b      	mov	r3, r1
 800849c:	70bb      	strb	r3, [r7, #2]
 800849e:	4613      	mov	r3, r2
 80084a0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084b0:	78bb      	ldrb	r3, [r7, #2]
 80084b2:	883a      	ldrh	r2, [r7, #0]
 80084b4:	78f9      	ldrb	r1, [r7, #3]
 80084b6:	f7f8 ffbc 	bl	8001432 <HAL_PCD_EP_Open>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d817      	bhi.n	80084f4 <USBD_LL_OpenEP+0x6c>
 80084c4:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <USBD_LL_OpenEP+0x44>)
 80084c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ca:	bf00      	nop
 80084cc:	080084dd 	.word	0x080084dd
 80084d0:	080084e3 	.word	0x080084e3
 80084d4:	080084e9 	.word	0x080084e9
 80084d8:	080084ef 	.word	0x080084ef
    case HAL_OK :
      usb_status = USBD_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
    break;
 80084e0:	e00b      	b.n	80084fa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084e2:	2303      	movs	r3, #3
 80084e4:	73fb      	strb	r3, [r7, #15]
    break;
 80084e6:	e008      	b.n	80084fa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084e8:	2301      	movs	r3, #1
 80084ea:	73fb      	strb	r3, [r7, #15]
    break;
 80084ec:	e005      	b.n	80084fa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084ee:	2303      	movs	r3, #3
 80084f0:	73fb      	strb	r3, [r7, #15]
    break;
 80084f2:	e002      	b.n	80084fa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80084f4:	2303      	movs	r3, #3
 80084f6:	73fb      	strb	r3, [r7, #15]
    break;
 80084f8:	bf00      	nop
  }
  return usb_status;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800851e:	78fa      	ldrb	r2, [r7, #3]
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f7f8 ffed 	bl	8001502 <HAL_PCD_EP_Close>
 8008528:	4603      	mov	r3, r0
 800852a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b03      	cmp	r3, #3
 8008530:	d816      	bhi.n	8008560 <USBD_LL_CloseEP+0x5c>
 8008532:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <USBD_LL_CloseEP+0x34>)
 8008534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008538:	08008549 	.word	0x08008549
 800853c:	0800854f 	.word	0x0800854f
 8008540:	08008555 	.word	0x08008555
 8008544:	0800855b 	.word	0x0800855b
    case HAL_OK :
      usb_status = USBD_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	73fb      	strb	r3, [r7, #15]
    break;
 800854c:	e00b      	b.n	8008566 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800854e:	2303      	movs	r3, #3
 8008550:	73fb      	strb	r3, [r7, #15]
    break;
 8008552:	e008      	b.n	8008566 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008554:	2301      	movs	r3, #1
 8008556:	73fb      	strb	r3, [r7, #15]
    break;
 8008558:	e005      	b.n	8008566 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800855a:	2303      	movs	r3, #3
 800855c:	73fb      	strb	r3, [r7, #15]
    break;
 800855e:	e002      	b.n	8008566 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008560:	2303      	movs	r3, #3
 8008562:	73fb      	strb	r3, [r7, #15]
    break;
 8008564:	bf00      	nop
  }
  return usb_status;
 8008566:	7bfb      	ldrb	r3, [r7, #15]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f7f9 f89b 	bl	80016ca <HAL_PCD_EP_SetStall>
 8008594:	4603      	mov	r3, r0
 8008596:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b03      	cmp	r3, #3
 800859c:	d816      	bhi.n	80085cc <USBD_LL_StallEP+0x5c>
 800859e:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <USBD_LL_StallEP+0x34>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085b5 	.word	0x080085b5
 80085a8:	080085bb 	.word	0x080085bb
 80085ac:	080085c1 	.word	0x080085c1
 80085b0:	080085c7 	.word	0x080085c7
    case HAL_OK :
      usb_status = USBD_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]
    break;
 80085b8:	e00b      	b.n	80085d2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085ba:	2303      	movs	r3, #3
 80085bc:	73fb      	strb	r3, [r7, #15]
    break;
 80085be:	e008      	b.n	80085d2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
    break;
 80085c4:	e005      	b.n	80085d2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085c6:	2303      	movs	r3, #3
 80085c8:	73fb      	strb	r3, [r7, #15]
    break;
 80085ca:	e002      	b.n	80085d2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80085cc:	2303      	movs	r3, #3
 80085ce:	73fb      	strb	r3, [r7, #15]
    break;
 80085d0:	bf00      	nop
  }
  return usb_status;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	4611      	mov	r1, r2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f9 f8c7 	bl	800178e <HAL_PCD_EP_ClrStall>
 8008600:	4603      	mov	r3, r0
 8008602:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d816      	bhi.n	8008638 <USBD_LL_ClearStallEP+0x5c>
 800860a:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <USBD_LL_ClearStallEP+0x34>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008621 	.word	0x08008621
 8008614:	08008627 	.word	0x08008627
 8008618:	0800862d 	.word	0x0800862d
 800861c:	08008633 	.word	0x08008633
    case HAL_OK :
      usb_status = USBD_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
    break;
 8008624:	e00b      	b.n	800863e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008626:	2303      	movs	r3, #3
 8008628:	73fb      	strb	r3, [r7, #15]
    break;
 800862a:	e008      	b.n	800863e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800862c:	2301      	movs	r3, #1
 800862e:	73fb      	strb	r3, [r7, #15]
    break;
 8008630:	e005      	b.n	800863e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008632:	2303      	movs	r3, #3
 8008634:	73fb      	strb	r3, [r7, #15]
    break;
 8008636:	e002      	b.n	800863e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008638:	2303      	movs	r3, #3
 800863a:	73fb      	strb	r3, [r7, #15]
    break;
 800863c:	bf00      	nop
  }
  return usb_status;
 800863e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800865a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800865c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008660:	2b00      	cmp	r3, #0
 8008662:	da0c      	bge.n	800867e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866a:	68f9      	ldr	r1, [r7, #12]
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	440b      	add	r3, r1
 8008678:	3306      	adds	r3, #6
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	e00b      	b.n	8008696 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008684:	68f9      	ldr	r1, [r7, #12]
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	440b      	add	r3, r1
 8008690:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8008694:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7f8 fe90 	bl	80013e8 <HAL_PCD_SetAddress>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d816      	bhi.n	8008700 <USBD_LL_SetUSBAddress+0x5c>
 80086d2:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <USBD_LL_SetUSBAddress+0x34>)
 80086d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d8:	080086e9 	.word	0x080086e9
 80086dc:	080086ef 	.word	0x080086ef
 80086e0:	080086f5 	.word	0x080086f5
 80086e4:	080086fb 	.word	0x080086fb
    case HAL_OK :
      usb_status = USBD_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
    break;
 80086ec:	e00b      	b.n	8008706 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086ee:	2303      	movs	r3, #3
 80086f0:	73fb      	strb	r3, [r7, #15]
    break;
 80086f2:	e008      	b.n	8008706 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086f4:	2301      	movs	r3, #1
 80086f6:	73fb      	strb	r3, [r7, #15]
    break;
 80086f8:	e005      	b.n	8008706 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086fa:	2303      	movs	r3, #3
 80086fc:	73fb      	strb	r3, [r7, #15]
    break;
 80086fe:	e002      	b.n	8008706 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008700:	2303      	movs	r3, #3
 8008702:	73fb      	strb	r3, [r7, #15]
    break;
 8008704:	bf00      	nop
  }
  return usb_status;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	607a      	str	r2, [r7, #4]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	460b      	mov	r3, r1
 800871e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800872e:	7af9      	ldrb	r1, [r7, #11]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	f7f8 ff85 	bl	8001642 <HAL_PCD_EP_Transmit>
 8008738:	4603      	mov	r3, r0
 800873a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800873c:	7dbb      	ldrb	r3, [r7, #22]
 800873e:	2b03      	cmp	r3, #3
 8008740:	d816      	bhi.n	8008770 <USBD_LL_Transmit+0x60>
 8008742:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <USBD_LL_Transmit+0x38>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	08008759 	.word	0x08008759
 800874c:	0800875f 	.word	0x0800875f
 8008750:	08008765 	.word	0x08008765
 8008754:	0800876b 	.word	0x0800876b
    case HAL_OK :
      usb_status = USBD_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	75fb      	strb	r3, [r7, #23]
    break;
 800875c:	e00b      	b.n	8008776 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800875e:	2303      	movs	r3, #3
 8008760:	75fb      	strb	r3, [r7, #23]
    break;
 8008762:	e008      	b.n	8008776 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008764:	2301      	movs	r3, #1
 8008766:	75fb      	strb	r3, [r7, #23]
    break;
 8008768:	e005      	b.n	8008776 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800876a:	2303      	movs	r3, #3
 800876c:	75fb      	strb	r3, [r7, #23]
    break;
 800876e:	e002      	b.n	8008776 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008770:	2303      	movs	r3, #3
 8008772:	75fb      	strb	r3, [r7, #23]
    break;
 8008774:	bf00      	nop
  }
  return usb_status;
 8008776:	7dfb      	ldrb	r3, [r7, #23]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	607a      	str	r2, [r7, #4]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	460b      	mov	r3, r1
 800878e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800879e:	7af9      	ldrb	r1, [r7, #11]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	f7f8 fef7 	bl	8001596 <HAL_PCD_EP_Receive>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80087ac:	7dbb      	ldrb	r3, [r7, #22]
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d816      	bhi.n	80087e0 <USBD_LL_PrepareReceive+0x60>
 80087b2:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <USBD_LL_PrepareReceive+0x38>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	080087c9 	.word	0x080087c9
 80087bc:	080087cf 	.word	0x080087cf
 80087c0:	080087d5 	.word	0x080087d5
 80087c4:	080087db 	.word	0x080087db
    case HAL_OK :
      usb_status = USBD_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	75fb      	strb	r3, [r7, #23]
    break;
 80087cc:	e00b      	b.n	80087e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087ce:	2303      	movs	r3, #3
 80087d0:	75fb      	strb	r3, [r7, #23]
    break;
 80087d2:	e008      	b.n	80087e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087d4:	2301      	movs	r3, #1
 80087d6:	75fb      	strb	r3, [r7, #23]
    break;
 80087d8:	e005      	b.n	80087e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087da:	2303      	movs	r3, #3
 80087dc:	75fb      	strb	r3, [r7, #23]
    break;
 80087de:	e002      	b.n	80087e6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80087e0:	2303      	movs	r3, #3
 80087e2:	75fb      	strb	r3, [r7, #23]
    break;
 80087e4:	bf00      	nop
  }
  return usb_status;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	4611      	mov	r1, r2
 8008806:	4618      	mov	r0, r3
 8008808:	f7f8 ff03 	bl	8001612 <HAL_PCD_EP_GetRxCount>
 800880c:	4603      	mov	r3, r0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_PCDEx_LPM_Callback+0x18>
 800882a:	2b01      	cmp	r3, #1
 800882c:	d013      	beq.n	8008856 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800882e:	e023      	b.n	8008878 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008838:	f000 f83c 	bl	80088b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <HAL_PCDEx_LPM_Callback+0x68>)
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	4a0f      	ldr	r2, [pc, #60]	; (8008880 <HAL_PCDEx_LPM_Callback+0x68>)
 8008842:	f023 0306 	bic.w	r3, r3, #6
 8008846:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fbcc 	bl	8006fec <USBD_LL_Resume>
    break;
 8008854:	e010      	b.n	8008878 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe fbaf 	bl	8006fc0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <HAL_PCDEx_LPM_Callback+0x68>)
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	4a04      	ldr	r2, [pc, #16]	; (8008880 <HAL_PCDEx_LPM_Callback+0x68>)
 8008870:	f043 0306 	orr.w	r3, r3, #6
 8008874:	6113      	str	r3, [r2, #16]
    break;
 8008876:	bf00      	nop
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	e000ed00 	.word	0xe000ed00

08008884 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800888c:	4b03      	ldr	r3, [pc, #12]	; (800889c <USBD_static_malloc+0x18>)
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	20001150 	.word	0x20001150

080088a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]

}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80088b8:	f7f7 fd58 	bl	800036c <SystemClock_Config>
}
 80088bc:	bf00      	nop
 80088be:	bd80      	pop	{r7, pc}

080088c0 <__libc_init_array>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	4d0d      	ldr	r5, [pc, #52]	; (80088f8 <__libc_init_array+0x38>)
 80088c4:	4c0d      	ldr	r4, [pc, #52]	; (80088fc <__libc_init_array+0x3c>)
 80088c6:	1b64      	subs	r4, r4, r5
 80088c8:	10a4      	asrs	r4, r4, #2
 80088ca:	2600      	movs	r6, #0
 80088cc:	42a6      	cmp	r6, r4
 80088ce:	d109      	bne.n	80088e4 <__libc_init_array+0x24>
 80088d0:	4d0b      	ldr	r5, [pc, #44]	; (8008900 <__libc_init_array+0x40>)
 80088d2:	4c0c      	ldr	r4, [pc, #48]	; (8008904 <__libc_init_array+0x44>)
 80088d4:	f000 f820 	bl	8008918 <_init>
 80088d8:	1b64      	subs	r4, r4, r5
 80088da:	10a4      	asrs	r4, r4, #2
 80088dc:	2600      	movs	r6, #0
 80088de:	42a6      	cmp	r6, r4
 80088e0:	d105      	bne.n	80088ee <__libc_init_array+0x2e>
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e8:	4798      	blx	r3
 80088ea:	3601      	adds	r6, #1
 80088ec:	e7ee      	b.n	80088cc <__libc_init_array+0xc>
 80088ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f2:	4798      	blx	r3
 80088f4:	3601      	adds	r6, #1
 80088f6:	e7f2      	b.n	80088de <__libc_init_array+0x1e>
 80088f8:	080089cc 	.word	0x080089cc
 80088fc:	080089cc 	.word	0x080089cc
 8008900:	080089cc 	.word	0x080089cc
 8008904:	080089d0 	.word	0x080089d0

08008908 <memset>:
 8008908:	4402      	add	r2, r0
 800890a:	4603      	mov	r3, r0
 800890c:	4293      	cmp	r3, r2
 800890e:	d100      	bne.n	8008912 <memset+0xa>
 8008910:	4770      	bx	lr
 8008912:	f803 1b01 	strb.w	r1, [r3], #1
 8008916:	e7f9      	b.n	800890c <memset+0x4>

08008918 <_init>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	bf00      	nop
 800891c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891e:	bc08      	pop	{r3}
 8008920:	469e      	mov	lr, r3
 8008922:	4770      	bx	lr

08008924 <_fini>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	bf00      	nop
 8008928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892a:	bc08      	pop	{r3}
 800892c:	469e      	mov	lr, r3
 800892e:	4770      	bx	lr
