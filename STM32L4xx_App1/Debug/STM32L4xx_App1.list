
STM32L4xx_App1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0c8  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0801c258  0801c258  0001c258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c6bc  0801c6bc  00020360  2**0
                  CONTENTS
  4 .ARM          00000000  0801c6bc  0801c6bc  00020360  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801c6bc  0801c6bc  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c6bc  0801c6bc  0001c6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c6c0  0801c6c0  0001c6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0801c6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001228  20000360  0801ca24  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001588  0801ca24  00021588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144f8  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fb  00000000  00000000  00034888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00039078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024677  00000000  00000000  00039fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ca0  00000000  00000000  0005e627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c92dc  00000000  00000000  000732c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c5a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000533c  00000000  00000000  0013c5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	20000360 	.word	0x20000360
 80101ac:	00000000 	.word	0x00000000
 80101b0:	0801c240 	.word	0x0801c240

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	20000364 	.word	0x20000364
 80101cc:	0801c240 	.word	0x0801c240

080101d0 <strlen>:
 80101d0:	4603      	mov	r3, r0
 80101d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	d1fb      	bne.n	80101d2 <strlen+0x2>
 80101da:	1a18      	subs	r0, r3, r0
 80101dc:	3801      	subs	r0, #1
 80101de:	4770      	bx	lr

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <__aeabi_drsub>:
 8010280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010284:	e002      	b.n	801028c <__adddf3>
 8010286:	bf00      	nop

08010288 <__aeabi_dsub>:
 8010288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801028c <__adddf3>:
 801028c:	b530      	push	{r4, r5, lr}
 801028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010296:	ea94 0f05 	teq	r4, r5
 801029a:	bf08      	it	eq
 801029c:	ea90 0f02 	teqeq	r0, r2
 80102a0:	bf1f      	itttt	ne
 80102a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102b2:	f000 80e2 	beq.w	801047a <__adddf3+0x1ee>
 80102b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102be:	bfb8      	it	lt
 80102c0:	426d      	neglt	r5, r5
 80102c2:	dd0c      	ble.n	80102de <__adddf3+0x52>
 80102c4:	442c      	add	r4, r5
 80102c6:	ea80 0202 	eor.w	r2, r0, r2
 80102ca:	ea81 0303 	eor.w	r3, r1, r3
 80102ce:	ea82 0000 	eor.w	r0, r2, r0
 80102d2:	ea83 0101 	eor.w	r1, r3, r1
 80102d6:	ea80 0202 	eor.w	r2, r0, r2
 80102da:	ea81 0303 	eor.w	r3, r1, r3
 80102de:	2d36      	cmp	r5, #54	; 0x36
 80102e0:	bf88      	it	hi
 80102e2:	bd30      	pophi	{r4, r5, pc}
 80102e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80102e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80102ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80102f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80102f4:	d002      	beq.n	80102fc <__adddf3+0x70>
 80102f6:	4240      	negs	r0, r0
 80102f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80102fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010308:	d002      	beq.n	8010310 <__adddf3+0x84>
 801030a:	4252      	negs	r2, r2
 801030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010310:	ea94 0f05 	teq	r4, r5
 8010314:	f000 80a7 	beq.w	8010466 <__adddf3+0x1da>
 8010318:	f1a4 0401 	sub.w	r4, r4, #1
 801031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010320:	db0d      	blt.n	801033e <__adddf3+0xb2>
 8010322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010326:	fa22 f205 	lsr.w	r2, r2, r5
 801032a:	1880      	adds	r0, r0, r2
 801032c:	f141 0100 	adc.w	r1, r1, #0
 8010330:	fa03 f20e 	lsl.w	r2, r3, lr
 8010334:	1880      	adds	r0, r0, r2
 8010336:	fa43 f305 	asr.w	r3, r3, r5
 801033a:	4159      	adcs	r1, r3
 801033c:	e00e      	b.n	801035c <__adddf3+0xd0>
 801033e:	f1a5 0520 	sub.w	r5, r5, #32
 8010342:	f10e 0e20 	add.w	lr, lr, #32
 8010346:	2a01      	cmp	r2, #1
 8010348:	fa03 fc0e 	lsl.w	ip, r3, lr
 801034c:	bf28      	it	cs
 801034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010352:	fa43 f305 	asr.w	r3, r3, r5
 8010356:	18c0      	adds	r0, r0, r3
 8010358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010360:	d507      	bpl.n	8010372 <__adddf3+0xe6>
 8010362:	f04f 0e00 	mov.w	lr, #0
 8010366:	f1dc 0c00 	rsbs	ip, ip, #0
 801036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8010372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010376:	d31b      	bcc.n	80103b0 <__adddf3+0x124>
 8010378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801037c:	d30c      	bcc.n	8010398 <__adddf3+0x10c>
 801037e:	0849      	lsrs	r1, r1, #1
 8010380:	ea5f 0030 	movs.w	r0, r0, rrx
 8010384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010388:	f104 0401 	add.w	r4, r4, #1
 801038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010394:	f080 809a 	bcs.w	80104cc <__adddf3+0x240>
 8010398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801039c:	bf08      	it	eq
 801039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103a2:	f150 0000 	adcs.w	r0, r0, #0
 80103a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103aa:	ea41 0105 	orr.w	r1, r1, r5
 80103ae:	bd30      	pop	{r4, r5, pc}
 80103b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103b4:	4140      	adcs	r0, r0
 80103b6:	eb41 0101 	adc.w	r1, r1, r1
 80103ba:	3c01      	subs	r4, #1
 80103bc:	bf28      	it	cs
 80103be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80103c2:	d2e9      	bcs.n	8010398 <__adddf3+0x10c>
 80103c4:	f091 0f00 	teq	r1, #0
 80103c8:	bf04      	itt	eq
 80103ca:	4601      	moveq	r1, r0
 80103cc:	2000      	moveq	r0, #0
 80103ce:	fab1 f381 	clz	r3, r1
 80103d2:	bf08      	it	eq
 80103d4:	3320      	addeq	r3, #32
 80103d6:	f1a3 030b 	sub.w	r3, r3, #11
 80103da:	f1b3 0220 	subs.w	r2, r3, #32
 80103de:	da0c      	bge.n	80103fa <__adddf3+0x16e>
 80103e0:	320c      	adds	r2, #12
 80103e2:	dd08      	ble.n	80103f6 <__adddf3+0x16a>
 80103e4:	f102 0c14 	add.w	ip, r2, #20
 80103e8:	f1c2 020c 	rsb	r2, r2, #12
 80103ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80103f0:	fa21 f102 	lsr.w	r1, r1, r2
 80103f4:	e00c      	b.n	8010410 <__adddf3+0x184>
 80103f6:	f102 0214 	add.w	r2, r2, #20
 80103fa:	bfd8      	it	le
 80103fc:	f1c2 0c20 	rsble	ip, r2, #32
 8010400:	fa01 f102 	lsl.w	r1, r1, r2
 8010404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010408:	bfdc      	itt	le
 801040a:	ea41 010c 	orrle.w	r1, r1, ip
 801040e:	4090      	lslle	r0, r2
 8010410:	1ae4      	subs	r4, r4, r3
 8010412:	bfa2      	ittt	ge
 8010414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010418:	4329      	orrge	r1, r5
 801041a:	bd30      	popge	{r4, r5, pc}
 801041c:	ea6f 0404 	mvn.w	r4, r4
 8010420:	3c1f      	subs	r4, #31
 8010422:	da1c      	bge.n	801045e <__adddf3+0x1d2>
 8010424:	340c      	adds	r4, #12
 8010426:	dc0e      	bgt.n	8010446 <__adddf3+0x1ba>
 8010428:	f104 0414 	add.w	r4, r4, #20
 801042c:	f1c4 0220 	rsb	r2, r4, #32
 8010430:	fa20 f004 	lsr.w	r0, r0, r4
 8010434:	fa01 f302 	lsl.w	r3, r1, r2
 8010438:	ea40 0003 	orr.w	r0, r0, r3
 801043c:	fa21 f304 	lsr.w	r3, r1, r4
 8010440:	ea45 0103 	orr.w	r1, r5, r3
 8010444:	bd30      	pop	{r4, r5, pc}
 8010446:	f1c4 040c 	rsb	r4, r4, #12
 801044a:	f1c4 0220 	rsb	r2, r4, #32
 801044e:	fa20 f002 	lsr.w	r0, r0, r2
 8010452:	fa01 f304 	lsl.w	r3, r1, r4
 8010456:	ea40 0003 	orr.w	r0, r0, r3
 801045a:	4629      	mov	r1, r5
 801045c:	bd30      	pop	{r4, r5, pc}
 801045e:	fa21 f004 	lsr.w	r0, r1, r4
 8010462:	4629      	mov	r1, r5
 8010464:	bd30      	pop	{r4, r5, pc}
 8010466:	f094 0f00 	teq	r4, #0
 801046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801046e:	bf06      	itte	eq
 8010470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010474:	3401      	addeq	r4, #1
 8010476:	3d01      	subne	r5, #1
 8010478:	e74e      	b.n	8010318 <__adddf3+0x8c>
 801047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801047e:	bf18      	it	ne
 8010480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010484:	d029      	beq.n	80104da <__adddf3+0x24e>
 8010486:	ea94 0f05 	teq	r4, r5
 801048a:	bf08      	it	eq
 801048c:	ea90 0f02 	teqeq	r0, r2
 8010490:	d005      	beq.n	801049e <__adddf3+0x212>
 8010492:	ea54 0c00 	orrs.w	ip, r4, r0
 8010496:	bf04      	itt	eq
 8010498:	4619      	moveq	r1, r3
 801049a:	4610      	moveq	r0, r2
 801049c:	bd30      	pop	{r4, r5, pc}
 801049e:	ea91 0f03 	teq	r1, r3
 80104a2:	bf1e      	ittt	ne
 80104a4:	2100      	movne	r1, #0
 80104a6:	2000      	movne	r0, #0
 80104a8:	bd30      	popne	{r4, r5, pc}
 80104aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104ae:	d105      	bne.n	80104bc <__adddf3+0x230>
 80104b0:	0040      	lsls	r0, r0, #1
 80104b2:	4149      	adcs	r1, r1
 80104b4:	bf28      	it	cs
 80104b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80104ba:	bd30      	pop	{r4, r5, pc}
 80104bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80104c0:	bf3c      	itt	cc
 80104c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80104c6:	bd30      	popcc	{r4, r5, pc}
 80104c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80104d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104d4:	f04f 0000 	mov.w	r0, #0
 80104d8:	bd30      	pop	{r4, r5, pc}
 80104da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104de:	bf1a      	itte	ne
 80104e0:	4619      	movne	r1, r3
 80104e2:	4610      	movne	r0, r2
 80104e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80104e8:	bf1c      	itt	ne
 80104ea:	460b      	movne	r3, r1
 80104ec:	4602      	movne	r2, r0
 80104ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80104f2:	bf06      	itte	eq
 80104f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80104f8:	ea91 0f03 	teqeq	r1, r3
 80104fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010500:	bd30      	pop	{r4, r5, pc}
 8010502:	bf00      	nop

08010504 <__aeabi_ui2d>:
 8010504:	f090 0f00 	teq	r0, #0
 8010508:	bf04      	itt	eq
 801050a:	2100      	moveq	r1, #0
 801050c:	4770      	bxeq	lr
 801050e:	b530      	push	{r4, r5, lr}
 8010510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010518:	f04f 0500 	mov.w	r5, #0
 801051c:	f04f 0100 	mov.w	r1, #0
 8010520:	e750      	b.n	80103c4 <__adddf3+0x138>
 8010522:	bf00      	nop

08010524 <__aeabi_i2d>:
 8010524:	f090 0f00 	teq	r0, #0
 8010528:	bf04      	itt	eq
 801052a:	2100      	moveq	r1, #0
 801052c:	4770      	bxeq	lr
 801052e:	b530      	push	{r4, r5, lr}
 8010530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801053c:	bf48      	it	mi
 801053e:	4240      	negmi	r0, r0
 8010540:	f04f 0100 	mov.w	r1, #0
 8010544:	e73e      	b.n	80103c4 <__adddf3+0x138>
 8010546:	bf00      	nop

08010548 <__aeabi_f2d>:
 8010548:	0042      	lsls	r2, r0, #1
 801054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010556:	bf1f      	itttt	ne
 8010558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010564:	4770      	bxne	lr
 8010566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801056a:	bf08      	it	eq
 801056c:	4770      	bxeq	lr
 801056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8010572:	bf04      	itt	eq
 8010574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8010578:	4770      	bxeq	lr
 801057a:	b530      	push	{r4, r5, lr}
 801057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010588:	e71c      	b.n	80103c4 <__adddf3+0x138>
 801058a:	bf00      	nop

0801058c <__aeabi_ul2d>:
 801058c:	ea50 0201 	orrs.w	r2, r0, r1
 8010590:	bf08      	it	eq
 8010592:	4770      	bxeq	lr
 8010594:	b530      	push	{r4, r5, lr}
 8010596:	f04f 0500 	mov.w	r5, #0
 801059a:	e00a      	b.n	80105b2 <__aeabi_l2d+0x16>

0801059c <__aeabi_l2d>:
 801059c:	ea50 0201 	orrs.w	r2, r0, r1
 80105a0:	bf08      	it	eq
 80105a2:	4770      	bxeq	lr
 80105a4:	b530      	push	{r4, r5, lr}
 80105a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80105aa:	d502      	bpl.n	80105b2 <__aeabi_l2d+0x16>
 80105ac:	4240      	negs	r0, r0
 80105ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80105b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80105ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105be:	f43f aed8 	beq.w	8010372 <__adddf3+0xe6>
 80105c2:	f04f 0203 	mov.w	r2, #3
 80105c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105ca:	bf18      	it	ne
 80105cc:	3203      	addne	r2, #3
 80105ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105d2:	bf18      	it	ne
 80105d4:	3203      	addne	r2, #3
 80105d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80105da:	f1c2 0320 	rsb	r3, r2, #32
 80105de:	fa00 fc03 	lsl.w	ip, r0, r3
 80105e2:	fa20 f002 	lsr.w	r0, r0, r2
 80105e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80105ea:	ea40 000e 	orr.w	r0, r0, lr
 80105ee:	fa21 f102 	lsr.w	r1, r1, r2
 80105f2:	4414      	add	r4, r2
 80105f4:	e6bd      	b.n	8010372 <__adddf3+0xe6>
 80105f6:	bf00      	nop

080105f8 <__aeabi_dmul>:
 80105f8:	b570      	push	{r4, r5, r6, lr}
 80105fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80105fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010606:	bf1d      	ittte	ne
 8010608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801060c:	ea94 0f0c 	teqne	r4, ip
 8010610:	ea95 0f0c 	teqne	r5, ip
 8010614:	f000 f8de 	bleq	80107d4 <__aeabi_dmul+0x1dc>
 8010618:	442c      	add	r4, r5
 801061a:	ea81 0603 	eor.w	r6, r1, r3
 801061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801062a:	bf18      	it	ne
 801062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010638:	d038      	beq.n	80106ac <__aeabi_dmul+0xb4>
 801063a:	fba0 ce02 	umull	ip, lr, r0, r2
 801063e:	f04f 0500 	mov.w	r5, #0
 8010642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801064e:	f04f 0600 	mov.w	r6, #0
 8010652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010656:	f09c 0f00 	teq	ip, #0
 801065a:	bf18      	it	ne
 801065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801066c:	d204      	bcs.n	8010678 <__aeabi_dmul+0x80>
 801066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010672:	416d      	adcs	r5, r5
 8010674:	eb46 0606 	adc.w	r6, r6, r6
 8010678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010690:	bf88      	it	hi
 8010692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010696:	d81e      	bhi.n	80106d6 <__aeabi_dmul+0xde>
 8010698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801069c:	bf08      	it	eq
 801069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106a2:	f150 0000 	adcs.w	r0, r0, #0
 80106a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106aa:	bd70      	pop	{r4, r5, r6, pc}
 80106ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80106b0:	ea46 0101 	orr.w	r1, r6, r1
 80106b4:	ea40 0002 	orr.w	r0, r0, r2
 80106b8:	ea81 0103 	eor.w	r1, r1, r3
 80106bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106c0:	bfc2      	ittt	gt
 80106c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106ca:	bd70      	popgt	{r4, r5, r6, pc}
 80106cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80106d0:	f04f 0e00 	mov.w	lr, #0
 80106d4:	3c01      	subs	r4, #1
 80106d6:	f300 80ab 	bgt.w	8010830 <__aeabi_dmul+0x238>
 80106da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80106de:	bfde      	ittt	le
 80106e0:	2000      	movle	r0, #0
 80106e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80106e6:	bd70      	pople	{r4, r5, r6, pc}
 80106e8:	f1c4 0400 	rsb	r4, r4, #0
 80106ec:	3c20      	subs	r4, #32
 80106ee:	da35      	bge.n	801075c <__aeabi_dmul+0x164>
 80106f0:	340c      	adds	r4, #12
 80106f2:	dc1b      	bgt.n	801072c <__aeabi_dmul+0x134>
 80106f4:	f104 0414 	add.w	r4, r4, #20
 80106f8:	f1c4 0520 	rsb	r5, r4, #32
 80106fc:	fa00 f305 	lsl.w	r3, r0, r5
 8010700:	fa20 f004 	lsr.w	r0, r0, r4
 8010704:	fa01 f205 	lsl.w	r2, r1, r5
 8010708:	ea40 0002 	orr.w	r0, r0, r2
 801070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010718:	fa21 f604 	lsr.w	r6, r1, r4
 801071c:	eb42 0106 	adc.w	r1, r2, r6
 8010720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010724:	bf08      	it	eq
 8010726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801072a:	bd70      	pop	{r4, r5, r6, pc}
 801072c:	f1c4 040c 	rsb	r4, r4, #12
 8010730:	f1c4 0520 	rsb	r5, r4, #32
 8010734:	fa00 f304 	lsl.w	r3, r0, r4
 8010738:	fa20 f005 	lsr.w	r0, r0, r5
 801073c:	fa01 f204 	lsl.w	r2, r1, r4
 8010740:	ea40 0002 	orr.w	r0, r0, r2
 8010744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801074c:	f141 0100 	adc.w	r1, r1, #0
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 0520 	rsb	r5, r4, #32
 8010760:	fa00 f205 	lsl.w	r2, r0, r5
 8010764:	ea4e 0e02 	orr.w	lr, lr, r2
 8010768:	fa20 f304 	lsr.w	r3, r0, r4
 801076c:	fa01 f205 	lsl.w	r2, r1, r5
 8010770:	ea43 0302 	orr.w	r3, r3, r2
 8010774:	fa21 f004 	lsr.w	r0, r1, r4
 8010778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801077c:	fa21 f204 	lsr.w	r2, r1, r4
 8010780:	ea20 0002 	bic.w	r0, r0, r2
 8010784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801078c:	bf08      	it	eq
 801078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010792:	bd70      	pop	{r4, r5, r6, pc}
 8010794:	f094 0f00 	teq	r4, #0
 8010798:	d10f      	bne.n	80107ba <__aeabi_dmul+0x1c2>
 801079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801079e:	0040      	lsls	r0, r0, #1
 80107a0:	eb41 0101 	adc.w	r1, r1, r1
 80107a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107a8:	bf08      	it	eq
 80107aa:	3c01      	subeq	r4, #1
 80107ac:	d0f7      	beq.n	801079e <__aeabi_dmul+0x1a6>
 80107ae:	ea41 0106 	orr.w	r1, r1, r6
 80107b2:	f095 0f00 	teq	r5, #0
 80107b6:	bf18      	it	ne
 80107b8:	4770      	bxne	lr
 80107ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80107be:	0052      	lsls	r2, r2, #1
 80107c0:	eb43 0303 	adc.w	r3, r3, r3
 80107c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80107c8:	bf08      	it	eq
 80107ca:	3d01      	subeq	r5, #1
 80107cc:	d0f7      	beq.n	80107be <__aeabi_dmul+0x1c6>
 80107ce:	ea43 0306 	orr.w	r3, r3, r6
 80107d2:	4770      	bx	lr
 80107d4:	ea94 0f0c 	teq	r4, ip
 80107d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80107dc:	bf18      	it	ne
 80107de:	ea95 0f0c 	teqne	r5, ip
 80107e2:	d00c      	beq.n	80107fe <__aeabi_dmul+0x206>
 80107e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80107e8:	bf18      	it	ne
 80107ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80107ee:	d1d1      	bne.n	8010794 <__aeabi_dmul+0x19c>
 80107f0:	ea81 0103 	eor.w	r1, r1, r3
 80107f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107f8:	f04f 0000 	mov.w	r0, #0
 80107fc:	bd70      	pop	{r4, r5, r6, pc}
 80107fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010802:	bf06      	itte	eq
 8010804:	4610      	moveq	r0, r2
 8010806:	4619      	moveq	r1, r3
 8010808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801080c:	d019      	beq.n	8010842 <__aeabi_dmul+0x24a>
 801080e:	ea94 0f0c 	teq	r4, ip
 8010812:	d102      	bne.n	801081a <__aeabi_dmul+0x222>
 8010814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010818:	d113      	bne.n	8010842 <__aeabi_dmul+0x24a>
 801081a:	ea95 0f0c 	teq	r5, ip
 801081e:	d105      	bne.n	801082c <__aeabi_dmul+0x234>
 8010820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010824:	bf1c      	itt	ne
 8010826:	4610      	movne	r0, r2
 8010828:	4619      	movne	r1, r3
 801082a:	d10a      	bne.n	8010842 <__aeabi_dmul+0x24a>
 801082c:	ea81 0103 	eor.w	r1, r1, r3
 8010830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801083c:	f04f 0000 	mov.w	r0, #0
 8010840:	bd70      	pop	{r4, r5, r6, pc}
 8010842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801084a:	bd70      	pop	{r4, r5, r6, pc}

0801084c <__aeabi_ddiv>:
 801084c:	b570      	push	{r4, r5, r6, lr}
 801084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801085a:	bf1d      	ittte	ne
 801085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010860:	ea94 0f0c 	teqne	r4, ip
 8010864:	ea95 0f0c 	teqne	r5, ip
 8010868:	f000 f8a7 	bleq	80109ba <__aeabi_ddiv+0x16e>
 801086c:	eba4 0405 	sub.w	r4, r4, r5
 8010870:	ea81 0e03 	eor.w	lr, r1, r3
 8010874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801087c:	f000 8088 	beq.w	8010990 <__aeabi_ddiv+0x144>
 8010880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80108a4:	429d      	cmp	r5, r3
 80108a6:	bf08      	it	eq
 80108a8:	4296      	cmpeq	r6, r2
 80108aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80108ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80108b2:	d202      	bcs.n	80108ba <__aeabi_ddiv+0x6e>
 80108b4:	085b      	lsrs	r3, r3, #1
 80108b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ba:	1ab6      	subs	r6, r6, r2
 80108bc:	eb65 0503 	sbc.w	r5, r5, r3
 80108c0:	085b      	lsrs	r3, r3, #1
 80108c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80108ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80108ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80108d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108d6:	bf22      	ittt	cs
 80108d8:	1ab6      	subcs	r6, r6, r2
 80108da:	4675      	movcs	r5, lr
 80108dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80108e0:	085b      	lsrs	r3, r3, #1
 80108e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80108ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108ee:	bf22      	ittt	cs
 80108f0:	1ab6      	subcs	r6, r6, r2
 80108f2:	4675      	movcs	r5, lr
 80108f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80108f8:	085b      	lsrs	r3, r3, #1
 80108fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010928:	ea55 0e06 	orrs.w	lr, r5, r6
 801092c:	d018      	beq.n	8010960 <__aeabi_ddiv+0x114>
 801092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801094a:	d1c0      	bne.n	80108ce <__aeabi_ddiv+0x82>
 801094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010950:	d10b      	bne.n	801096a <__aeabi_ddiv+0x11e>
 8010952:	ea41 0100 	orr.w	r1, r1, r0
 8010956:	f04f 0000 	mov.w	r0, #0
 801095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801095e:	e7b6      	b.n	80108ce <__aeabi_ddiv+0x82>
 8010960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010964:	bf04      	itt	eq
 8010966:	4301      	orreq	r1, r0
 8010968:	2000      	moveq	r0, #0
 801096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801096e:	bf88      	it	hi
 8010970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010974:	f63f aeaf 	bhi.w	80106d6 <__aeabi_dmul+0xde>
 8010978:	ebb5 0c03 	subs.w	ip, r5, r3
 801097c:	bf04      	itt	eq
 801097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8010982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010986:	f150 0000 	adcs.w	r0, r0, #0
 801098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801098e:	bd70      	pop	{r4, r5, r6, pc}
 8010990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8010994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8010998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801099c:	bfc2      	ittt	gt
 801099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109a6:	bd70      	popgt	{r4, r5, r6, pc}
 80109a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80109ac:	f04f 0e00 	mov.w	lr, #0
 80109b0:	3c01      	subs	r4, #1
 80109b2:	e690      	b.n	80106d6 <__aeabi_dmul+0xde>
 80109b4:	ea45 0e06 	orr.w	lr, r5, r6
 80109b8:	e68d      	b.n	80106d6 <__aeabi_dmul+0xde>
 80109ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109be:	ea94 0f0c 	teq	r4, ip
 80109c2:	bf08      	it	eq
 80109c4:	ea95 0f0c 	teqeq	r5, ip
 80109c8:	f43f af3b 	beq.w	8010842 <__aeabi_dmul+0x24a>
 80109cc:	ea94 0f0c 	teq	r4, ip
 80109d0:	d10a      	bne.n	80109e8 <__aeabi_ddiv+0x19c>
 80109d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80109d6:	f47f af34 	bne.w	8010842 <__aeabi_dmul+0x24a>
 80109da:	ea95 0f0c 	teq	r5, ip
 80109de:	f47f af25 	bne.w	801082c <__aeabi_dmul+0x234>
 80109e2:	4610      	mov	r0, r2
 80109e4:	4619      	mov	r1, r3
 80109e6:	e72c      	b.n	8010842 <__aeabi_dmul+0x24a>
 80109e8:	ea95 0f0c 	teq	r5, ip
 80109ec:	d106      	bne.n	80109fc <__aeabi_ddiv+0x1b0>
 80109ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80109f2:	f43f aefd 	beq.w	80107f0 <__aeabi_dmul+0x1f8>
 80109f6:	4610      	mov	r0, r2
 80109f8:	4619      	mov	r1, r3
 80109fa:	e722      	b.n	8010842 <__aeabi_dmul+0x24a>
 80109fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a00:	bf18      	it	ne
 8010a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a06:	f47f aec5 	bne.w	8010794 <__aeabi_dmul+0x19c>
 8010a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a0e:	f47f af0d 	bne.w	801082c <__aeabi_dmul+0x234>
 8010a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a16:	f47f aeeb 	bne.w	80107f0 <__aeabi_dmul+0x1f8>
 8010a1a:	e712      	b.n	8010842 <__aeabi_dmul+0x24a>

08010a1c <__gedf2>:
 8010a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a20:	e006      	b.n	8010a30 <__cmpdf2+0x4>
 8010a22:	bf00      	nop

08010a24 <__ledf2>:
 8010a24:	f04f 0c01 	mov.w	ip, #1
 8010a28:	e002      	b.n	8010a30 <__cmpdf2+0x4>
 8010a2a:	bf00      	nop

08010a2c <__cmpdf2>:
 8010a2c:	f04f 0c01 	mov.w	ip, #1
 8010a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a40:	bf18      	it	ne
 8010a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a46:	d01b      	beq.n	8010a80 <__cmpdf2+0x54>
 8010a48:	b001      	add	sp, #4
 8010a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a4e:	bf0c      	ite	eq
 8010a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a54:	ea91 0f03 	teqne	r1, r3
 8010a58:	bf02      	ittt	eq
 8010a5a:	ea90 0f02 	teqeq	r0, r2
 8010a5e:	2000      	moveq	r0, #0
 8010a60:	4770      	bxeq	lr
 8010a62:	f110 0f00 	cmn.w	r0, #0
 8010a66:	ea91 0f03 	teq	r1, r3
 8010a6a:	bf58      	it	pl
 8010a6c:	4299      	cmppl	r1, r3
 8010a6e:	bf08      	it	eq
 8010a70:	4290      	cmpeq	r0, r2
 8010a72:	bf2c      	ite	cs
 8010a74:	17d8      	asrcs	r0, r3, #31
 8010a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010a7a:	f040 0001 	orr.w	r0, r0, #1
 8010a7e:	4770      	bx	lr
 8010a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a88:	d102      	bne.n	8010a90 <__cmpdf2+0x64>
 8010a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010a8e:	d107      	bne.n	8010aa0 <__cmpdf2+0x74>
 8010a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a98:	d1d6      	bne.n	8010a48 <__cmpdf2+0x1c>
 8010a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010a9e:	d0d3      	beq.n	8010a48 <__cmpdf2+0x1c>
 8010aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop

08010aa8 <__aeabi_cdrcmple>:
 8010aa8:	4684      	mov	ip, r0
 8010aaa:	4610      	mov	r0, r2
 8010aac:	4662      	mov	r2, ip
 8010aae:	468c      	mov	ip, r1
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4663      	mov	r3, ip
 8010ab4:	e000      	b.n	8010ab8 <__aeabi_cdcmpeq>
 8010ab6:	bf00      	nop

08010ab8 <__aeabi_cdcmpeq>:
 8010ab8:	b501      	push	{r0, lr}
 8010aba:	f7ff ffb7 	bl	8010a2c <__cmpdf2>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	bf48      	it	mi
 8010ac2:	f110 0f00 	cmnmi.w	r0, #0
 8010ac6:	bd01      	pop	{r0, pc}

08010ac8 <__aeabi_dcmpeq>:
 8010ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010acc:	f7ff fff4 	bl	8010ab8 <__aeabi_cdcmpeq>
 8010ad0:	bf0c      	ite	eq
 8010ad2:	2001      	moveq	r0, #1
 8010ad4:	2000      	movne	r0, #0
 8010ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8010ada:	bf00      	nop

08010adc <__aeabi_dcmplt>:
 8010adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010ae0:	f7ff ffea 	bl	8010ab8 <__aeabi_cdcmpeq>
 8010ae4:	bf34      	ite	cc
 8010ae6:	2001      	movcc	r0, #1
 8010ae8:	2000      	movcs	r0, #0
 8010aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8010aee:	bf00      	nop

08010af0 <__aeabi_dcmple>:
 8010af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010af4:	f7ff ffe0 	bl	8010ab8 <__aeabi_cdcmpeq>
 8010af8:	bf94      	ite	ls
 8010afa:	2001      	movls	r0, #1
 8010afc:	2000      	movhi	r0, #0
 8010afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b02:	bf00      	nop

08010b04 <__aeabi_dcmpge>:
 8010b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b08:	f7ff ffce 	bl	8010aa8 <__aeabi_cdrcmple>
 8010b0c:	bf94      	ite	ls
 8010b0e:	2001      	movls	r0, #1
 8010b10:	2000      	movhi	r0, #0
 8010b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b16:	bf00      	nop

08010b18 <__aeabi_dcmpgt>:
 8010b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b1c:	f7ff ffc4 	bl	8010aa8 <__aeabi_cdrcmple>
 8010b20:	bf34      	ite	cc
 8010b22:	2001      	movcc	r0, #1
 8010b24:	2000      	movcs	r0, #0
 8010b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b2a:	bf00      	nop

08010b2c <__aeabi_dcmpun>:
 8010b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b34:	d102      	bne.n	8010b3c <__aeabi_dcmpun+0x10>
 8010b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b3a:	d10a      	bne.n	8010b52 <__aeabi_dcmpun+0x26>
 8010b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b44:	d102      	bne.n	8010b4c <__aeabi_dcmpun+0x20>
 8010b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b4a:	d102      	bne.n	8010b52 <__aeabi_dcmpun+0x26>
 8010b4c:	f04f 0000 	mov.w	r0, #0
 8010b50:	4770      	bx	lr
 8010b52:	f04f 0001 	mov.w	r0, #1
 8010b56:	4770      	bx	lr

08010b58 <__aeabi_d2iz>:
 8010b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b60:	d215      	bcs.n	8010b8e <__aeabi_d2iz+0x36>
 8010b62:	d511      	bpl.n	8010b88 <__aeabi_d2iz+0x30>
 8010b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b6c:	d912      	bls.n	8010b94 <__aeabi_d2iz+0x3c>
 8010b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8010b82:	bf18      	it	ne
 8010b84:	4240      	negne	r0, r0
 8010b86:	4770      	bx	lr
 8010b88:	f04f 0000 	mov.w	r0, #0
 8010b8c:	4770      	bx	lr
 8010b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010b92:	d105      	bne.n	8010ba0 <__aeabi_d2iz+0x48>
 8010b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010b98:	bf08      	it	eq
 8010b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010b9e:	4770      	bx	lr
 8010ba0:	f04f 0000 	mov.w	r0, #0
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop

08010ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010bae:	f000 fb4c 	bl	801124a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010bb2:	f000 f851 	bl	8010c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010bb6:	f000 f923 	bl	8010e00 <MX_GPIO_Init>
  MX_RNG_Init();
 8010bba:	f000 f8b1 	bl	8010d20 <MX_RNG_Init>
  MX_RTC_Init();
 8010bbe:	f000 f8c3 	bl	8010d48 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8010bc2:	f008 f86b 	bl	8018c9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8010bc6:	4b22      	ldr	r3, [pc, #136]	; (8010c50 <main+0xa8>)
 8010bc8:	221f      	movs	r2, #31
 8010bca:	619a      	str	r2, [r3, #24]
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8010bcc:	4b21      	ldr	r3, [pc, #132]	; (8010c54 <main+0xac>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	4b1f      	ldr	r3, [pc, #124]	; (8010c54 <main+0xac>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8010bdc:	60da      	str	r2, [r3, #12]
	for (int x = 0; x < 4; x++) {
 8010bde:	2300      	movs	r3, #0
 8010be0:	60fb      	str	r3, [r7, #12]
 8010be2:	e00c      	b.n	8010bfe <main+0x56>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8010be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010bec:	f000 fe5a 	bl	80118a4 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8010bf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010bf4:	f000 fb9e 	bl	8011334 <HAL_Delay>
	for (int x = 0; x < 4; x++) {
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	60fb      	str	r3, [r7, #12]
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2b03      	cmp	r3, #3
 8010c02:	ddef      	ble.n	8010be4 <main+0x3c>
	}
	int timeSleep = 10;
 8010c04:	230a      	movs	r3, #10
 8010c06:	607b      	str	r3, [r7, #4]
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, timeSleep, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2204      	movs	r2, #4
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	4811      	ldr	r0, [pc, #68]	; (8010c54 <main+0xac>)
 8010c10:	f004 f832 	bl	8014c78 <HAL_RTCEx_SetWakeUpTimer_IT>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d001      	beq.n	8010c1e <main+0x76>
		Error_Handler();
 8010c1a:	f000 f93d 	bl	8010e98 <Error_Handler>
	HAL_Delay(3000);
 8010c1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8010c22:	f000 fb87 	bl	8011334 <HAL_Delay>

	for (int x = 0; x < 4; x++) {
 8010c26:	2300      	movs	r3, #0
 8010c28:	60bb      	str	r3, [r7, #8]
 8010c2a:	e00b      	b.n	8010c44 <main+0x9c>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8010c2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c34:	f000 fe36 	bl	80118a4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8010c38:	2064      	movs	r0, #100	; 0x64
 8010c3a:	f000 fb7b 	bl	8011334 <HAL_Delay>
	for (int x = 0; x < 4; x++) {
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	3301      	adds	r3, #1
 8010c42:	60bb      	str	r3, [r7, #8]
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	2b03      	cmp	r3, #3
 8010c48:	ddf0      	ble.n	8010c2c <main+0x84>
	}
	HAL_PWR_EnterSTANDBYMode();
 8010c4a:	f002 fbe1 	bl	8013410 <HAL_PWR_EnterSTANDBYMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8010c4e:	e7fe      	b.n	8010c4e <main+0xa6>
 8010c50:	40007000 	.word	0x40007000
 8010c54:	2000038c 	.word	0x2000038c

08010c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b096      	sub	sp, #88	; 0x58
 8010c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010c5e:	f107 0314 	add.w	r3, r7, #20
 8010c62:	2244      	movs	r2, #68	; 0x44
 8010c64:	2100      	movs	r1, #0
 8010c66:	4618      	mov	r0, r3
 8010c68:	f008 fdca 	bl	8019800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010c6c:	463b      	mov	r3, r7
 8010c6e:	2200      	movs	r2, #0
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	605a      	str	r2, [r3, #4]
 8010c74:	609a      	str	r2, [r3, #8]
 8010c76:	60da      	str	r2, [r3, #12]
 8010c78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8010c7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010c7e:	f002 fbef 	bl	8013460 <HAL_PWREx_ControlVoltageScaling>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d001      	beq.n	8010c8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8010c88:	f000 f906 	bl	8010e98 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8010c8c:	f002 fbb0 	bl	80133f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8010c90:	4b22      	ldr	r3, [pc, #136]	; (8010d1c <SystemClock_Config+0xc4>)
 8010c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c96:	4a21      	ldr	r2, [pc, #132]	; (8010d1c <SystemClock_Config+0xc4>)
 8010c98:	f023 0318 	bic.w	r3, r3, #24
 8010c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8010ca0:	2334      	movs	r3, #52	; 0x34
 8010ca2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8010cac:	2301      	movs	r3, #1
 8010cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8010cb4:	2360      	movs	r3, #96	; 0x60
 8010cb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010cb8:	2302      	movs	r3, #2
 8010cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8010cc4:	2328      	movs	r3, #40	; 0x28
 8010cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8010cc8:	2307      	movs	r3, #7
 8010cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8010ccc:	2302      	movs	r3, #2
 8010cce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8010cd0:	2302      	movs	r3, #2
 8010cd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010cd4:	f107 0314 	add.w	r3, r7, #20
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f002 fc27 	bl	801352c <HAL_RCC_OscConfig>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d001      	beq.n	8010ce8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8010ce4:	f000 f8d8 	bl	8010e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010ce8:	230f      	movs	r3, #15
 8010cea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010cec:	2303      	movs	r3, #3
 8010cee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8010cfc:	463b      	mov	r3, r7
 8010cfe:	2104      	movs	r1, #4
 8010d00:	4618      	mov	r0, r3
 8010d02:	f003 f827 	bl	8013d54 <HAL_RCC_ClockConfig>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d001      	beq.n	8010d10 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8010d0c:	f000 f8c4 	bl	8010e98 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8010d10:	f003 fc02 	bl	8014518 <HAL_RCCEx_EnableMSIPLLMode>
}
 8010d14:	bf00      	nop
 8010d16:	3758      	adds	r7, #88	; 0x58
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	40021000 	.word	0x40021000

08010d20 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8010d24:	4b06      	ldr	r3, [pc, #24]	; (8010d40 <MX_RNG_Init+0x20>)
 8010d26:	4a07      	ldr	r2, [pc, #28]	; (8010d44 <MX_RNG_Init+0x24>)
 8010d28:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8010d2a:	4805      	ldr	r0, [pc, #20]	; (8010d40 <MX_RNG_Init+0x20>)
 8010d2c:	f003 fcf6 	bl	801471c <HAL_RNG_Init>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d001      	beq.n	8010d3a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8010d36:	f000 f8af 	bl	8010e98 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8010d3a:	bf00      	nop
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	2000037c 	.word	0x2000037c
 8010d44:	50060800 	.word	0x50060800

08010d48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b086      	sub	sp, #24
 8010d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8010d4e:	1d3b      	adds	r3, r7, #4
 8010d50:	2200      	movs	r2, #0
 8010d52:	601a      	str	r2, [r3, #0]
 8010d54:	605a      	str	r2, [r3, #4]
 8010d56:	609a      	str	r2, [r3, #8]
 8010d58:	60da      	str	r2, [r3, #12]
 8010d5a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8010d60:	4b25      	ldr	r3, [pc, #148]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010d62:	4a26      	ldr	r2, [pc, #152]	; (8010dfc <MX_RTC_Init+0xb4>)
 8010d64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8010d66:	4b24      	ldr	r3, [pc, #144]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010d68:	2200      	movs	r2, #0
 8010d6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8010d6c:	4b22      	ldr	r3, [pc, #136]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010d6e:	227f      	movs	r2, #127	; 0x7f
 8010d70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8010d72:	4b21      	ldr	r3, [pc, #132]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010d74:	22ff      	movs	r2, #255	; 0xff
 8010d76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8010d78:	4b1f      	ldr	r3, [pc, #124]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8010d7e:	4b1e      	ldr	r3, [pc, #120]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010d80:	2200      	movs	r2, #0
 8010d82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8010d84:	4b1c      	ldr	r3, [pc, #112]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010d86:	2200      	movs	r2, #0
 8010d88:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8010d8a:	4b1b      	ldr	r3, [pc, #108]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8010d90:	4819      	ldr	r0, [pc, #100]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010d92:	f003 fd1a 	bl	80147ca <HAL_RTC_Init>
 8010d96:	4603      	mov	r3, r0
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d001      	beq.n	8010da0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8010d9c:	f000 f87c 	bl	8010e98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8010da0:	2300      	movs	r3, #0
 8010da2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8010da4:	2300      	movs	r3, #0
 8010da6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8010da8:	2300      	movs	r3, #0
 8010daa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010dac:	2300      	movs	r3, #0
 8010dae:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8010db0:	2300      	movs	r3, #0
 8010db2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8010db4:	1d3b      	adds	r3, r7, #4
 8010db6:	2201      	movs	r2, #1
 8010db8:	4619      	mov	r1, r3
 8010dba:	480f      	ldr	r0, [pc, #60]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010dbc:	f003 fd80 	bl	80148c0 <HAL_RTC_SetTime>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d001      	beq.n	8010dca <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8010dc6:	f000 f867 	bl	8010e98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8010dca:	2301      	movs	r3, #1
 8010dcc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8010dda:	463b      	mov	r3, r7
 8010ddc:	2201      	movs	r2, #1
 8010dde:	4619      	mov	r1, r3
 8010de0:	4805      	ldr	r0, [pc, #20]	; (8010df8 <MX_RTC_Init+0xb0>)
 8010de2:	f003 fe0a 	bl	80149fa <HAL_RTC_SetDate>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d001      	beq.n	8010df0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8010dec:	f000 f854 	bl	8010e98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8010df0:	bf00      	nop
 8010df2:	3718      	adds	r7, #24
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	2000038c 	.word	0x2000038c
 8010dfc:	40002800 	.word	0x40002800

08010e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b088      	sub	sp, #32
 8010e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e06:	f107 030c 	add.w	r3, r7, #12
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	601a      	str	r2, [r3, #0]
 8010e0e:	605a      	str	r2, [r3, #4]
 8010e10:	609a      	str	r2, [r3, #8]
 8010e12:	60da      	str	r2, [r3, #12]
 8010e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010e16:	4b1f      	ldr	r3, [pc, #124]	; (8010e94 <MX_GPIO_Init+0x94>)
 8010e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e1a:	4a1e      	ldr	r2, [pc, #120]	; (8010e94 <MX_GPIO_Init+0x94>)
 8010e1c:	f043 0304 	orr.w	r3, r3, #4
 8010e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010e22:	4b1c      	ldr	r3, [pc, #112]	; (8010e94 <MX_GPIO_Init+0x94>)
 8010e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e26:	f003 0304 	and.w	r3, r3, #4
 8010e2a:	60bb      	str	r3, [r7, #8]
 8010e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e2e:	4b19      	ldr	r3, [pc, #100]	; (8010e94 <MX_GPIO_Init+0x94>)
 8010e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e32:	4a18      	ldr	r2, [pc, #96]	; (8010e94 <MX_GPIO_Init+0x94>)
 8010e34:	f043 0301 	orr.w	r3, r3, #1
 8010e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010e3a:	4b16      	ldr	r3, [pc, #88]	; (8010e94 <MX_GPIO_Init+0x94>)
 8010e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e3e:	f003 0301 	and.w	r3, r3, #1
 8010e42:	607b      	str	r3, [r7, #4]
 8010e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010e46:	4b13      	ldr	r3, [pc, #76]	; (8010e94 <MX_GPIO_Init+0x94>)
 8010e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e4a:	4a12      	ldr	r2, [pc, #72]	; (8010e94 <MX_GPIO_Init+0x94>)
 8010e4c:	f043 0302 	orr.w	r3, r3, #2
 8010e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010e52:	4b10      	ldr	r3, [pc, #64]	; (8010e94 <MX_GPIO_Init+0x94>)
 8010e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e56:	f003 0302 	and.w	r3, r3, #2
 8010e5a:	603b      	str	r3, [r7, #0]
 8010e5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010e68:	f000 fd04 	bl	8011874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8010e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010e72:	2301      	movs	r3, #1
 8010e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8010e7e:	f107 030c 	add.w	r3, r7, #12
 8010e82:	4619      	mov	r1, r3
 8010e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010e88:	f000 fb8a 	bl	80115a0 <HAL_GPIO_Init>

}
 8010e8c:	bf00      	nop
 8010e8e:	3720      	adds	r7, #32
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	40021000 	.word	0x40021000

08010e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010e9c:	b672      	cpsid	i
}
 8010e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010ea0:	e7fe      	b.n	8010ea0 <Error_Handler+0x8>
	...

08010ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010eaa:	4b0f      	ldr	r3, [pc, #60]	; (8010ee8 <HAL_MspInit+0x44>)
 8010eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010eae:	4a0e      	ldr	r2, [pc, #56]	; (8010ee8 <HAL_MspInit+0x44>)
 8010eb0:	f043 0301 	orr.w	r3, r3, #1
 8010eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8010eb6:	4b0c      	ldr	r3, [pc, #48]	; (8010ee8 <HAL_MspInit+0x44>)
 8010eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010eba:	f003 0301 	and.w	r3, r3, #1
 8010ebe:	607b      	str	r3, [r7, #4]
 8010ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010ec2:	4b09      	ldr	r3, [pc, #36]	; (8010ee8 <HAL_MspInit+0x44>)
 8010ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ec6:	4a08      	ldr	r2, [pc, #32]	; (8010ee8 <HAL_MspInit+0x44>)
 8010ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8010ece:	4b06      	ldr	r3, [pc, #24]	; (8010ee8 <HAL_MspInit+0x44>)
 8010ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ed6:	603b      	str	r3, [r7, #0]
 8010ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010eda:	bf00      	nop
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr
 8010ee6:	bf00      	nop
 8010ee8:	40021000 	.word	0x40021000

08010eec <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b098      	sub	sp, #96	; 0x60
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010ef4:	f107 030c 	add.w	r3, r7, #12
 8010ef8:	2254      	movs	r2, #84	; 0x54
 8010efa:	2100      	movs	r1, #0
 8010efc:	4618      	mov	r0, r3
 8010efe:	f008 fc7f 	bl	8019800 <memset>
  if(hrng->Instance==RNG)
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	4a11      	ldr	r2, [pc, #68]	; (8010f4c <HAL_RNG_MspInit+0x60>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d11a      	bne.n	8010f42 <HAL_RNG_MspInit+0x56>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8010f0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010f10:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8010f12:	2300      	movs	r3, #0
 8010f14:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010f16:	f107 030c 	add.w	r3, r7, #12
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f003 f906 	bl	801412c <HAL_RCCEx_PeriphCLKConfig>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d001      	beq.n	8010f2a <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 8010f26:	f7ff ffb7 	bl	8010e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8010f2a:	4b09      	ldr	r3, [pc, #36]	; (8010f50 <HAL_RNG_MspInit+0x64>)
 8010f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f2e:	4a08      	ldr	r2, [pc, #32]	; (8010f50 <HAL_RNG_MspInit+0x64>)
 8010f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010f36:	4b06      	ldr	r3, [pc, #24]	; (8010f50 <HAL_RNG_MspInit+0x64>)
 8010f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010f3e:	60bb      	str	r3, [r7, #8]
 8010f40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8010f42:	bf00      	nop
 8010f44:	3760      	adds	r7, #96	; 0x60
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
 8010f4a:	bf00      	nop
 8010f4c:	50060800 	.word	0x50060800
 8010f50:	40021000 	.word	0x40021000

08010f54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b098      	sub	sp, #96	; 0x60
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010f5c:	f107 030c 	add.w	r3, r7, #12
 8010f60:	2254      	movs	r2, #84	; 0x54
 8010f62:	2100      	movs	r1, #0
 8010f64:	4618      	mov	r0, r3
 8010f66:	f008 fc4b 	bl	8019800 <memset>
  if(hrtc->Instance==RTC)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	4a13      	ldr	r2, [pc, #76]	; (8010fbc <HAL_RTC_MspInit+0x68>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d11f      	bne.n	8010fb4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8010f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010f78:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8010f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010f80:	f107 030c 	add.w	r3, r7, #12
 8010f84:	4618      	mov	r0, r3
 8010f86:	f003 f8d1 	bl	801412c <HAL_RCCEx_PeriphCLKConfig>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d001      	beq.n	8010f94 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8010f90:	f7ff ff82 	bl	8010e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8010f94:	4b0a      	ldr	r3, [pc, #40]	; (8010fc0 <HAL_RTC_MspInit+0x6c>)
 8010f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f9a:	4a09      	ldr	r2, [pc, #36]	; (8010fc0 <HAL_RTC_MspInit+0x6c>)
 8010f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	2003      	movs	r0, #3
 8010faa:	f000 fac2 	bl	8011532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8010fae:	2003      	movs	r0, #3
 8010fb0:	f000 fadb 	bl	801156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8010fb4:	bf00      	nop
 8010fb6:	3760      	adds	r7, #96	; 0x60
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}
 8010fbc:	40002800 	.word	0x40002800
 8010fc0:	40021000 	.word	0x40021000

08010fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010fc8:	e7fe      	b.n	8010fc8 <NMI_Handler+0x4>

08010fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010fca:	b480      	push	{r7}
 8010fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010fce:	e7fe      	b.n	8010fce <HardFault_Handler+0x4>

08010fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010fd4:	e7fe      	b.n	8010fd4 <MemManage_Handler+0x4>

08010fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010fd6:	b480      	push	{r7}
 8010fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010fda:	e7fe      	b.n	8010fda <BusFault_Handler+0x4>

08010fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010fe0:	e7fe      	b.n	8010fe0 <UsageFault_Handler+0x4>

08010fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010fe2:	b480      	push	{r7}
 8010fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010fe6:	bf00      	nop
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010ff4:	bf00      	nop
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr

08010ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010ffe:	b480      	push	{r7}
 8011000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011002:	bf00      	nop
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr

0801100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011010:	f000 f970 	bl	80112f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011014:	bf00      	nop
 8011016:	bd80      	pop	{r7, pc}

08011018 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 801101c:	4802      	ldr	r0, [pc, #8]	; (8011028 <RTC_WKUP_IRQHandler+0x10>)
 801101e:	f003 febf 	bl	8014da0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8011022:	bf00      	nop
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	2000038c 	.word	0x2000038c

0801102c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8011030:	4802      	ldr	r0, [pc, #8]	; (801103c <USB_IRQHandler+0x10>)
 8011032:	f000 fd8a 	bl	8011b4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8011036:	bf00      	nop
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	2000105c 	.word	0x2000105c

08011040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011040:	b480      	push	{r7}
 8011042:	af00      	add	r7, sp, #0
	return 1;
 8011044:	2301      	movs	r3, #1
}
 8011046:	4618      	mov	r0, r3
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <_kill>:

int _kill(int pid, int sig)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801105a:	f008 fba7 	bl	80197ac <__errno>
 801105e:	4603      	mov	r3, r0
 8011060:	2216      	movs	r2, #22
 8011062:	601a      	str	r2, [r3, #0]
	return -1;
 8011064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011068:	4618      	mov	r0, r3
 801106a:	3708      	adds	r7, #8
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <_exit>:

void _exit (int status)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8011078:	f04f 31ff 	mov.w	r1, #4294967295
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f7ff ffe7 	bl	8011050 <_kill>
	while (1) {}		/* Make sure we hang here */
 8011082:	e7fe      	b.n	8011082 <_exit+0x12>

08011084 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011090:	2300      	movs	r3, #0
 8011092:	617b      	str	r3, [r7, #20]
 8011094:	e00a      	b.n	80110ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011096:	f3af 8000 	nop.w
 801109a:	4601      	mov	r1, r0
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	1c5a      	adds	r2, r3, #1
 80110a0:	60ba      	str	r2, [r7, #8]
 80110a2:	b2ca      	uxtb	r2, r1
 80110a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	3301      	adds	r3, #1
 80110aa:	617b      	str	r3, [r7, #20]
 80110ac:	697a      	ldr	r2, [r7, #20]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	dbf0      	blt.n	8011096 <_read+0x12>
	}

return len;
 80110b4:	687b      	ldr	r3, [r7, #4]
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3718      	adds	r7, #24
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}

080110be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b086      	sub	sp, #24
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	60f8      	str	r0, [r7, #12]
 80110c6:	60b9      	str	r1, [r7, #8]
 80110c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80110ca:	2300      	movs	r3, #0
 80110cc:	617b      	str	r3, [r7, #20]
 80110ce:	e009      	b.n	80110e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	1c5a      	adds	r2, r3, #1
 80110d4:	60ba      	str	r2, [r7, #8]
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	4618      	mov	r0, r3
 80110da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	3301      	adds	r3, #1
 80110e2:	617b      	str	r3, [r7, #20]
 80110e4:	697a      	ldr	r2, [r7, #20]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	dbf1      	blt.n	80110d0 <_write+0x12>
	}
	return len;
 80110ec:	687b      	ldr	r3, [r7, #4]
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3718      	adds	r7, #24
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}

080110f6 <_close>:

int _close(int file)
{
 80110f6:	b480      	push	{r7}
 80110f8:	b083      	sub	sp, #12
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	6078      	str	r0, [r7, #4]
	return -1;
 80110fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011102:	4618      	mov	r0, r3
 8011104:	370c      	adds	r7, #12
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801110e:	b480      	push	{r7}
 8011110:	b083      	sub	sp, #12
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801111e:	605a      	str	r2, [r3, #4]
	return 0;
 8011120:	2300      	movs	r3, #0
}
 8011122:	4618      	mov	r0, r3
 8011124:	370c      	adds	r7, #12
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr

0801112e <_isatty>:

int _isatty(int file)
{
 801112e:	b480      	push	{r7}
 8011130:	b083      	sub	sp, #12
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
	return 1;
 8011136:	2301      	movs	r3, #1
}
 8011138:	4618      	mov	r0, r3
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011144:	b480      	push	{r7}
 8011146:	b085      	sub	sp, #20
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]
	return 0;
 8011150:	2300      	movs	r3, #0
}
 8011152:	4618      	mov	r0, r3
 8011154:	3714      	adds	r7, #20
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
	...

08011160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011168:	4a14      	ldr	r2, [pc, #80]	; (80111bc <_sbrk+0x5c>)
 801116a:	4b15      	ldr	r3, [pc, #84]	; (80111c0 <_sbrk+0x60>)
 801116c:	1ad3      	subs	r3, r2, r3
 801116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011174:	4b13      	ldr	r3, [pc, #76]	; (80111c4 <_sbrk+0x64>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d102      	bne.n	8011182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801117c:	4b11      	ldr	r3, [pc, #68]	; (80111c4 <_sbrk+0x64>)
 801117e:	4a12      	ldr	r2, [pc, #72]	; (80111c8 <_sbrk+0x68>)
 8011180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011182:	4b10      	ldr	r3, [pc, #64]	; (80111c4 <_sbrk+0x64>)
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4413      	add	r3, r2
 801118a:	693a      	ldr	r2, [r7, #16]
 801118c:	429a      	cmp	r2, r3
 801118e:	d207      	bcs.n	80111a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011190:	f008 fb0c 	bl	80197ac <__errno>
 8011194:	4603      	mov	r3, r0
 8011196:	220c      	movs	r2, #12
 8011198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801119a:	f04f 33ff 	mov.w	r3, #4294967295
 801119e:	e009      	b.n	80111b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80111a0:	4b08      	ldr	r3, [pc, #32]	; (80111c4 <_sbrk+0x64>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80111a6:	4b07      	ldr	r3, [pc, #28]	; (80111c4 <_sbrk+0x64>)
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4413      	add	r3, r2
 80111ae:	4a05      	ldr	r2, [pc, #20]	; (80111c4 <_sbrk+0x64>)
 80111b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80111b2:	68fb      	ldr	r3, [r7, #12]
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3718      	adds	r7, #24
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	20010000 	.word	0x20010000
 80111c0:	00000400 	.word	0x00000400
 80111c4:	200003b0 	.word	0x200003b0
 80111c8:	20001588 	.word	0x20001588

080111cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80111cc:	b480      	push	{r7}
 80111ce:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 80111d0:	4b07      	ldr	r3, [pc, #28]	; (80111f0 <SystemInit+0x24>)
 80111d2:	4a08      	ldr	r2, [pc, #32]	; (80111f4 <SystemInit+0x28>)
 80111d4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80111d6:	4b06      	ldr	r3, [pc, #24]	; (80111f0 <SystemInit+0x24>)
 80111d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111dc:	4a04      	ldr	r2, [pc, #16]	; (80111f0 <SystemInit+0x24>)
 80111de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80111e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80111e6:	bf00      	nop
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr
 80111f0:	e000ed00 	.word	0xe000ed00
 80111f4:	08010000 	.word	0x08010000

080111f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80111f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011230 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80111fc:	f7ff ffe6 	bl	80111cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011200:	480c      	ldr	r0, [pc, #48]	; (8011234 <LoopForever+0x6>)
  ldr r1, =_edata
 8011202:	490d      	ldr	r1, [pc, #52]	; (8011238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8011204:	4a0d      	ldr	r2, [pc, #52]	; (801123c <LoopForever+0xe>)
  movs r3, #0
 8011206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011208:	e002      	b.n	8011210 <LoopCopyDataInit>

0801120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801120e:	3304      	adds	r3, #4

08011210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011214:	d3f9      	bcc.n	801120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011216:	4a0a      	ldr	r2, [pc, #40]	; (8011240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011218:	4c0a      	ldr	r4, [pc, #40]	; (8011244 <LoopForever+0x16>)
  movs r3, #0
 801121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801121c:	e001      	b.n	8011222 <LoopFillZerobss>

0801121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011220:	3204      	adds	r2, #4

08011222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011224:	d3fb      	bcc.n	801121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8011226:	f008 fac7 	bl	80197b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801122a:	f7ff fcbd 	bl	8010ba8 <main>

0801122e <LoopForever>:

LoopForever:
    b LoopForever
 801122e:	e7fe      	b.n	801122e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8011230:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8011234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011238:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 801123c:	0801c6c4 	.word	0x0801c6c4
  ldr r2, =_sbss
 8011240:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8011244:	20001588 	.word	0x20001588

08011248 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8011248:	e7fe      	b.n	8011248 <ADC1_IRQHandler>

0801124a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801124a:	b580      	push	{r7, lr}
 801124c:	b082      	sub	sp, #8
 801124e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011254:	2003      	movs	r0, #3
 8011256:	f000 f961 	bl	801151c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801125a:	200f      	movs	r0, #15
 801125c:	f000 f80e 	bl	801127c <HAL_InitTick>
 8011260:	4603      	mov	r3, r0
 8011262:	2b00      	cmp	r3, #0
 8011264:	d002      	beq.n	801126c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8011266:	2301      	movs	r3, #1
 8011268:	71fb      	strb	r3, [r7, #7]
 801126a:	e001      	b.n	8011270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801126c:	f7ff fe1a 	bl	8010ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011270:	79fb      	ldrb	r3, [r7, #7]
}
 8011272:	4618      	mov	r0, r3
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
	...

0801127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b084      	sub	sp, #16
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8011284:	2300      	movs	r3, #0
 8011286:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8011288:	4b17      	ldr	r3, [pc, #92]	; (80112e8 <HAL_InitTick+0x6c>)
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d023      	beq.n	80112d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8011290:	4b16      	ldr	r3, [pc, #88]	; (80112ec <HAL_InitTick+0x70>)
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	4b14      	ldr	r3, [pc, #80]	; (80112e8 <HAL_InitTick+0x6c>)
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	4619      	mov	r1, r3
 801129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80112a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80112a6:	4618      	mov	r0, r3
 80112a8:	f000 f96d 	bl	8011586 <HAL_SYSTICK_Config>
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d10f      	bne.n	80112d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2b0f      	cmp	r3, #15
 80112b6:	d809      	bhi.n	80112cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80112b8:	2200      	movs	r2, #0
 80112ba:	6879      	ldr	r1, [r7, #4]
 80112bc:	f04f 30ff 	mov.w	r0, #4294967295
 80112c0:	f000 f937 	bl	8011532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80112c4:	4a0a      	ldr	r2, [pc, #40]	; (80112f0 <HAL_InitTick+0x74>)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6013      	str	r3, [r2, #0]
 80112ca:	e007      	b.n	80112dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80112cc:	2301      	movs	r3, #1
 80112ce:	73fb      	strb	r3, [r7, #15]
 80112d0:	e004      	b.n	80112dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80112d2:	2301      	movs	r3, #1
 80112d4:	73fb      	strb	r3, [r7, #15]
 80112d6:	e001      	b.n	80112dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	20000008 	.word	0x20000008
 80112ec:	20000000 	.word	0x20000000
 80112f0:	20000004 	.word	0x20000004

080112f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80112f4:	b480      	push	{r7}
 80112f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80112f8:	4b06      	ldr	r3, [pc, #24]	; (8011314 <HAL_IncTick+0x20>)
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	461a      	mov	r2, r3
 80112fe:	4b06      	ldr	r3, [pc, #24]	; (8011318 <HAL_IncTick+0x24>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	4413      	add	r3, r2
 8011304:	4a04      	ldr	r2, [pc, #16]	; (8011318 <HAL_IncTick+0x24>)
 8011306:	6013      	str	r3, [r2, #0]
}
 8011308:	bf00      	nop
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop
 8011314:	20000008 	.word	0x20000008
 8011318:	200003b4 	.word	0x200003b4

0801131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801131c:	b480      	push	{r7}
 801131e:	af00      	add	r7, sp, #0
  return uwTick;
 8011320:	4b03      	ldr	r3, [pc, #12]	; (8011330 <HAL_GetTick+0x14>)
 8011322:	681b      	ldr	r3, [r3, #0]
}
 8011324:	4618      	mov	r0, r3
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	200003b4 	.word	0x200003b4

08011334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801133c:	f7ff ffee 	bl	801131c <HAL_GetTick>
 8011340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801134c:	d005      	beq.n	801135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 801134e:	4b0a      	ldr	r3, [pc, #40]	; (8011378 <HAL_Delay+0x44>)
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	461a      	mov	r2, r3
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	4413      	add	r3, r2
 8011358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801135a:	bf00      	nop
 801135c:	f7ff ffde 	bl	801131c <HAL_GetTick>
 8011360:	4602      	mov	r2, r0
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	68fa      	ldr	r2, [r7, #12]
 8011368:	429a      	cmp	r2, r3
 801136a:	d8f7      	bhi.n	801135c <HAL_Delay+0x28>
  {
  }
}
 801136c:	bf00      	nop
 801136e:	bf00      	nop
 8011370:	3710      	adds	r7, #16
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	20000008 	.word	0x20000008

0801137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801137c:	b480      	push	{r7}
 801137e:	b085      	sub	sp, #20
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f003 0307 	and.w	r3, r3, #7
 801138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801138c:	4b0c      	ldr	r3, [pc, #48]	; (80113c0 <__NVIC_SetPriorityGrouping+0x44>)
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011392:	68ba      	ldr	r2, [r7, #8]
 8011394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011398:	4013      	ands	r3, r2
 801139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80113a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80113a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80113ae:	4a04      	ldr	r2, [pc, #16]	; (80113c0 <__NVIC_SetPriorityGrouping+0x44>)
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	60d3      	str	r3, [r2, #12]
}
 80113b4:	bf00      	nop
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr
 80113c0:	e000ed00 	.word	0xe000ed00

080113c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80113c4:	b480      	push	{r7}
 80113c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80113c8:	4b04      	ldr	r3, [pc, #16]	; (80113dc <__NVIC_GetPriorityGrouping+0x18>)
 80113ca:	68db      	ldr	r3, [r3, #12]
 80113cc:	0a1b      	lsrs	r3, r3, #8
 80113ce:	f003 0307 	and.w	r3, r3, #7
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr
 80113dc:	e000ed00 	.word	0xe000ed00

080113e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	4603      	mov	r3, r0
 80113e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80113ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	db0b      	blt.n	801140a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80113f2:	79fb      	ldrb	r3, [r7, #7]
 80113f4:	f003 021f 	and.w	r2, r3, #31
 80113f8:	4907      	ldr	r1, [pc, #28]	; (8011418 <__NVIC_EnableIRQ+0x38>)
 80113fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113fe:	095b      	lsrs	r3, r3, #5
 8011400:	2001      	movs	r0, #1
 8011402:	fa00 f202 	lsl.w	r2, r0, r2
 8011406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801140a:	bf00      	nop
 801140c:	370c      	adds	r7, #12
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	e000e100 	.word	0xe000e100

0801141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	4603      	mov	r3, r0
 8011424:	6039      	str	r1, [r7, #0]
 8011426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801142c:	2b00      	cmp	r3, #0
 801142e:	db0a      	blt.n	8011446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	b2da      	uxtb	r2, r3
 8011434:	490c      	ldr	r1, [pc, #48]	; (8011468 <__NVIC_SetPriority+0x4c>)
 8011436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801143a:	0112      	lsls	r2, r2, #4
 801143c:	b2d2      	uxtb	r2, r2
 801143e:	440b      	add	r3, r1
 8011440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011444:	e00a      	b.n	801145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	b2da      	uxtb	r2, r3
 801144a:	4908      	ldr	r1, [pc, #32]	; (801146c <__NVIC_SetPriority+0x50>)
 801144c:	79fb      	ldrb	r3, [r7, #7]
 801144e:	f003 030f 	and.w	r3, r3, #15
 8011452:	3b04      	subs	r3, #4
 8011454:	0112      	lsls	r2, r2, #4
 8011456:	b2d2      	uxtb	r2, r2
 8011458:	440b      	add	r3, r1
 801145a:	761a      	strb	r2, [r3, #24]
}
 801145c:	bf00      	nop
 801145e:	370c      	adds	r7, #12
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr
 8011468:	e000e100 	.word	0xe000e100
 801146c:	e000ed00 	.word	0xe000ed00

08011470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011470:	b480      	push	{r7}
 8011472:	b089      	sub	sp, #36	; 0x24
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	60b9      	str	r1, [r7, #8]
 801147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f003 0307 	and.w	r3, r3, #7
 8011482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	f1c3 0307 	rsb	r3, r3, #7
 801148a:	2b04      	cmp	r3, #4
 801148c:	bf28      	it	cs
 801148e:	2304      	movcs	r3, #4
 8011490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	3304      	adds	r3, #4
 8011496:	2b06      	cmp	r3, #6
 8011498:	d902      	bls.n	80114a0 <NVIC_EncodePriority+0x30>
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	3b03      	subs	r3, #3
 801149e:	e000      	b.n	80114a2 <NVIC_EncodePriority+0x32>
 80114a0:	2300      	movs	r3, #0
 80114a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80114a4:	f04f 32ff 	mov.w	r2, #4294967295
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	fa02 f303 	lsl.w	r3, r2, r3
 80114ae:	43da      	mvns	r2, r3
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	401a      	ands	r2, r3
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80114b8:	f04f 31ff 	mov.w	r1, #4294967295
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	fa01 f303 	lsl.w	r3, r1, r3
 80114c2:	43d9      	mvns	r1, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80114c8:	4313      	orrs	r3, r2
         );
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3724      	adds	r7, #36	; 0x24
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
	...

080114d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	3b01      	subs	r3, #1
 80114e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80114e8:	d301      	bcc.n	80114ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80114ea:	2301      	movs	r3, #1
 80114ec:	e00f      	b.n	801150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80114ee:	4a0a      	ldr	r2, [pc, #40]	; (8011518 <SysTick_Config+0x40>)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	3b01      	subs	r3, #1
 80114f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80114f6:	210f      	movs	r1, #15
 80114f8:	f04f 30ff 	mov.w	r0, #4294967295
 80114fc:	f7ff ff8e 	bl	801141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011500:	4b05      	ldr	r3, [pc, #20]	; (8011518 <SysTick_Config+0x40>)
 8011502:	2200      	movs	r2, #0
 8011504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011506:	4b04      	ldr	r3, [pc, #16]	; (8011518 <SysTick_Config+0x40>)
 8011508:	2207      	movs	r2, #7
 801150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801150c:	2300      	movs	r3, #0
}
 801150e:	4618      	mov	r0, r3
 8011510:	3708      	adds	r7, #8
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	e000e010 	.word	0xe000e010

0801151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7ff ff29 	bl	801137c <__NVIC_SetPriorityGrouping>
}
 801152a:	bf00      	nop
 801152c:	3708      	adds	r7, #8
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}

08011532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011532:	b580      	push	{r7, lr}
 8011534:	b086      	sub	sp, #24
 8011536:	af00      	add	r7, sp, #0
 8011538:	4603      	mov	r3, r0
 801153a:	60b9      	str	r1, [r7, #8]
 801153c:	607a      	str	r2, [r7, #4]
 801153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8011540:	2300      	movs	r3, #0
 8011542:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011544:	f7ff ff3e 	bl	80113c4 <__NVIC_GetPriorityGrouping>
 8011548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	68b9      	ldr	r1, [r7, #8]
 801154e:	6978      	ldr	r0, [r7, #20]
 8011550:	f7ff ff8e 	bl	8011470 <NVIC_EncodePriority>
 8011554:	4602      	mov	r2, r0
 8011556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801155a:	4611      	mov	r1, r2
 801155c:	4618      	mov	r0, r3
 801155e:	f7ff ff5d 	bl	801141c <__NVIC_SetPriority>
}
 8011562:	bf00      	nop
 8011564:	3718      	adds	r7, #24
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b082      	sub	sp, #8
 801156e:	af00      	add	r7, sp, #0
 8011570:	4603      	mov	r3, r0
 8011572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011578:	4618      	mov	r0, r3
 801157a:	f7ff ff31 	bl	80113e0 <__NVIC_EnableIRQ>
}
 801157e:	bf00      	nop
 8011580:	3708      	adds	r7, #8
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b082      	sub	sp, #8
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f7ff ffa2 	bl	80114d8 <SysTick_Config>
 8011594:	4603      	mov	r3, r0
}
 8011596:	4618      	mov	r0, r3
 8011598:	3708      	adds	r7, #8
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}
	...

080115a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b087      	sub	sp, #28
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80115aa:	2300      	movs	r3, #0
 80115ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80115ae:	e148      	b.n	8011842 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	2101      	movs	r1, #1
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	fa01 f303 	lsl.w	r3, r1, r3
 80115bc:	4013      	ands	r3, r2
 80115be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f000 813a 	beq.w	801183c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	f003 0303 	and.w	r3, r3, #3
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d005      	beq.n	80115e0 <HAL_GPIO_Init+0x40>
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	f003 0303 	and.w	r3, r3, #3
 80115dc:	2b02      	cmp	r3, #2
 80115de:	d130      	bne.n	8011642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	689b      	ldr	r3, [r3, #8]
 80115e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	2203      	movs	r2, #3
 80115ec:	fa02 f303 	lsl.w	r3, r2, r3
 80115f0:	43db      	mvns	r3, r3
 80115f2:	693a      	ldr	r2, [r7, #16]
 80115f4:	4013      	ands	r3, r2
 80115f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	68da      	ldr	r2, [r3, #12]
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	005b      	lsls	r3, r3, #1
 8011600:	fa02 f303 	lsl.w	r3, r2, r3
 8011604:	693a      	ldr	r2, [r7, #16]
 8011606:	4313      	orrs	r3, r2
 8011608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	693a      	ldr	r2, [r7, #16]
 801160e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8011616:	2201      	movs	r2, #1
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	fa02 f303 	lsl.w	r3, r2, r3
 801161e:	43db      	mvns	r3, r3
 8011620:	693a      	ldr	r2, [r7, #16]
 8011622:	4013      	ands	r3, r2
 8011624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	091b      	lsrs	r3, r3, #4
 801162c:	f003 0201 	and.w	r2, r3, #1
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	fa02 f303 	lsl.w	r3, r2, r3
 8011636:	693a      	ldr	r2, [r7, #16]
 8011638:	4313      	orrs	r3, r2
 801163a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	693a      	ldr	r2, [r7, #16]
 8011640:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	f003 0303 	and.w	r3, r3, #3
 801164a:	2b03      	cmp	r3, #3
 801164c:	d017      	beq.n	801167e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	005b      	lsls	r3, r3, #1
 8011658:	2203      	movs	r2, #3
 801165a:	fa02 f303 	lsl.w	r3, r2, r3
 801165e:	43db      	mvns	r3, r3
 8011660:	693a      	ldr	r2, [r7, #16]
 8011662:	4013      	ands	r3, r2
 8011664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	689a      	ldr	r2, [r3, #8]
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	005b      	lsls	r3, r3, #1
 801166e:	fa02 f303 	lsl.w	r3, r2, r3
 8011672:	693a      	ldr	r2, [r7, #16]
 8011674:	4313      	orrs	r3, r2
 8011676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	693a      	ldr	r2, [r7, #16]
 801167c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	f003 0303 	and.w	r3, r3, #3
 8011686:	2b02      	cmp	r3, #2
 8011688:	d123      	bne.n	80116d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	08da      	lsrs	r2, r3, #3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	3208      	adds	r2, #8
 8011692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	f003 0307 	and.w	r3, r3, #7
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	220f      	movs	r2, #15
 80116a2:	fa02 f303 	lsl.w	r3, r2, r3
 80116a6:	43db      	mvns	r3, r3
 80116a8:	693a      	ldr	r2, [r7, #16]
 80116aa:	4013      	ands	r3, r2
 80116ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	691a      	ldr	r2, [r3, #16]
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	f003 0307 	and.w	r3, r3, #7
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	fa02 f303 	lsl.w	r3, r2, r3
 80116be:	693a      	ldr	r2, [r7, #16]
 80116c0:	4313      	orrs	r3, r2
 80116c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	08da      	lsrs	r2, r3, #3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	3208      	adds	r2, #8
 80116cc:	6939      	ldr	r1, [r7, #16]
 80116ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	005b      	lsls	r3, r3, #1
 80116dc:	2203      	movs	r2, #3
 80116de:	fa02 f303 	lsl.w	r3, r2, r3
 80116e2:	43db      	mvns	r3, r3
 80116e4:	693a      	ldr	r2, [r7, #16]
 80116e6:	4013      	ands	r3, r2
 80116e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	f003 0203 	and.w	r2, r3, #3
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	005b      	lsls	r3, r3, #1
 80116f6:	fa02 f303 	lsl.w	r3, r2, r3
 80116fa:	693a      	ldr	r2, [r7, #16]
 80116fc:	4313      	orrs	r3, r2
 80116fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	693a      	ldr	r2, [r7, #16]
 8011704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801170e:	2b00      	cmp	r3, #0
 8011710:	f000 8094 	beq.w	801183c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011714:	4b52      	ldr	r3, [pc, #328]	; (8011860 <HAL_GPIO_Init+0x2c0>)
 8011716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011718:	4a51      	ldr	r2, [pc, #324]	; (8011860 <HAL_GPIO_Init+0x2c0>)
 801171a:	f043 0301 	orr.w	r3, r3, #1
 801171e:	6613      	str	r3, [r2, #96]	; 0x60
 8011720:	4b4f      	ldr	r3, [pc, #316]	; (8011860 <HAL_GPIO_Init+0x2c0>)
 8011722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011724:	f003 0301 	and.w	r3, r3, #1
 8011728:	60bb      	str	r3, [r7, #8]
 801172a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 801172c:	4a4d      	ldr	r2, [pc, #308]	; (8011864 <HAL_GPIO_Init+0x2c4>)
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	089b      	lsrs	r3, r3, #2
 8011732:	3302      	adds	r3, #2
 8011734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	f003 0303 	and.w	r3, r3, #3
 8011740:	009b      	lsls	r3, r3, #2
 8011742:	220f      	movs	r2, #15
 8011744:	fa02 f303 	lsl.w	r3, r2, r3
 8011748:	43db      	mvns	r3, r3
 801174a:	693a      	ldr	r2, [r7, #16]
 801174c:	4013      	ands	r3, r2
 801174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8011756:	d00d      	beq.n	8011774 <HAL_GPIO_Init+0x1d4>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	4a43      	ldr	r2, [pc, #268]	; (8011868 <HAL_GPIO_Init+0x2c8>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d007      	beq.n	8011770 <HAL_GPIO_Init+0x1d0>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4a42      	ldr	r2, [pc, #264]	; (801186c <HAL_GPIO_Init+0x2cc>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d101      	bne.n	801176c <HAL_GPIO_Init+0x1cc>
 8011768:	2302      	movs	r3, #2
 801176a:	e004      	b.n	8011776 <HAL_GPIO_Init+0x1d6>
 801176c:	2307      	movs	r3, #7
 801176e:	e002      	b.n	8011776 <HAL_GPIO_Init+0x1d6>
 8011770:	2301      	movs	r3, #1
 8011772:	e000      	b.n	8011776 <HAL_GPIO_Init+0x1d6>
 8011774:	2300      	movs	r3, #0
 8011776:	697a      	ldr	r2, [r7, #20]
 8011778:	f002 0203 	and.w	r2, r2, #3
 801177c:	0092      	lsls	r2, r2, #2
 801177e:	4093      	lsls	r3, r2
 8011780:	693a      	ldr	r2, [r7, #16]
 8011782:	4313      	orrs	r3, r2
 8011784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8011786:	4937      	ldr	r1, [pc, #220]	; (8011864 <HAL_GPIO_Init+0x2c4>)
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	089b      	lsrs	r3, r3, #2
 801178c:	3302      	adds	r3, #2
 801178e:	693a      	ldr	r2, [r7, #16]
 8011790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8011794:	4b36      	ldr	r3, [pc, #216]	; (8011870 <HAL_GPIO_Init+0x2d0>)
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	43db      	mvns	r3, r3
 801179e:	693a      	ldr	r2, [r7, #16]
 80117a0:	4013      	ands	r3, r2
 80117a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d003      	beq.n	80117b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80117b0:	693a      	ldr	r2, [r7, #16]
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	4313      	orrs	r3, r2
 80117b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80117b8:	4a2d      	ldr	r2, [pc, #180]	; (8011870 <HAL_GPIO_Init+0x2d0>)
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80117be:	4b2c      	ldr	r3, [pc, #176]	; (8011870 <HAL_GPIO_Init+0x2d0>)
 80117c0:	68db      	ldr	r3, [r3, #12]
 80117c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	43db      	mvns	r3, r3
 80117c8:	693a      	ldr	r2, [r7, #16]
 80117ca:	4013      	ands	r3, r2
 80117cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d003      	beq.n	80117e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80117da:	693a      	ldr	r2, [r7, #16]
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	4313      	orrs	r3, r2
 80117e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80117e2:	4a23      	ldr	r2, [pc, #140]	; (8011870 <HAL_GPIO_Init+0x2d0>)
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80117e8:	4b21      	ldr	r3, [pc, #132]	; (8011870 <HAL_GPIO_Init+0x2d0>)
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	43db      	mvns	r3, r3
 80117f2:	693a      	ldr	r2, [r7, #16]
 80117f4:	4013      	ands	r3, r2
 80117f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011800:	2b00      	cmp	r3, #0
 8011802:	d003      	beq.n	801180c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8011804:	693a      	ldr	r2, [r7, #16]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	4313      	orrs	r3, r2
 801180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801180c:	4a18      	ldr	r2, [pc, #96]	; (8011870 <HAL_GPIO_Init+0x2d0>)
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8011812:	4b17      	ldr	r3, [pc, #92]	; (8011870 <HAL_GPIO_Init+0x2d0>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	43db      	mvns	r3, r3
 801181c:	693a      	ldr	r2, [r7, #16]
 801181e:	4013      	ands	r3, r2
 8011820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801182a:	2b00      	cmp	r3, #0
 801182c:	d003      	beq.n	8011836 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 801182e:	693a      	ldr	r2, [r7, #16]
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	4313      	orrs	r3, r2
 8011834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8011836:	4a0e      	ldr	r2, [pc, #56]	; (8011870 <HAL_GPIO_Init+0x2d0>)
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	3301      	adds	r3, #1
 8011840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	681a      	ldr	r2, [r3, #0]
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	fa22 f303 	lsr.w	r3, r2, r3
 801184c:	2b00      	cmp	r3, #0
 801184e:	f47f aeaf 	bne.w	80115b0 <HAL_GPIO_Init+0x10>
  }
}
 8011852:	bf00      	nop
 8011854:	bf00      	nop
 8011856:	371c      	adds	r7, #28
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	4770      	bx	lr
 8011860:	40021000 	.word	0x40021000
 8011864:	40010000 	.word	0x40010000
 8011868:	48000400 	.word	0x48000400
 801186c:	48000800 	.word	0x48000800
 8011870:	40010400 	.word	0x40010400

08011874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	460b      	mov	r3, r1
 801187e:	807b      	strh	r3, [r7, #2]
 8011880:	4613      	mov	r3, r2
 8011882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011884:	787b      	ldrb	r3, [r7, #1]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d003      	beq.n	8011892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801188a:	887a      	ldrh	r2, [r7, #2]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011890:	e002      	b.n	8011898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011892:	887a      	ldrh	r2, [r7, #2]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011898:	bf00      	nop
 801189a:	370c      	adds	r7, #12
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	460b      	mov	r3, r1
 80118ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	695b      	ldr	r3, [r3, #20]
 80118b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80118b6:	887a      	ldrh	r2, [r7, #2]
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	4013      	ands	r3, r2
 80118bc:	041a      	lsls	r2, r3, #16
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	43d9      	mvns	r1, r3
 80118c2:	887b      	ldrh	r3, [r7, #2]
 80118c4:	400b      	ands	r3, r1
 80118c6:	431a      	orrs	r2, r3
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	619a      	str	r2, [r3, #24]
}
 80118cc:	bf00      	nop
 80118ce:	3714      	adds	r7, #20
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80118d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118da:	b08b      	sub	sp, #44	; 0x2c
 80118dc:	af06      	add	r7, sp, #24
 80118de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d101      	bne.n	80118ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80118e6:	2301      	movs	r3, #1
 80118e8:	e109      	b.n	8011afe <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d106      	bne.n	8011904 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f007 fbbe 	bl	8019080 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2203      	movs	r2, #3
 8011908:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	4618      	mov	r0, r3
 8011912:	f003 fa9d 	bl	8014e50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	603b      	str	r3, [r7, #0]
 801191c:	687e      	ldr	r6, [r7, #4]
 801191e:	466d      	mov	r5, sp
 8011920:	f106 0410 	add.w	r4, r6, #16
 8011924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011928:	e894 0003 	ldmia.w	r4, {r0, r1}
 801192c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011930:	1d33      	adds	r3, r6, #4
 8011932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011934:	6838      	ldr	r0, [r7, #0]
 8011936:	f003 fa63 	bl	8014e00 <USB_CoreInit>
 801193a:	4603      	mov	r3, r0
 801193c:	2b00      	cmp	r3, #0
 801193e:	d005      	beq.n	801194c <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2202      	movs	r2, #2
 8011944:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8011948:	2301      	movs	r3, #1
 801194a:	e0d8      	b.n	8011afe <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	2100      	movs	r1, #0
 8011952:	4618      	mov	r0, r3
 8011954:	f003 fa97 	bl	8014e86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011958:	2300      	movs	r3, #0
 801195a:	73fb      	strb	r3, [r7, #15]
 801195c:	e04d      	b.n	80119fa <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801195e:	7bfb      	ldrb	r3, [r7, #15]
 8011960:	6879      	ldr	r1, [r7, #4]
 8011962:	1c5a      	adds	r2, r3, #1
 8011964:	4613      	mov	r3, r2
 8011966:	009b      	lsls	r3, r3, #2
 8011968:	4413      	add	r3, r2
 801196a:	00db      	lsls	r3, r3, #3
 801196c:	440b      	add	r3, r1
 801196e:	3305      	adds	r3, #5
 8011970:	2201      	movs	r2, #1
 8011972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8011974:	7bfb      	ldrb	r3, [r7, #15]
 8011976:	6879      	ldr	r1, [r7, #4]
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	4613      	mov	r3, r2
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	4413      	add	r3, r2
 8011980:	00db      	lsls	r3, r3, #3
 8011982:	440b      	add	r3, r1
 8011984:	3304      	adds	r3, #4
 8011986:	7bfa      	ldrb	r2, [r7, #15]
 8011988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 801198a:	7bfa      	ldrb	r2, [r7, #15]
 801198c:	7bfb      	ldrb	r3, [r7, #15]
 801198e:	b298      	uxth	r0, r3
 8011990:	6879      	ldr	r1, [r7, #4]
 8011992:	4613      	mov	r3, r2
 8011994:	009b      	lsls	r3, r3, #2
 8011996:	4413      	add	r3, r2
 8011998:	00db      	lsls	r3, r3, #3
 801199a:	440b      	add	r3, r1
 801199c:	333a      	adds	r3, #58	; 0x3a
 801199e:	4602      	mov	r2, r0
 80119a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80119a2:	7bfb      	ldrb	r3, [r7, #15]
 80119a4:	6879      	ldr	r1, [r7, #4]
 80119a6:	1c5a      	adds	r2, r3, #1
 80119a8:	4613      	mov	r3, r2
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	4413      	add	r3, r2
 80119ae:	00db      	lsls	r3, r3, #3
 80119b0:	440b      	add	r3, r1
 80119b2:	3307      	adds	r3, #7
 80119b4:	2200      	movs	r2, #0
 80119b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80119b8:	7bfa      	ldrb	r2, [r7, #15]
 80119ba:	6879      	ldr	r1, [r7, #4]
 80119bc:	4613      	mov	r3, r2
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	4413      	add	r3, r2
 80119c2:	00db      	lsls	r3, r3, #3
 80119c4:	440b      	add	r3, r1
 80119c6:	333c      	adds	r3, #60	; 0x3c
 80119c8:	2200      	movs	r2, #0
 80119ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80119cc:	7bfa      	ldrb	r2, [r7, #15]
 80119ce:	6879      	ldr	r1, [r7, #4]
 80119d0:	4613      	mov	r3, r2
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	4413      	add	r3, r2
 80119d6:	00db      	lsls	r3, r3, #3
 80119d8:	440b      	add	r3, r1
 80119da:	3340      	adds	r3, #64	; 0x40
 80119dc:	2200      	movs	r2, #0
 80119de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80119e0:	7bfa      	ldrb	r2, [r7, #15]
 80119e2:	6879      	ldr	r1, [r7, #4]
 80119e4:	4613      	mov	r3, r2
 80119e6:	009b      	lsls	r3, r3, #2
 80119e8:	4413      	add	r3, r2
 80119ea:	00db      	lsls	r3, r3, #3
 80119ec:	440b      	add	r3, r1
 80119ee:	3344      	adds	r3, #68	; 0x44
 80119f0:	2200      	movs	r2, #0
 80119f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80119f4:	7bfb      	ldrb	r3, [r7, #15]
 80119f6:	3301      	adds	r3, #1
 80119f8:	73fb      	strb	r3, [r7, #15]
 80119fa:	7bfa      	ldrb	r2, [r7, #15]
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d3ac      	bcc.n	801195e <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011a04:	2300      	movs	r3, #0
 8011a06:	73fb      	strb	r3, [r7, #15]
 8011a08:	e044      	b.n	8011a94 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011a0a:	7bfa      	ldrb	r2, [r7, #15]
 8011a0c:	6879      	ldr	r1, [r7, #4]
 8011a0e:	4613      	mov	r3, r2
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	4413      	add	r3, r2
 8011a14:	00db      	lsls	r3, r3, #3
 8011a16:	440b      	add	r3, r1
 8011a18:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011a20:	7bfa      	ldrb	r2, [r7, #15]
 8011a22:	6879      	ldr	r1, [r7, #4]
 8011a24:	4613      	mov	r3, r2
 8011a26:	009b      	lsls	r3, r3, #2
 8011a28:	4413      	add	r3, r2
 8011a2a:	00db      	lsls	r3, r3, #3
 8011a2c:	440b      	add	r3, r1
 8011a2e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8011a32:	7bfa      	ldrb	r2, [r7, #15]
 8011a34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011a36:	7bfa      	ldrb	r2, [r7, #15]
 8011a38:	6879      	ldr	r1, [r7, #4]
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	4413      	add	r3, r2
 8011a40:	00db      	lsls	r3, r3, #3
 8011a42:	440b      	add	r3, r1
 8011a44:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8011a48:	2200      	movs	r2, #0
 8011a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011a4c:	7bfa      	ldrb	r2, [r7, #15]
 8011a4e:	6879      	ldr	r1, [r7, #4]
 8011a50:	4613      	mov	r3, r2
 8011a52:	009b      	lsls	r3, r3, #2
 8011a54:	4413      	add	r3, r2
 8011a56:	00db      	lsls	r3, r3, #3
 8011a58:	440b      	add	r3, r1
 8011a5a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011a5e:	2200      	movs	r2, #0
 8011a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8011a62:	7bfa      	ldrb	r2, [r7, #15]
 8011a64:	6879      	ldr	r1, [r7, #4]
 8011a66:	4613      	mov	r3, r2
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	4413      	add	r3, r2
 8011a6c:	00db      	lsls	r3, r3, #3
 8011a6e:	440b      	add	r3, r1
 8011a70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8011a74:	2200      	movs	r2, #0
 8011a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8011a78:	7bfa      	ldrb	r2, [r7, #15]
 8011a7a:	6879      	ldr	r1, [r7, #4]
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	009b      	lsls	r3, r3, #2
 8011a80:	4413      	add	r3, r2
 8011a82:	00db      	lsls	r3, r3, #3
 8011a84:	440b      	add	r3, r1
 8011a86:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011a8e:	7bfb      	ldrb	r3, [r7, #15]
 8011a90:	3301      	adds	r3, #1
 8011a92:	73fb      	strb	r3, [r7, #15]
 8011a94:	7bfa      	ldrb	r2, [r7, #15]
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	685b      	ldr	r3, [r3, #4]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d3b5      	bcc.n	8011a0a <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	603b      	str	r3, [r7, #0]
 8011aa4:	687e      	ldr	r6, [r7, #4]
 8011aa6:	466d      	mov	r5, sp
 8011aa8:	f106 0410 	add.w	r4, r6, #16
 8011aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011ab0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011ab4:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ab8:	1d33      	adds	r3, r6, #4
 8011aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011abc:	6838      	ldr	r0, [r7, #0]
 8011abe:	f003 f9ef 	bl	8014ea0 <USB_DevInit>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d005      	beq.n	8011ad4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2202      	movs	r2, #2
 8011acc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	e014      	b.n	8011afe <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2201      	movs	r2, #1
 8011ae0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	69db      	ldr	r3, [r3, #28]
 8011ae8:	2b01      	cmp	r3, #1
 8011aea:	d102      	bne.n	8011af2 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f001 fc55 	bl	801339c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f005 fbfb 	bl	80172f2 <USB_DevDisconnect>

  return HAL_OK;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3714      	adds	r7, #20
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b082      	sub	sp, #8
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d101      	bne.n	8011b1c <HAL_PCD_Start+0x16>
 8011b18:	2302      	movs	r3, #2
 8011b1a:	e012      	b.n	8011b42 <HAL_PCD_Start+0x3c>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f003 f97a 	bl	8014e22 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f005 fbc6 	bl	80172c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8011b40:	2300      	movs	r3, #0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3708      	adds	r7, #8
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}

08011b4a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8011b4a:	b580      	push	{r7, lr}
 8011b4c:	b084      	sub	sp, #16
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f005 fbe0 	bl	801731c <USB_ReadInterrupts>
 8011b5c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d003      	beq.n	8011b70 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f000 fb3e 	bl	80121ea <PCD_EP_ISR_Handler>

    return;
 8011b6e:	e110      	b.n	8011d92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d013      	beq.n	8011ba2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011b82:	b29a      	uxth	r2, r3
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b8c:	b292      	uxth	r2, r2
 8011b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f007 fb05 	bl	80191a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8011b98:	2100      	movs	r1, #0
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f000 f8fc 	bl	8011d98 <HAL_PCD_SetAddress>

    return;
 8011ba0:	e0f7      	b.n	8011d92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d00c      	beq.n	8011bc6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011bbe:	b292      	uxth	r2, r2
 8011bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8011bc4:	e0e5      	b.n	8011d92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00c      	beq.n	8011bea <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011bd8:	b29a      	uxth	r2, r3
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011be2:	b292      	uxth	r2, r2
 8011be4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8011be8:	e0d3      	b.n	8011d92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d034      	beq.n	8011c5e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011bfc:	b29a      	uxth	r2, r3
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	f022 0204 	bic.w	r2, r2, #4
 8011c06:	b292      	uxth	r2, r2
 8011c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	f022 0208 	bic.w	r2, r2, #8
 8011c1e:	b292      	uxth	r2, r2
 8011c20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d107      	bne.n	8011c3e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2200      	movs	r2, #0
 8011c32:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8011c36:	2100      	movs	r1, #0
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f007 fd63 	bl	8019704 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f007 fae8 	bl	8019214 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011c4c:	b29a      	uxth	r2, r3
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011c56:	b292      	uxth	r2, r2
 8011c58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8011c5c:	e099      	b.n	8011d92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d027      	beq.n	8011cb8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011c70:	b29a      	uxth	r2, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f042 0208 	orr.w	r2, r2, #8
 8011c7a:	b292      	uxth	r2, r2
 8011c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011c92:	b292      	uxth	r2, r2
 8011c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011ca0:	b29a      	uxth	r2, r3
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f042 0204 	orr.w	r2, r2, #4
 8011caa:	b292      	uxth	r2, r2
 8011cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f007 fa95 	bl	80191e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8011cb6:	e06c      	b.n	8011d92 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d040      	beq.n	8011d44 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011cd4:	b292      	uxth	r2, r2
 8011cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d12b      	bne.n	8011d3c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	f042 0204 	orr.w	r2, r2, #4
 8011cf6:	b292      	uxth	r2, r2
 8011cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f042 0208 	orr.w	r2, r2, #8
 8011d0e:	b292      	uxth	r2, r2
 8011d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2201      	movs	r2, #1
 8011d18:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	089b      	lsrs	r3, r3, #2
 8011d28:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8011d32:	2101      	movs	r1, #1
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f007 fce5 	bl	8019704 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8011d3a:	e02a      	b.n	8011d92 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f007 fa4f 	bl	80191e0 <HAL_PCD_SuspendCallback>
    return;
 8011d42:	e026      	b.n	8011d92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d00f      	beq.n	8011d6e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011d56:	b29a      	uxth	r2, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011d60:	b292      	uxth	r2, r2
 8011d62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f007 fa0d 	bl	8019186 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8011d6c:	e011      	b.n	8011d92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00c      	beq.n	8011d92 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011d80:	b29a      	uxth	r2, r3
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011d8a:	b292      	uxth	r2, r2
 8011d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8011d90:	bf00      	nop
  }
}
 8011d92:	3710      	adds	r7, #16
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	460b      	mov	r3, r1
 8011da2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8011daa:	2b01      	cmp	r3, #1
 8011dac:	d101      	bne.n	8011db2 <HAL_PCD_SetAddress+0x1a>
 8011dae:	2302      	movs	r3, #2
 8011db0:	e013      	b.n	8011dda <HAL_PCD_SetAddress+0x42>
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2201      	movs	r2, #1
 8011db6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	78fa      	ldrb	r2, [r7, #3]
 8011dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	78fa      	ldrb	r2, [r7, #3]
 8011dc8:	4611      	mov	r1, r2
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f005 fa66 	bl	801729c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8011dd8:	2300      	movs	r3, #0
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3708      	adds	r7, #8
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}

08011de2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8011de2:	b580      	push	{r7, lr}
 8011de4:	b084      	sub	sp, #16
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	6078      	str	r0, [r7, #4]
 8011dea:	4608      	mov	r0, r1
 8011dec:	4611      	mov	r1, r2
 8011dee:	461a      	mov	r2, r3
 8011df0:	4603      	mov	r3, r0
 8011df2:	70fb      	strb	r3, [r7, #3]
 8011df4:	460b      	mov	r3, r1
 8011df6:	803b      	strh	r3, [r7, #0]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	da0f      	bge.n	8011e28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011e08:	78fb      	ldrb	r3, [r7, #3]
 8011e0a:	f003 0307 	and.w	r3, r3, #7
 8011e0e:	1c5a      	adds	r2, r3, #1
 8011e10:	4613      	mov	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4413      	add	r3, r2
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	3304      	adds	r3, #4
 8011e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2201      	movs	r2, #1
 8011e24:	705a      	strb	r2, [r3, #1]
 8011e26:	e00f      	b.n	8011e48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011e28:	78fb      	ldrb	r3, [r7, #3]
 8011e2a:	f003 0207 	and.w	r2, r3, #7
 8011e2e:	4613      	mov	r3, r2
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	4413      	add	r3, r2
 8011e34:	00db      	lsls	r3, r3, #3
 8011e36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	3304      	adds	r3, #4
 8011e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	2200      	movs	r2, #0
 8011e46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8011e48:	78fb      	ldrb	r3, [r7, #3]
 8011e4a:	f003 0307 	and.w	r3, r3, #7
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011e54:	883a      	ldrh	r2, [r7, #0]
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	78ba      	ldrb	r2, [r7, #2]
 8011e5e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	785b      	ldrb	r3, [r3, #1]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d004      	beq.n	8011e72 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	b29a      	uxth	r2, r3
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011e72:	78bb      	ldrb	r3, [r7, #2]
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d102      	bne.n	8011e7e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8011e84:	2b01      	cmp	r3, #1
 8011e86:	d101      	bne.n	8011e8c <HAL_PCD_EP_Open+0xaa>
 8011e88:	2302      	movs	r3, #2
 8011e8a:	e00e      	b.n	8011eaa <HAL_PCD_EP_Open+0xc8>
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2201      	movs	r2, #1
 8011e90:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	68f9      	ldr	r1, [r7, #12]
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f003 f822 	bl	8014ee4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8011ea8:	7afb      	ldrb	r3, [r7, #11]
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3710      	adds	r7, #16
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}

08011eb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b084      	sub	sp, #16
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
 8011eba:	460b      	mov	r3, r1
 8011ebc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	da0f      	bge.n	8011ee6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011ec6:	78fb      	ldrb	r3, [r7, #3]
 8011ec8:	f003 0307 	and.w	r3, r3, #7
 8011ecc:	1c5a      	adds	r2, r3, #1
 8011ece:	4613      	mov	r3, r2
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	4413      	add	r3, r2
 8011ed4:	00db      	lsls	r3, r3, #3
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	4413      	add	r3, r2
 8011eda:	3304      	adds	r3, #4
 8011edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2201      	movs	r2, #1
 8011ee2:	705a      	strb	r2, [r3, #1]
 8011ee4:	e00f      	b.n	8011f06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011ee6:	78fb      	ldrb	r3, [r7, #3]
 8011ee8:	f003 0207 	and.w	r2, r3, #7
 8011eec:	4613      	mov	r3, r2
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	4413      	add	r3, r2
 8011ef2:	00db      	lsls	r3, r3, #3
 8011ef4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011ef8:	687a      	ldr	r2, [r7, #4]
 8011efa:	4413      	add	r3, r2
 8011efc:	3304      	adds	r3, #4
 8011efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2200      	movs	r2, #0
 8011f04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8011f06:	78fb      	ldrb	r3, [r7, #3]
 8011f08:	f003 0307 	and.w	r3, r3, #7
 8011f0c:	b2da      	uxtb	r2, r3
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	d101      	bne.n	8011f20 <HAL_PCD_EP_Close+0x6e>
 8011f1c:	2302      	movs	r3, #2
 8011f1e:	e00e      	b.n	8011f3e <HAL_PCD_EP_Close+0x8c>
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2201      	movs	r2, #1
 8011f24:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	68f9      	ldr	r1, [r7, #12]
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f003 fb92 	bl	8015658 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2200      	movs	r2, #0
 8011f38:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8011f3c:	2300      	movs	r3, #0
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3710      	adds	r7, #16
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b086      	sub	sp, #24
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	60f8      	str	r0, [r7, #12]
 8011f4e:	607a      	str	r2, [r7, #4]
 8011f50:	603b      	str	r3, [r7, #0]
 8011f52:	460b      	mov	r3, r1
 8011f54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011f56:	7afb      	ldrb	r3, [r7, #11]
 8011f58:	f003 0207 	and.w	r2, r3, #7
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	4413      	add	r3, r2
 8011f62:	00db      	lsls	r3, r3, #3
 8011f64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011f68:	68fa      	ldr	r2, [r7, #12]
 8011f6a:	4413      	add	r3, r2
 8011f6c:	3304      	adds	r3, #4
 8011f6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	683a      	ldr	r2, [r7, #0]
 8011f7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	2200      	movs	r2, #0
 8011f86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011f88:	7afb      	ldrb	r3, [r7, #11]
 8011f8a:	f003 0307 	and.w	r3, r3, #7
 8011f8e:	b2da      	uxtb	r2, r3
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011f94:	7afb      	ldrb	r3, [r7, #11]
 8011f96:	f003 0307 	and.w	r3, r3, #7
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d106      	bne.n	8011fac <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	6979      	ldr	r1, [r7, #20]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f003 fd44 	bl	8015a32 <USB_EPStartXfer>
 8011faa:	e005      	b.n	8011fb8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	6979      	ldr	r1, [r7, #20]
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f003 fd3d 	bl	8015a32 <USB_EPStartXfer>
  }

  return HAL_OK;
 8011fb8:	2300      	movs	r3, #0
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3718      	adds	r7, #24
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	b083      	sub	sp, #12
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
 8011fca:	460b      	mov	r3, r1
 8011fcc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8011fce:	78fb      	ldrb	r3, [r7, #3]
 8011fd0:	f003 0207 	and.w	r2, r3, #7
 8011fd4:	6879      	ldr	r1, [r7, #4]
 8011fd6:	4613      	mov	r3, r2
 8011fd8:	009b      	lsls	r3, r3, #2
 8011fda:	4413      	add	r3, r2
 8011fdc:	00db      	lsls	r3, r3, #3
 8011fde:	440b      	add	r3, r1
 8011fe0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8011fe4:	681b      	ldr	r3, [r3, #0]
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	370c      	adds	r7, #12
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr

08011ff2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b086      	sub	sp, #24
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	60f8      	str	r0, [r7, #12]
 8011ffa:	607a      	str	r2, [r7, #4]
 8011ffc:	603b      	str	r3, [r7, #0]
 8011ffe:	460b      	mov	r3, r1
 8012000:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012002:	7afb      	ldrb	r3, [r7, #11]
 8012004:	f003 0307 	and.w	r3, r3, #7
 8012008:	1c5a      	adds	r2, r3, #1
 801200a:	4613      	mov	r3, r2
 801200c:	009b      	lsls	r3, r3, #2
 801200e:	4413      	add	r3, r2
 8012010:	00db      	lsls	r3, r3, #3
 8012012:	68fa      	ldr	r2, [r7, #12]
 8012014:	4413      	add	r3, r2
 8012016:	3304      	adds	r3, #4
 8012018:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	683a      	ldr	r2, [r7, #0]
 8012024:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	2201      	movs	r2, #1
 801202a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	683a      	ldr	r2, [r7, #0]
 8012032:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	2200      	movs	r2, #0
 8012038:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	2201      	movs	r2, #1
 801203e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012040:	7afb      	ldrb	r3, [r7, #11]
 8012042:	f003 0307 	and.w	r3, r3, #7
 8012046:	b2da      	uxtb	r2, r3
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801204c:	7afb      	ldrb	r3, [r7, #11]
 801204e:	f003 0307 	and.w	r3, r3, #7
 8012052:	2b00      	cmp	r3, #0
 8012054:	d106      	bne.n	8012064 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	6979      	ldr	r1, [r7, #20]
 801205c:	4618      	mov	r0, r3
 801205e:	f003 fce8 	bl	8015a32 <USB_EPStartXfer>
 8012062:	e005      	b.n	8012070 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	6979      	ldr	r1, [r7, #20]
 801206a:	4618      	mov	r0, r3
 801206c:	f003 fce1 	bl	8015a32 <USB_EPStartXfer>
  }

  return HAL_OK;
 8012070:	2300      	movs	r3, #0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3718      	adds	r7, #24
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801207a:	b580      	push	{r7, lr}
 801207c:	b084      	sub	sp, #16
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
 8012082:	460b      	mov	r3, r1
 8012084:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012086:	78fb      	ldrb	r3, [r7, #3]
 8012088:	f003 0207 	and.w	r2, r3, #7
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	429a      	cmp	r2, r3
 8012092:	d901      	bls.n	8012098 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8012094:	2301      	movs	r3, #1
 8012096:	e04e      	b.n	8012136 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801209c:	2b00      	cmp	r3, #0
 801209e:	da0f      	bge.n	80120c0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80120a0:	78fb      	ldrb	r3, [r7, #3]
 80120a2:	f003 0307 	and.w	r3, r3, #7
 80120a6:	1c5a      	adds	r2, r3, #1
 80120a8:	4613      	mov	r3, r2
 80120aa:	009b      	lsls	r3, r3, #2
 80120ac:	4413      	add	r3, r2
 80120ae:	00db      	lsls	r3, r3, #3
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	4413      	add	r3, r2
 80120b4:	3304      	adds	r3, #4
 80120b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	2201      	movs	r2, #1
 80120bc:	705a      	strb	r2, [r3, #1]
 80120be:	e00d      	b.n	80120dc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80120c0:	78fa      	ldrb	r2, [r7, #3]
 80120c2:	4613      	mov	r3, r2
 80120c4:	009b      	lsls	r3, r3, #2
 80120c6:	4413      	add	r3, r2
 80120c8:	00db      	lsls	r3, r3, #3
 80120ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	4413      	add	r3, r2
 80120d2:	3304      	adds	r3, #4
 80120d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2200      	movs	r2, #0
 80120da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2201      	movs	r2, #1
 80120e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80120e2:	78fb      	ldrb	r3, [r7, #3]
 80120e4:	f003 0307 	and.w	r3, r3, #7
 80120e8:	b2da      	uxtb	r2, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d101      	bne.n	80120fc <HAL_PCD_EP_SetStall+0x82>
 80120f8:	2302      	movs	r3, #2
 80120fa:	e01c      	b.n	8012136 <HAL_PCD_EP_SetStall+0xbc>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2201      	movs	r2, #1
 8012100:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	68f9      	ldr	r1, [r7, #12]
 801210a:	4618      	mov	r0, r3
 801210c:	f004 ffc7 	bl	801709e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8012110:	78fb      	ldrb	r3, [r7, #3]
 8012112:	f003 0307 	and.w	r3, r3, #7
 8012116:	2b00      	cmp	r3, #0
 8012118:	d108      	bne.n	801212c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681a      	ldr	r2, [r3, #0]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8012124:	4619      	mov	r1, r3
 8012126:	4610      	mov	r0, r2
 8012128:	f005 f908 	bl	801733c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2200      	movs	r2, #0
 8012130:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8012134:	2300      	movs	r3, #0
}
 8012136:	4618      	mov	r0, r3
 8012138:	3710      	adds	r7, #16
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}

0801213e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801213e:	b580      	push	{r7, lr}
 8012140:	b084      	sub	sp, #16
 8012142:	af00      	add	r7, sp, #0
 8012144:	6078      	str	r0, [r7, #4]
 8012146:	460b      	mov	r3, r1
 8012148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801214a:	78fb      	ldrb	r3, [r7, #3]
 801214c:	f003 020f 	and.w	r2, r3, #15
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	429a      	cmp	r2, r3
 8012156:	d901      	bls.n	801215c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8012158:	2301      	movs	r3, #1
 801215a:	e042      	b.n	80121e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801215c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012160:	2b00      	cmp	r3, #0
 8012162:	da0f      	bge.n	8012184 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012164:	78fb      	ldrb	r3, [r7, #3]
 8012166:	f003 0307 	and.w	r3, r3, #7
 801216a:	1c5a      	adds	r2, r3, #1
 801216c:	4613      	mov	r3, r2
 801216e:	009b      	lsls	r3, r3, #2
 8012170:	4413      	add	r3, r2
 8012172:	00db      	lsls	r3, r3, #3
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	4413      	add	r3, r2
 8012178:	3304      	adds	r3, #4
 801217a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2201      	movs	r2, #1
 8012180:	705a      	strb	r2, [r3, #1]
 8012182:	e00f      	b.n	80121a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012184:	78fb      	ldrb	r3, [r7, #3]
 8012186:	f003 0207 	and.w	r2, r3, #7
 801218a:	4613      	mov	r3, r2
 801218c:	009b      	lsls	r3, r3, #2
 801218e:	4413      	add	r3, r2
 8012190:	00db      	lsls	r3, r3, #3
 8012192:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	4413      	add	r3, r2
 801219a:	3304      	adds	r3, #4
 801219c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2200      	movs	r2, #0
 80121a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2200      	movs	r2, #0
 80121a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80121aa:	78fb      	ldrb	r3, [r7, #3]
 80121ac:	f003 0307 	and.w	r3, r3, #7
 80121b0:	b2da      	uxtb	r2, r3
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d101      	bne.n	80121c4 <HAL_PCD_EP_ClrStall+0x86>
 80121c0:	2302      	movs	r3, #2
 80121c2:	e00e      	b.n	80121e2 <HAL_PCD_EP_ClrStall+0xa4>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2201      	movs	r2, #1
 80121c8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	68f9      	ldr	r1, [r7, #12]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f004 ffb4 	bl	8017140 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2200      	movs	r2, #0
 80121dc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80121e0:	2300      	movs	r3, #0
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3710      	adds	r7, #16
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80121ea:	b580      	push	{r7, lr}
 80121ec:	b096      	sub	sp, #88	; 0x58
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80121f2:	e3a9      	b.n	8012948 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80121fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8012200:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012204:	b2db      	uxtb	r3, r3
 8012206:	f003 030f 	and.w	r3, r3, #15
 801220a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 801220e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012212:	2b00      	cmp	r3, #0
 8012214:	f040 8169 	bne.w	80124ea <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8012218:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801221c:	f003 0310 	and.w	r3, r3, #16
 8012220:	2b00      	cmp	r3, #0
 8012222:	d150      	bne.n	80122c6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	881b      	ldrh	r3, [r3, #0]
 801222a:	b29b      	uxth	r3, r3
 801222c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8012230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012234:	81fb      	strh	r3, [r7, #14]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	89fb      	ldrh	r3, [r7, #14]
 801223c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012244:	b29b      	uxth	r3, r3
 8012246:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	332c      	adds	r3, #44	; 0x2c
 801224c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012256:	b29b      	uxth	r3, r3
 8012258:	461a      	mov	r2, r3
 801225a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	00db      	lsls	r3, r3, #3
 8012260:	4413      	add	r3, r2
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	6812      	ldr	r2, [r2, #0]
 8012266:	4413      	add	r3, r2
 8012268:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8012272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012274:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8012276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012278:	695a      	ldr	r2, [r3, #20]
 801227a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801227c:	69db      	ldr	r3, [r3, #28]
 801227e:	441a      	add	r2, r3
 8012280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012282:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8012284:	2100      	movs	r1, #0
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f006 ff63 	bl	8019152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012292:	b2db      	uxtb	r3, r3
 8012294:	2b00      	cmp	r3, #0
 8012296:	f000 8357 	beq.w	8012948 <PCD_EP_ISR_Handler+0x75e>
 801229a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801229c:	699b      	ldr	r3, [r3, #24]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	f040 8352 	bne.w	8012948 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122b0:	b2da      	uxtb	r2, r3
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	b292      	uxth	r2, r2
 80122b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80122c4:	e340      	b.n	8012948 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80122cc:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	881b      	ldrh	r3, [r3, #0]
 80122d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80122d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80122dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d032      	beq.n	801234a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	461a      	mov	r2, r3
 80122f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	00db      	lsls	r3, r3, #3
 80122f6:	4413      	add	r3, r2
 80122f8:	687a      	ldr	r2, [r7, #4]
 80122fa:	6812      	ldr	r2, [r2, #0]
 80122fc:	4413      	add	r3, r2
 80122fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012302:	881b      	ldrh	r3, [r3, #0]
 8012304:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8012308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801230a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6818      	ldr	r0, [r3, #0]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8012316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012318:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 801231a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801231c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801231e:	b29b      	uxth	r3, r3
 8012320:	f005 f85a 	bl	80173d8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	881b      	ldrh	r3, [r3, #0]
 801232a:	b29a      	uxth	r2, r3
 801232c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8012330:	4013      	ands	r3, r2
 8012332:	823b      	strh	r3, [r7, #16]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	8a3a      	ldrh	r2, [r7, #16]
 801233a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801233e:	b292      	uxth	r2, r2
 8012340:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f006 fed8 	bl	80190f8 <HAL_PCD_SetupStageCallback>
 8012348:	e2fe      	b.n	8012948 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801234a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801234e:	2b00      	cmp	r3, #0
 8012350:	f280 82fa 	bge.w	8012948 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	881b      	ldrh	r3, [r3, #0]
 801235a:	b29a      	uxth	r2, r3
 801235c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8012360:	4013      	ands	r3, r2
 8012362:	83fb      	strh	r3, [r7, #30]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	8bfa      	ldrh	r2, [r7, #30]
 801236a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801236e:	b292      	uxth	r2, r2
 8012370:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801237a:	b29b      	uxth	r3, r3
 801237c:	461a      	mov	r2, r3
 801237e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	00db      	lsls	r3, r3, #3
 8012384:	4413      	add	r3, r2
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	6812      	ldr	r2, [r2, #0]
 801238a:	4413      	add	r3, r2
 801238c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012390:	881b      	ldrh	r3, [r3, #0]
 8012392:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8012396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012398:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801239a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801239c:	69db      	ldr	r3, [r3, #28]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d019      	beq.n	80123d6 <PCD_EP_ISR_Handler+0x1ec>
 80123a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a4:	695b      	ldr	r3, [r3, #20]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d015      	beq.n	80123d6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6818      	ldr	r0, [r3, #0]
 80123ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b0:	6959      	ldr	r1, [r3, #20]
 80123b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80123b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	f005 f80c 	bl	80173d8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80123c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123c2:	695a      	ldr	r2, [r3, #20]
 80123c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123c6:	69db      	ldr	r3, [r3, #28]
 80123c8:	441a      	add	r2, r3
 80123ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123cc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80123ce:	2100      	movs	r1, #0
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f006 fea3 	bl	801911c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	881b      	ldrh	r3, [r3, #0]
 80123dc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80123e0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80123e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	f040 82ad 	bne.w	8012948 <PCD_EP_ISR_Handler+0x75e>
 80123ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80123f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80123f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80123fa:	f000 82a5 	beq.w	8012948 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	61bb      	str	r3, [r7, #24]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801240c:	b29b      	uxth	r3, r3
 801240e:	461a      	mov	r2, r3
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	4413      	add	r3, r2
 8012414:	61bb      	str	r3, [r7, #24]
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801241c:	617b      	str	r3, [r7, #20]
 801241e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	2b3e      	cmp	r3, #62	; 0x3e
 8012424:	d918      	bls.n	8012458 <PCD_EP_ISR_Handler+0x26e>
 8012426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012428:	691b      	ldr	r3, [r3, #16]
 801242a:	095b      	lsrs	r3, r3, #5
 801242c:	647b      	str	r3, [r7, #68]	; 0x44
 801242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012430:	691b      	ldr	r3, [r3, #16]
 8012432:	f003 031f 	and.w	r3, r3, #31
 8012436:	2b00      	cmp	r3, #0
 8012438:	d102      	bne.n	8012440 <PCD_EP_ISR_Handler+0x256>
 801243a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801243c:	3b01      	subs	r3, #1
 801243e:	647b      	str	r3, [r7, #68]	; 0x44
 8012440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012442:	b29b      	uxth	r3, r3
 8012444:	029b      	lsls	r3, r3, #10
 8012446:	b29b      	uxth	r3, r3
 8012448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801244c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012450:	b29a      	uxth	r2, r3
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	801a      	strh	r2, [r3, #0]
 8012456:	e029      	b.n	80124ac <PCD_EP_ISR_Handler+0x2c2>
 8012458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801245a:	691b      	ldr	r3, [r3, #16]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d112      	bne.n	8012486 <PCD_EP_ISR_Handler+0x29c>
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	881b      	ldrh	r3, [r3, #0]
 8012464:	b29b      	uxth	r3, r3
 8012466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801246a:	b29a      	uxth	r2, r3
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	801a      	strh	r2, [r3, #0]
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	881b      	ldrh	r3, [r3, #0]
 8012474:	b29b      	uxth	r3, r3
 8012476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801247a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801247e:	b29a      	uxth	r2, r3
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	801a      	strh	r2, [r3, #0]
 8012484:	e012      	b.n	80124ac <PCD_EP_ISR_Handler+0x2c2>
 8012486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012488:	691b      	ldr	r3, [r3, #16]
 801248a:	085b      	lsrs	r3, r3, #1
 801248c:	647b      	str	r3, [r7, #68]	; 0x44
 801248e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012490:	691b      	ldr	r3, [r3, #16]
 8012492:	f003 0301 	and.w	r3, r3, #1
 8012496:	2b00      	cmp	r3, #0
 8012498:	d002      	beq.n	80124a0 <PCD_EP_ISR_Handler+0x2b6>
 801249a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801249c:	3301      	adds	r3, #1
 801249e:	647b      	str	r3, [r7, #68]	; 0x44
 80124a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	029b      	lsls	r3, r3, #10
 80124a6:	b29a      	uxth	r2, r3
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	881b      	ldrh	r3, [r3, #0]
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80124b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80124bc:	827b      	strh	r3, [r7, #18]
 80124be:	8a7b      	ldrh	r3, [r7, #18]
 80124c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80124c4:	827b      	strh	r3, [r7, #18]
 80124c6:	8a7b      	ldrh	r3, [r7, #18]
 80124c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80124cc:	827b      	strh	r3, [r7, #18]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	8a7b      	ldrh	r3, [r7, #18]
 80124d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80124d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80124dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80124e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	8013      	strh	r3, [r2, #0]
 80124e8:	e22e      	b.n	8012948 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	461a      	mov	r2, r3
 80124f0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4413      	add	r3, r2
 80124f8:	881b      	ldrh	r3, [r3, #0]
 80124fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80124fe:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8012502:	2b00      	cmp	r3, #0
 8012504:	f280 80f7 	bge.w	80126f6 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	461a      	mov	r2, r3
 801250e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	4413      	add	r3, r2
 8012516:	881b      	ldrh	r3, [r3, #0]
 8012518:	b29a      	uxth	r2, r3
 801251a:	f640 738f 	movw	r3, #3983	; 0xf8f
 801251e:	4013      	ands	r3, r2
 8012520:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	461a      	mov	r2, r3
 801252a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801252e:	009b      	lsls	r3, r3, #2
 8012530:	4413      	add	r3, r2
 8012532:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8012536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801253a:	b292      	uxth	r2, r2
 801253c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801253e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012542:	4613      	mov	r3, r2
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	4413      	add	r3, r2
 8012548:	00db      	lsls	r3, r3, #3
 801254a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801254e:	687a      	ldr	r2, [r7, #4]
 8012550:	4413      	add	r3, r2
 8012552:	3304      	adds	r3, #4
 8012554:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8012556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012558:	7b1b      	ldrb	r3, [r3, #12]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d123      	bne.n	80125a6 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012566:	b29b      	uxth	r3, r3
 8012568:	461a      	mov	r2, r3
 801256a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	00db      	lsls	r3, r3, #3
 8012570:	4413      	add	r3, r2
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	6812      	ldr	r2, [r2, #0]
 8012576:	4413      	add	r3, r2
 8012578:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801257c:	881b      	ldrh	r3, [r3, #0]
 801257e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012582:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8012586:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801258a:	2b00      	cmp	r3, #0
 801258c:	f000 808e 	beq.w	80126ac <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6818      	ldr	r0, [r3, #0]
 8012594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012596:	6959      	ldr	r1, [r3, #20]
 8012598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801259a:	88da      	ldrh	r2, [r3, #6]
 801259c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80125a0:	f004 ff1a 	bl	80173d8 <USB_ReadPMA>
 80125a4:	e082      	b.n	80126ac <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80125a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125a8:	78db      	ldrb	r3, [r3, #3]
 80125aa:	2b02      	cmp	r3, #2
 80125ac:	d10a      	bne.n	80125c4 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80125ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80125b2:	461a      	mov	r2, r3
 80125b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 f9d4 	bl	8012964 <HAL_PCD_EP_DB_Receive>
 80125bc:	4603      	mov	r3, r0
 80125be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80125c2:	e073      	b.n	80126ac <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	461a      	mov	r2, r3
 80125ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	009b      	lsls	r3, r3, #2
 80125d0:	4413      	add	r3, r2
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80125da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	461a      	mov	r2, r3
 80125e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	441a      	add	r2, r3
 80125f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80125f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80125f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80125fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012604:	b29b      	uxth	r3, r3
 8012606:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	461a      	mov	r2, r3
 801260e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	009b      	lsls	r3, r3, #2
 8012614:	4413      	add	r3, r2
 8012616:	881b      	ldrh	r3, [r3, #0]
 8012618:	b29b      	uxth	r3, r3
 801261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801261e:	2b00      	cmp	r3, #0
 8012620:	d022      	beq.n	8012668 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801262a:	b29b      	uxth	r3, r3
 801262c:	461a      	mov	r2, r3
 801262e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	00db      	lsls	r3, r3, #3
 8012634:	4413      	add	r3, r2
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	6812      	ldr	r2, [r2, #0]
 801263a:	4413      	add	r3, r2
 801263c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012640:	881b      	ldrh	r3, [r3, #0]
 8012642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012646:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 801264a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801264e:	2b00      	cmp	r3, #0
 8012650:	d02c      	beq.n	80126ac <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6818      	ldr	r0, [r3, #0]
 8012656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012658:	6959      	ldr	r1, [r3, #20]
 801265a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801265c:	891a      	ldrh	r2, [r3, #8]
 801265e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8012662:	f004 feb9 	bl	80173d8 <USB_ReadPMA>
 8012666:	e021      	b.n	80126ac <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012670:	b29b      	uxth	r3, r3
 8012672:	461a      	mov	r2, r3
 8012674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	00db      	lsls	r3, r3, #3
 801267a:	4413      	add	r3, r2
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	6812      	ldr	r2, [r2, #0]
 8012680:	4413      	add	r3, r2
 8012682:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012686:	881b      	ldrh	r3, [r3, #0]
 8012688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801268c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8012690:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8012694:	2b00      	cmp	r3, #0
 8012696:	d009      	beq.n	80126ac <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6818      	ldr	r0, [r3, #0]
 801269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801269e:	6959      	ldr	r1, [r3, #20]
 80126a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a2:	895a      	ldrh	r2, [r3, #10]
 80126a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80126a8:	f004 fe96 	bl	80173d8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80126ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ae:	69da      	ldr	r2, [r3, #28]
 80126b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80126b4:	441a      	add	r2, r3
 80126b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80126ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126bc:	695a      	ldr	r2, [r3, #20]
 80126be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80126c2:	441a      	add	r2, r3
 80126c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80126c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ca:	699b      	ldr	r3, [r3, #24]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d005      	beq.n	80126dc <PCD_EP_ISR_Handler+0x4f2>
 80126d0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80126d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126d6:	691b      	ldr	r3, [r3, #16]
 80126d8:	429a      	cmp	r2, r3
 80126da:	d206      	bcs.n	80126ea <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80126dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	4619      	mov	r1, r3
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f006 fd1a 	bl	801911c <HAL_PCD_DataOutStageCallback>
 80126e8:	e005      	b.n	80126f6 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80126f0:	4618      	mov	r0, r3
 80126f2:	f003 f99e 	bl	8015a32 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80126f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80126fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126fe:	2b00      	cmp	r3, #0
 8012700:	f000 8122 	beq.w	8012948 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8012704:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012708:	1c5a      	adds	r2, r3, #1
 801270a:	4613      	mov	r3, r2
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	4413      	add	r3, r2
 8012710:	00db      	lsls	r3, r3, #3
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	4413      	add	r3, r2
 8012716:	3304      	adds	r3, #4
 8012718:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	461a      	mov	r2, r3
 8012720:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4413      	add	r3, r2
 8012728:	881b      	ldrh	r3, [r3, #0]
 801272a:	b29b      	uxth	r3, r3
 801272c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8012730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012734:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	461a      	mov	r2, r3
 801273e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012742:	009b      	lsls	r3, r3, #2
 8012744:	441a      	add	r2, r3
 8012746:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801274a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801274e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012752:	b29b      	uxth	r3, r3
 8012754:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8012756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012758:	78db      	ldrb	r3, [r3, #3]
 801275a:	2b01      	cmp	r3, #1
 801275c:	f040 80a2 	bne.w	80128a4 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8012760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012762:	2200      	movs	r2, #0
 8012764:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8012766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012768:	7b1b      	ldrb	r3, [r3, #12]
 801276a:	2b00      	cmp	r3, #0
 801276c:	f000 8093 	beq.w	8012896 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012770:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8012774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012778:	2b00      	cmp	r3, #0
 801277a:	d046      	beq.n	801280a <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801277c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801277e:	785b      	ldrb	r3, [r3, #1]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d126      	bne.n	80127d2 <PCD_EP_ISR_Handler+0x5e8>
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	627b      	str	r3, [r7, #36]	; 0x24
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012792:	b29b      	uxth	r3, r3
 8012794:	461a      	mov	r2, r3
 8012796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012798:	4413      	add	r3, r2
 801279a:	627b      	str	r3, [r7, #36]	; 0x24
 801279c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	00da      	lsls	r2, r3, #3
 80127a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a4:	4413      	add	r3, r2
 80127a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80127aa:	623b      	str	r3, [r7, #32]
 80127ac:	6a3b      	ldr	r3, [r7, #32]
 80127ae:	881b      	ldrh	r3, [r3, #0]
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	6a3b      	ldr	r3, [r7, #32]
 80127ba:	801a      	strh	r2, [r3, #0]
 80127bc:	6a3b      	ldr	r3, [r7, #32]
 80127be:	881b      	ldrh	r3, [r3, #0]
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127ca:	b29a      	uxth	r2, r3
 80127cc:	6a3b      	ldr	r3, [r7, #32]
 80127ce:	801a      	strh	r2, [r3, #0]
 80127d0:	e061      	b.n	8012896 <PCD_EP_ISR_Handler+0x6ac>
 80127d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127d4:	785b      	ldrb	r3, [r3, #1]
 80127d6:	2b01      	cmp	r3, #1
 80127d8:	d15d      	bne.n	8012896 <PCD_EP_ISR_Handler+0x6ac>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	461a      	mov	r2, r3
 80127ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ee:	4413      	add	r3, r2
 80127f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	00da      	lsls	r2, r3, #3
 80127f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fa:	4413      	add	r3, r2
 80127fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012800:	62bb      	str	r3, [r7, #40]	; 0x28
 8012802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012804:	2200      	movs	r2, #0
 8012806:	801a      	strh	r2, [r3, #0]
 8012808:	e045      	b.n	8012896 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012812:	785b      	ldrb	r3, [r3, #1]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d126      	bne.n	8012866 <PCD_EP_ISR_Handler+0x67c>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	637b      	str	r3, [r7, #52]	; 0x34
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012826:	b29b      	uxth	r3, r3
 8012828:	461a      	mov	r2, r3
 801282a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801282c:	4413      	add	r3, r2
 801282e:	637b      	str	r3, [r7, #52]	; 0x34
 8012830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	00da      	lsls	r2, r3, #3
 8012836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012838:	4413      	add	r3, r2
 801283a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801283e:	633b      	str	r3, [r7, #48]	; 0x30
 8012840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012842:	881b      	ldrh	r3, [r3, #0]
 8012844:	b29b      	uxth	r3, r3
 8012846:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801284a:	b29a      	uxth	r2, r3
 801284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284e:	801a      	strh	r2, [r3, #0]
 8012850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012852:	881b      	ldrh	r3, [r3, #0]
 8012854:	b29b      	uxth	r3, r3
 8012856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801285a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801285e:	b29a      	uxth	r2, r3
 8012860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012862:	801a      	strh	r2, [r3, #0]
 8012864:	e017      	b.n	8012896 <PCD_EP_ISR_Handler+0x6ac>
 8012866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012868:	785b      	ldrb	r3, [r3, #1]
 801286a:	2b01      	cmp	r3, #1
 801286c:	d113      	bne.n	8012896 <PCD_EP_ISR_Handler+0x6ac>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012876:	b29b      	uxth	r3, r3
 8012878:	461a      	mov	r2, r3
 801287a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801287c:	4413      	add	r3, r2
 801287e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	00da      	lsls	r2, r3, #3
 8012886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012888:	4413      	add	r3, r2
 801288a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801288e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012892:	2200      	movs	r2, #0
 8012894:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	4619      	mov	r1, r3
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f006 fc58 	bl	8019152 <HAL_PCD_DataInStageCallback>
 80128a2:	e051      	b.n	8012948 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80128a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80128a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d144      	bne.n	801293a <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	461a      	mov	r2, r3
 80128bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	00db      	lsls	r3, r3, #3
 80128c2:	4413      	add	r3, r2
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	6812      	ldr	r2, [r2, #0]
 80128c8:	4413      	add	r3, r2
 80128ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80128ce:	881b      	ldrh	r3, [r3, #0]
 80128d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80128d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80128d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128da:	699a      	ldr	r2, [r3, #24]
 80128dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d907      	bls.n	80128f4 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80128e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128e6:	699a      	ldr	r2, [r3, #24]
 80128e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80128ec:	1ad2      	subs	r2, r2, r3
 80128ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128f0:	619a      	str	r2, [r3, #24]
 80128f2:	e002      	b.n	80128fa <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80128f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128f6:	2200      	movs	r2, #0
 80128f8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80128fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128fc:	699b      	ldr	r3, [r3, #24]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d106      	bne.n	8012910 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	4619      	mov	r1, r3
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f006 fc22 	bl	8019152 <HAL_PCD_DataInStageCallback>
 801290e:	e01b      	b.n	8012948 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8012910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012912:	695a      	ldr	r2, [r3, #20]
 8012914:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012918:	441a      	add	r2, r3
 801291a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801291c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801291e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012920:	69da      	ldr	r2, [r3, #28]
 8012922:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012926:	441a      	add	r2, r3
 8012928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801292a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012932:	4618      	mov	r0, r3
 8012934:	f003 f87d 	bl	8015a32 <USB_EPStartXfer>
 8012938:	e006      	b.n	8012948 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801293a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801293e:	461a      	mov	r2, r3
 8012940:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f000 f917 	bl	8012b76 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012950:	b29b      	uxth	r3, r3
 8012952:	b21b      	sxth	r3, r3
 8012954:	2b00      	cmp	r3, #0
 8012956:	f6ff ac4d 	blt.w	80121f4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 801295a:	2300      	movs	r3, #0
}
 801295c:	4618      	mov	r0, r3
 801295e:	3758      	adds	r7, #88	; 0x58
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b088      	sub	sp, #32
 8012968:	af00      	add	r7, sp, #0
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	4613      	mov	r3, r2
 8012970:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8012972:	88fb      	ldrh	r3, [r7, #6]
 8012974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012978:	2b00      	cmp	r3, #0
 801297a:	d07c      	beq.n	8012a76 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012984:	b29b      	uxth	r3, r3
 8012986:	461a      	mov	r2, r3
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	00db      	lsls	r3, r3, #3
 801298e:	4413      	add	r3, r2
 8012990:	68fa      	ldr	r2, [r7, #12]
 8012992:	6812      	ldr	r2, [r2, #0]
 8012994:	4413      	add	r3, r2
 8012996:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801299a:	881b      	ldrh	r3, [r3, #0]
 801299c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80129a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	699a      	ldr	r2, [r3, #24]
 80129a6:	8b7b      	ldrh	r3, [r7, #26]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d306      	bcc.n	80129ba <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	699a      	ldr	r2, [r3, #24]
 80129b0:	8b7b      	ldrh	r3, [r7, #26]
 80129b2:	1ad2      	subs	r2, r2, r3
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	619a      	str	r2, [r3, #24]
 80129b8:	e002      	b.n	80129c0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	2200      	movs	r2, #0
 80129be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	699b      	ldr	r3, [r3, #24]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d123      	bne.n	8012a10 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	461a      	mov	r2, r3
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	009b      	lsls	r3, r3, #2
 80129d4:	4413      	add	r3, r2
 80129d6:	881b      	ldrh	r3, [r3, #0]
 80129d8:	b29b      	uxth	r3, r3
 80129da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80129de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80129e2:	833b      	strh	r3, [r7, #24]
 80129e4:	8b3b      	ldrh	r3, [r7, #24]
 80129e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80129ea:	833b      	strh	r3, [r7, #24]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	461a      	mov	r2, r3
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	781b      	ldrb	r3, [r3, #0]
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	441a      	add	r2, r3
 80129fa:	8b3b      	ldrh	r3, [r7, #24]
 80129fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012a10:	88fb      	ldrh	r3, [r7, #6]
 8012a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d01f      	beq.n	8012a5a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	461a      	mov	r2, r3
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	009b      	lsls	r3, r3, #2
 8012a26:	4413      	add	r3, r2
 8012a28:	881b      	ldrh	r3, [r3, #0]
 8012a2a:	b29b      	uxth	r3, r3
 8012a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a34:	82fb      	strh	r3, [r7, #22]
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	441a      	add	r2, r3
 8012a44:	8afb      	ldrh	r3, [r7, #22]
 8012a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8012a5a:	8b7b      	ldrh	r3, [r7, #26]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 8085 	beq.w	8012b6c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	6818      	ldr	r0, [r3, #0]
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	6959      	ldr	r1, [r3, #20]
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	891a      	ldrh	r2, [r3, #8]
 8012a6e:	8b7b      	ldrh	r3, [r7, #26]
 8012a70:	f004 fcb2 	bl	80173d8 <USB_ReadPMA>
 8012a74:	e07a      	b.n	8012b6c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	461a      	mov	r2, r3
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	00db      	lsls	r3, r3, #3
 8012a88:	4413      	add	r3, r2
 8012a8a:	68fa      	ldr	r2, [r7, #12]
 8012a8c:	6812      	ldr	r2, [r2, #0]
 8012a8e:	4413      	add	r3, r2
 8012a90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012a9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	699a      	ldr	r2, [r3, #24]
 8012aa0:	8b7b      	ldrh	r3, [r7, #26]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d306      	bcc.n	8012ab4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	699a      	ldr	r2, [r3, #24]
 8012aaa:	8b7b      	ldrh	r3, [r7, #26]
 8012aac:	1ad2      	subs	r2, r2, r3
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	619a      	str	r2, [r3, #24]
 8012ab2:	e002      	b.n	8012aba <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	699b      	ldr	r3, [r3, #24]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d123      	bne.n	8012b0a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	009b      	lsls	r3, r3, #2
 8012ace:	4413      	add	r3, r2
 8012ad0:	881b      	ldrh	r3, [r3, #0]
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012adc:	83fb      	strh	r3, [r7, #30]
 8012ade:	8bfb      	ldrh	r3, [r7, #30]
 8012ae0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012ae4:	83fb      	strh	r3, [r7, #30]
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	461a      	mov	r2, r3
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	009b      	lsls	r3, r3, #2
 8012af2:	441a      	add	r2, r3
 8012af4:	8bfb      	ldrh	r3, [r7, #30]
 8012af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8012b0a:	88fb      	ldrh	r3, [r7, #6]
 8012b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d11f      	bne.n	8012b54 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	461a      	mov	r2, r3
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	009b      	lsls	r3, r3, #2
 8012b20:	4413      	add	r3, r2
 8012b22:	881b      	ldrh	r3, [r3, #0]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b2e:	83bb      	strh	r3, [r7, #28]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	461a      	mov	r2, r3
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	009b      	lsls	r3, r3, #2
 8012b3c:	441a      	add	r2, r3
 8012b3e:	8bbb      	ldrh	r3, [r7, #28]
 8012b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8012b54:	8b7b      	ldrh	r3, [r7, #26]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d008      	beq.n	8012b6c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	6818      	ldr	r0, [r3, #0]
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	6959      	ldr	r1, [r3, #20]
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	895a      	ldrh	r2, [r3, #10]
 8012b66:	8b7b      	ldrh	r3, [r7, #26]
 8012b68:	f004 fc36 	bl	80173d8 <USB_ReadPMA>
    }
  }

  return count;
 8012b6c:	8b7b      	ldrh	r3, [r7, #26]
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3720      	adds	r7, #32
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}

08012b76 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b0a2      	sub	sp, #136	; 0x88
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	60f8      	str	r0, [r7, #12]
 8012b7e:	60b9      	str	r1, [r7, #8]
 8012b80:	4613      	mov	r3, r2
 8012b82:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012b84:	88fb      	ldrh	r3, [r7, #6]
 8012b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	f000 81c5 	beq.w	8012f1a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	4413      	add	r3, r2
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	6812      	ldr	r2, [r2, #0]
 8012ba8:	4413      	add	r3, r2
 8012baa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012bae:	881b      	ldrh	r3, [r3, #0]
 8012bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012bb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	699a      	ldr	r2, [r3, #24]
 8012bbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d907      	bls.n	8012bd4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	699a      	ldr	r2, [r3, #24]
 8012bc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012bcc:	1ad2      	subs	r2, r2, r3
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	619a      	str	r2, [r3, #24]
 8012bd2:	e002      	b.n	8012bda <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	699b      	ldr	r3, [r3, #24]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	f040 80b9 	bne.w	8012d56 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	785b      	ldrb	r3, [r3, #1]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d126      	bne.n	8012c3a <HAL_PCD_EP_DB_Transmit+0xc4>
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c00:	4413      	add	r3, r2
 8012c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c04:	68bb      	ldr	r3, [r7, #8]
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	00da      	lsls	r2, r3, #3
 8012c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0c:	4413      	add	r3, r2
 8012c0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012c12:	627b      	str	r3, [r7, #36]	; 0x24
 8012c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c16:	881b      	ldrh	r3, [r3, #0]
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012c1e:	b29a      	uxth	r2, r3
 8012c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c22:	801a      	strh	r2, [r3, #0]
 8012c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c26:	881b      	ldrh	r3, [r3, #0]
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c32:	b29a      	uxth	r2, r3
 8012c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c36:	801a      	strh	r2, [r3, #0]
 8012c38:	e01a      	b.n	8012c70 <HAL_PCD_EP_DB_Transmit+0xfa>
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	785b      	ldrb	r3, [r3, #1]
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d116      	bne.n	8012c70 <HAL_PCD_EP_DB_Transmit+0xfa>
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	633b      	str	r3, [r7, #48]	; 0x30
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	461a      	mov	r2, r3
 8012c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c56:	4413      	add	r3, r2
 8012c58:	633b      	str	r3, [r7, #48]	; 0x30
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	00da      	lsls	r2, r3, #3
 8012c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c62:	4413      	add	r3, r2
 8012c64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	623b      	str	r3, [r7, #32]
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	785b      	ldrb	r3, [r3, #1]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d126      	bne.n	8012ccc <HAL_PCD_EP_DB_Transmit+0x156>
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	61bb      	str	r3, [r7, #24]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	461a      	mov	r2, r3
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	4413      	add	r3, r2
 8012c94:	61bb      	str	r3, [r7, #24]
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	00da      	lsls	r2, r3, #3
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012ca4:	617b      	str	r3, [r7, #20]
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	881b      	ldrh	r3, [r3, #0]
 8012caa:	b29b      	uxth	r3, r3
 8012cac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012cb0:	b29a      	uxth	r2, r3
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	801a      	strh	r2, [r3, #0]
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	881b      	ldrh	r3, [r3, #0]
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012cc4:	b29a      	uxth	r2, r3
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	801a      	strh	r2, [r3, #0]
 8012cca:	e017      	b.n	8012cfc <HAL_PCD_EP_DB_Transmit+0x186>
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	785b      	ldrb	r3, [r3, #1]
 8012cd0:	2b01      	cmp	r3, #1
 8012cd2:	d113      	bne.n	8012cfc <HAL_PCD_EP_DB_Transmit+0x186>
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	461a      	mov	r2, r3
 8012ce0:	6a3b      	ldr	r3, [r7, #32]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	623b      	str	r3, [r7, #32]
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	00da      	lsls	r2, r3, #3
 8012cec:	6a3b      	ldr	r3, [r7, #32]
 8012cee:	4413      	add	r3, r2
 8012cf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012cf4:	61fb      	str	r3, [r7, #28]
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	4619      	mov	r1, r3
 8012d02:	68f8      	ldr	r0, [r7, #12]
 8012d04:	f006 fa25 	bl	8019152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8012d08:	88fb      	ldrh	r3, [r7, #6]
 8012d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	f000 82d2 	beq.w	80132b8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	461a      	mov	r2, r3
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	009b      	lsls	r3, r3, #2
 8012d20:	4413      	add	r3, r2
 8012d22:	881b      	ldrh	r3, [r3, #0]
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d2e:	827b      	strh	r3, [r7, #18]
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	461a      	mov	r2, r3
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	009b      	lsls	r3, r3, #2
 8012d3c:	441a      	add	r2, r3
 8012d3e:	8a7b      	ldrh	r3, [r7, #18]
 8012d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	8013      	strh	r3, [r2, #0]
 8012d54:	e2b0      	b.n	80132b8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8012d56:	88fb      	ldrh	r3, [r7, #6]
 8012d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d021      	beq.n	8012da4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	461a      	mov	r2, r3
 8012d66:	68bb      	ldr	r3, [r7, #8]
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	4413      	add	r3, r2
 8012d6e:	881b      	ldrh	r3, [r3, #0]
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	461a      	mov	r2, r3
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	009b      	lsls	r3, r3, #2
 8012d8a:	441a      	add	r2, r3
 8012d8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012daa:	2b01      	cmp	r3, #1
 8012dac:	f040 8284 	bne.w	80132b8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	695a      	ldr	r2, [r3, #20]
 8012db4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012db8:	441a      	add	r2, r3
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	69da      	ldr	r2, [r3, #28]
 8012dc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012dc6:	441a      	add	r2, r3
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	6a1a      	ldr	r2, [r3, #32]
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	691b      	ldr	r3, [r3, #16]
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d309      	bcc.n	8012dec <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	691b      	ldr	r3, [r3, #16]
 8012ddc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	6a1a      	ldr	r2, [r3, #32]
 8012de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012de4:	1ad2      	subs	r2, r2, r3
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	621a      	str	r2, [r3, #32]
 8012dea:	e015      	b.n	8012e18 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	6a1b      	ldr	r3, [r3, #32]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d107      	bne.n	8012e04 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8012df4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012df8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012e02:	e009      	b.n	8012e18 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	2200      	movs	r2, #0
 8012e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	6a1b      	ldr	r3, [r3, #32]
 8012e10:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	2200      	movs	r2, #0
 8012e16:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	785b      	ldrb	r3, [r3, #1]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d155      	bne.n	8012ecc <HAL_PCD_EP_DB_Transmit+0x356>
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	461a      	mov	r2, r3
 8012e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e34:	4413      	add	r3, r2
 8012e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	00da      	lsls	r2, r3, #3
 8012e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e40:	4413      	add	r3, r2
 8012e42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012e46:	637b      	str	r3, [r7, #52]	; 0x34
 8012e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8012e4c:	d916      	bls.n	8012e7c <HAL_PCD_EP_DB_Transmit+0x306>
 8012e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e50:	095b      	lsrs	r3, r3, #5
 8012e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e56:	f003 031f 	and.w	r3, r3, #31
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d102      	bne.n	8012e64 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8012e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e60:	3b01      	subs	r3, #1
 8012e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e66:	b29b      	uxth	r3, r3
 8012e68:	029b      	lsls	r3, r3, #10
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e74:	b29a      	uxth	r2, r3
 8012e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e78:	801a      	strh	r2, [r3, #0]
 8012e7a:	e043      	b.n	8012f04 <HAL_PCD_EP_DB_Transmit+0x38e>
 8012e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d112      	bne.n	8012ea8 <HAL_PCD_EP_DB_Transmit+0x332>
 8012e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012e8c:	b29a      	uxth	r2, r3
 8012e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e90:	801a      	strh	r2, [r3, #0]
 8012e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e94:	881b      	ldrh	r3, [r3, #0]
 8012e96:	b29b      	uxth	r3, r3
 8012e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ea0:	b29a      	uxth	r2, r3
 8012ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ea4:	801a      	strh	r2, [r3, #0]
 8012ea6:	e02d      	b.n	8012f04 <HAL_PCD_EP_DB_Transmit+0x38e>
 8012ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eaa:	085b      	lsrs	r3, r3, #1
 8012eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8012eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb0:	f003 0301 	and.w	r3, r3, #1
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d002      	beq.n	8012ebe <HAL_PCD_EP_DB_Transmit+0x348>
 8012eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eba:	3301      	adds	r3, #1
 8012ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	029b      	lsls	r3, r3, #10
 8012ec4:	b29a      	uxth	r2, r3
 8012ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ec8:	801a      	strh	r2, [r3, #0]
 8012eca:	e01b      	b.n	8012f04 <HAL_PCD_EP_DB_Transmit+0x38e>
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	785b      	ldrb	r3, [r3, #1]
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d117      	bne.n	8012f04 <HAL_PCD_EP_DB_Transmit+0x38e>
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	461a      	mov	r2, r3
 8012ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ee8:	4413      	add	r3, r2
 8012eea:	643b      	str	r3, [r7, #64]	; 0x40
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	00da      	lsls	r2, r3, #3
 8012ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ef4:	4413      	add	r3, r2
 8012ef6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012efe:	b29a      	uxth	r2, r3
 8012f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f02:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	6818      	ldr	r0, [r3, #0]
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	6959      	ldr	r1, [r3, #20]
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	891a      	ldrh	r2, [r3, #8]
 8012f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	f004 fa1e 	bl	8017354 <USB_WritePMA>
 8012f18:	e1ce      	b.n	80132b8 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	461a      	mov	r2, r3
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	00db      	lsls	r3, r3, #3
 8012f2c:	4413      	add	r3, r2
 8012f2e:	68fa      	ldr	r2, [r7, #12]
 8012f30:	6812      	ldr	r2, [r2, #0]
 8012f32:	4413      	add	r3, r2
 8012f34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012f38:	881b      	ldrh	r3, [r3, #0]
 8012f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012f3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	699a      	ldr	r2, [r3, #24]
 8012f46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d307      	bcc.n	8012f5e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	699a      	ldr	r2, [r3, #24]
 8012f52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012f56:	1ad2      	subs	r2, r2, r3
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	619a      	str	r2, [r3, #24]
 8012f5c:	e002      	b.n	8012f64 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	2200      	movs	r2, #0
 8012f62:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	699b      	ldr	r3, [r3, #24]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f040 80c4 	bne.w	80130f6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	785b      	ldrb	r3, [r3, #1]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d126      	bne.n	8012fc4 <HAL_PCD_EP_DB_Transmit+0x44e>
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	461a      	mov	r2, r3
 8012f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f8a:	4413      	add	r3, r2
 8012f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	781b      	ldrb	r3, [r3, #0]
 8012f92:	00da      	lsls	r2, r3, #3
 8012f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f96:	4413      	add	r3, r2
 8012f98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8012f9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fa0:	881b      	ldrh	r3, [r3, #0]
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fac:	801a      	strh	r2, [r3, #0]
 8012fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fb0:	881b      	ldrh	r3, [r3, #0]
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012fbc:	b29a      	uxth	r2, r3
 8012fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fc0:	801a      	strh	r2, [r3, #0]
 8012fc2:	e01a      	b.n	8012ffa <HAL_PCD_EP_DB_Transmit+0x484>
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	785b      	ldrb	r3, [r3, #1]
 8012fc8:	2b01      	cmp	r3, #1
 8012fca:	d116      	bne.n	8012ffa <HAL_PCD_EP_DB_Transmit+0x484>
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	673b      	str	r3, [r7, #112]	; 0x70
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	461a      	mov	r2, r3
 8012fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012fe0:	4413      	add	r3, r2
 8012fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8012fe4:	68bb      	ldr	r3, [r7, #8]
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	00da      	lsls	r2, r3, #3
 8012fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012fec:	4413      	add	r3, r2
 8012fee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	785b      	ldrb	r3, [r3, #1]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d12f      	bne.n	8013068 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013018:	b29b      	uxth	r3, r3
 801301a:	461a      	mov	r2, r3
 801301c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013020:	4413      	add	r3, r2
 8013022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	00da      	lsls	r2, r3, #3
 801302c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013030:	4413      	add	r3, r2
 8013032:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801303a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	b29b      	uxth	r3, r3
 8013042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013046:	b29a      	uxth	r2, r3
 8013048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801304c:	801a      	strh	r2, [r3, #0]
 801304e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013052:	881b      	ldrh	r3, [r3, #0]
 8013054:	b29b      	uxth	r3, r3
 8013056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801305a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801305e:	b29a      	uxth	r2, r3
 8013060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013064:	801a      	strh	r2, [r3, #0]
 8013066:	e017      	b.n	8013098 <HAL_PCD_EP_DB_Transmit+0x522>
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	785b      	ldrb	r3, [r3, #1]
 801306c:	2b01      	cmp	r3, #1
 801306e:	d113      	bne.n	8013098 <HAL_PCD_EP_DB_Transmit+0x522>
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013078:	b29b      	uxth	r3, r3
 801307a:	461a      	mov	r2, r3
 801307c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801307e:	4413      	add	r3, r2
 8013080:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	00da      	lsls	r2, r3, #3
 8013088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801308a:	4413      	add	r3, r2
 801308c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013090:	67bb      	str	r3, [r7, #120]	; 0x78
 8013092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013094:	2200      	movs	r2, #0
 8013096:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013098:	68bb      	ldr	r3, [r7, #8]
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	4619      	mov	r1, r3
 801309e:	68f8      	ldr	r0, [r7, #12]
 80130a0:	f006 f857 	bl	8019152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80130a4:	88fb      	ldrh	r3, [r7, #6]
 80130a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	f040 8104 	bne.w	80132b8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	461a      	mov	r2, r3
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	009b      	lsls	r3, r3, #2
 80130bc:	4413      	add	r3, r2
 80130be:	881b      	ldrh	r3, [r3, #0]
 80130c0:	b29b      	uxth	r3, r3
 80130c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80130c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	461a      	mov	r2, r3
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	441a      	add	r2, r3
 80130dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80130e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80130e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80130e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80130ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	8013      	strh	r3, [r2, #0]
 80130f4:	e0e0      	b.n	80132b8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80130f6:	88fb      	ldrh	r3, [r7, #6]
 80130f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d121      	bne.n	8013144 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	461a      	mov	r2, r3
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	009b      	lsls	r3, r3, #2
 801310c:	4413      	add	r3, r2
 801310e:	881b      	ldrh	r3, [r3, #0]
 8013110:	b29b      	uxth	r3, r3
 8013112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801311a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	461a      	mov	r2, r3
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	009b      	lsls	r3, r3, #2
 801312a:	441a      	add	r2, r3
 801312c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8013130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801313c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013140:	b29b      	uxth	r3, r3
 8013142:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801314a:	2b01      	cmp	r3, #1
 801314c:	f040 80b4 	bne.w	80132b8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	695a      	ldr	r2, [r3, #20]
 8013154:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013158:	441a      	add	r2, r3
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	69da      	ldr	r2, [r3, #28]
 8013162:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013166:	441a      	add	r2, r3
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	6a1a      	ldr	r2, [r3, #32]
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	691b      	ldr	r3, [r3, #16]
 8013174:	429a      	cmp	r2, r3
 8013176:	d309      	bcc.n	801318c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	6a1a      	ldr	r2, [r3, #32]
 8013182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013184:	1ad2      	subs	r2, r2, r3
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	621a      	str	r2, [r3, #32]
 801318a:	e015      	b.n	80131b8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	6a1b      	ldr	r3, [r3, #32]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d107      	bne.n	80131a4 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8013194:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013198:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	2200      	movs	r2, #0
 801319e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80131a2:	e009      	b.n	80131b8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	6a1b      	ldr	r3, [r3, #32]
 80131a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2200      	movs	r2, #0
 80131ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	2200      	movs	r2, #0
 80131b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	663b      	str	r3, [r7, #96]	; 0x60
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	785b      	ldrb	r3, [r3, #1]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d155      	bne.n	8013272 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80131d4:	b29b      	uxth	r3, r3
 80131d6:	461a      	mov	r2, r3
 80131d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131da:	4413      	add	r3, r2
 80131dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	00da      	lsls	r2, r3, #3
 80131e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131e6:	4413      	add	r3, r2
 80131e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80131ec:	657b      	str	r3, [r7, #84]	; 0x54
 80131ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131f0:	2b3e      	cmp	r3, #62	; 0x3e
 80131f2:	d916      	bls.n	8013222 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80131f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131f6:	095b      	lsrs	r3, r3, #5
 80131f8:	677b      	str	r3, [r7, #116]	; 0x74
 80131fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131fc:	f003 031f 	and.w	r3, r3, #31
 8013200:	2b00      	cmp	r3, #0
 8013202:	d102      	bne.n	801320a <HAL_PCD_EP_DB_Transmit+0x694>
 8013204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013206:	3b01      	subs	r3, #1
 8013208:	677b      	str	r3, [r7, #116]	; 0x74
 801320a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801320c:	b29b      	uxth	r3, r3
 801320e:	029b      	lsls	r3, r3, #10
 8013210:	b29b      	uxth	r3, r3
 8013212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801321a:	b29a      	uxth	r2, r3
 801321c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801321e:	801a      	strh	r2, [r3, #0]
 8013220:	e040      	b.n	80132a4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8013222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013224:	2b00      	cmp	r3, #0
 8013226:	d112      	bne.n	801324e <HAL_PCD_EP_DB_Transmit+0x6d8>
 8013228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801322a:	881b      	ldrh	r3, [r3, #0]
 801322c:	b29b      	uxth	r3, r3
 801322e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013232:	b29a      	uxth	r2, r3
 8013234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013236:	801a      	strh	r2, [r3, #0]
 8013238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	b29b      	uxth	r3, r3
 801323e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013246:	b29a      	uxth	r2, r3
 8013248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801324a:	801a      	strh	r2, [r3, #0]
 801324c:	e02a      	b.n	80132a4 <HAL_PCD_EP_DB_Transmit+0x72e>
 801324e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013250:	085b      	lsrs	r3, r3, #1
 8013252:	677b      	str	r3, [r7, #116]	; 0x74
 8013254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013256:	f003 0301 	and.w	r3, r3, #1
 801325a:	2b00      	cmp	r3, #0
 801325c:	d002      	beq.n	8013264 <HAL_PCD_EP_DB_Transmit+0x6ee>
 801325e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013260:	3301      	adds	r3, #1
 8013262:	677b      	str	r3, [r7, #116]	; 0x74
 8013264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013266:	b29b      	uxth	r3, r3
 8013268:	029b      	lsls	r3, r3, #10
 801326a:	b29a      	uxth	r2, r3
 801326c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801326e:	801a      	strh	r2, [r3, #0]
 8013270:	e018      	b.n	80132a4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	785b      	ldrb	r3, [r3, #1]
 8013276:	2b01      	cmp	r3, #1
 8013278:	d114      	bne.n	80132a4 <HAL_PCD_EP_DB_Transmit+0x72e>
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013282:	b29b      	uxth	r3, r3
 8013284:	461a      	mov	r2, r3
 8013286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013288:	4413      	add	r3, r2
 801328a:	663b      	str	r3, [r7, #96]	; 0x60
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	00da      	lsls	r2, r3, #3
 8013292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013294:	4413      	add	r3, r2
 8013296:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801329a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801329c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801329e:	b29a      	uxth	r2, r3
 80132a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80132a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	6818      	ldr	r0, [r3, #0]
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	6959      	ldr	r1, [r3, #20]
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	895a      	ldrh	r2, [r3, #10]
 80132b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	f004 f84e 	bl	8017354 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	461a      	mov	r2, r3
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	4413      	add	r3, r2
 80132c6:	881b      	ldrh	r3, [r3, #0]
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80132ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80132d2:	823b      	strh	r3, [r7, #16]
 80132d4:	8a3b      	ldrh	r3, [r7, #16]
 80132d6:	f083 0310 	eor.w	r3, r3, #16
 80132da:	823b      	strh	r3, [r7, #16]
 80132dc:	8a3b      	ldrh	r3, [r7, #16]
 80132de:	f083 0320 	eor.w	r3, r3, #32
 80132e2:	823b      	strh	r3, [r7, #16]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	461a      	mov	r2, r3
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	441a      	add	r2, r3
 80132f2:	8a3b      	ldrh	r3, [r7, #16]
 80132f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013304:	b29b      	uxth	r3, r3
 8013306:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8013308:	2300      	movs	r3, #0
}
 801330a:	4618      	mov	r0, r3
 801330c:	3788      	adds	r7, #136	; 0x88
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}

08013312 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8013312:	b480      	push	{r7}
 8013314:	b087      	sub	sp, #28
 8013316:	af00      	add	r7, sp, #0
 8013318:	60f8      	str	r0, [r7, #12]
 801331a:	607b      	str	r3, [r7, #4]
 801331c:	460b      	mov	r3, r1
 801331e:	817b      	strh	r3, [r7, #10]
 8013320:	4613      	mov	r3, r2
 8013322:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8013324:	897b      	ldrh	r3, [r7, #10]
 8013326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801332a:	b29b      	uxth	r3, r3
 801332c:	2b00      	cmp	r3, #0
 801332e:	d00c      	beq.n	801334a <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013330:	897b      	ldrh	r3, [r7, #10]
 8013332:	f003 0307 	and.w	r3, r3, #7
 8013336:	1c5a      	adds	r2, r3, #1
 8013338:	4613      	mov	r3, r2
 801333a:	009b      	lsls	r3, r3, #2
 801333c:	4413      	add	r3, r2
 801333e:	00db      	lsls	r3, r3, #3
 8013340:	68fa      	ldr	r2, [r7, #12]
 8013342:	4413      	add	r3, r2
 8013344:	3304      	adds	r3, #4
 8013346:	617b      	str	r3, [r7, #20]
 8013348:	e00a      	b.n	8013360 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801334a:	897a      	ldrh	r2, [r7, #10]
 801334c:	4613      	mov	r3, r2
 801334e:	009b      	lsls	r3, r3, #2
 8013350:	4413      	add	r3, r2
 8013352:	00db      	lsls	r3, r3, #3
 8013354:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8013358:	68fa      	ldr	r2, [r7, #12]
 801335a:	4413      	add	r3, r2
 801335c:	3304      	adds	r3, #4
 801335e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8013360:	893b      	ldrh	r3, [r7, #8]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d107      	bne.n	8013376 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	2200      	movs	r2, #0
 801336a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	b29a      	uxth	r2, r3
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	80da      	strh	r2, [r3, #6]
 8013374:	e00b      	b.n	801338e <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	2201      	movs	r2, #1
 801337a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	b29a      	uxth	r2, r3
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	0c1b      	lsrs	r3, r3, #16
 8013388:	b29a      	uxth	r2, r3
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801338e:	2300      	movs	r3, #0
}
 8013390:	4618      	mov	r0, r3
 8013392:	371c      	adds	r7, #28
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr

0801339c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801339c:	b480      	push	{r7}
 801339e:	b085      	sub	sp, #20
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2201      	movs	r2, #1
 80133ae:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2200      	movs	r2, #0
 80133b6:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	f043 0301 	orr.w	r3, r3, #1
 80133c6:	b29a      	uxth	r2, r3
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	f043 0302 	orr.w	r3, r3, #2
 80133da:	b29a      	uxth	r2, r3
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80133e2:	2300      	movs	r3, #0
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3714      	adds	r7, #20
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr

080133f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80133f0:	b480      	push	{r7}
 80133f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80133f4:	4b05      	ldr	r3, [pc, #20]	; (801340c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	4a04      	ldr	r2, [pc, #16]	; (801340c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80133fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80133fe:	6013      	str	r3, [r2, #0]
}
 8013400:	bf00      	nop
 8013402:	46bd      	mov	sp, r7
 8013404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013408:	4770      	bx	lr
 801340a:	bf00      	nop
 801340c:	40007000 	.word	0x40007000

08013410 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8013410:	b480      	push	{r7}
 8013412:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8013414:	4b09      	ldr	r3, [pc, #36]	; (801343c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f023 0307 	bic.w	r3, r3, #7
 801341c:	4a07      	ldr	r2, [pc, #28]	; (801343c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 801341e:	f043 0303 	orr.w	r3, r3, #3
 8013422:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8013424:	4b06      	ldr	r3, [pc, #24]	; (8013440 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8013426:	691b      	ldr	r3, [r3, #16]
 8013428:	4a05      	ldr	r2, [pc, #20]	; (8013440 <HAL_PWR_EnterSTANDBYMode+0x30>)
 801342a:	f043 0304 	orr.w	r3, r3, #4
 801342e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8013430:	bf30      	wfi
}
 8013432:	bf00      	nop
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr
 801343c:	40007000 	.word	0x40007000
 8013440:	e000ed00 	.word	0xe000ed00

08013444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8013444:	b480      	push	{r7}
 8013446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8013448:	4b04      	ldr	r3, [pc, #16]	; (801345c <HAL_PWREx_GetVoltageRange+0x18>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8013450:	4618      	mov	r0, r3
 8013452:	46bd      	mov	sp, r7
 8013454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013458:	4770      	bx	lr
 801345a:	bf00      	nop
 801345c:	40007000 	.word	0x40007000

08013460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8013460:	b480      	push	{r7}
 8013462:	b085      	sub	sp, #20
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801346e:	d130      	bne.n	80134d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8013470:	4b23      	ldr	r3, [pc, #140]	; (8013500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801347c:	d038      	beq.n	80134f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801347e:	4b20      	ldr	r3, [pc, #128]	; (8013500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8013486:	4a1e      	ldr	r2, [pc, #120]	; (8013500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801348c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801348e:	4b1d      	ldr	r3, [pc, #116]	; (8013504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	2232      	movs	r2, #50	; 0x32
 8013494:	fb02 f303 	mul.w	r3, r2, r3
 8013498:	4a1b      	ldr	r2, [pc, #108]	; (8013508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801349a:	fba2 2303 	umull	r2, r3, r2, r3
 801349e:	0c9b      	lsrs	r3, r3, #18
 80134a0:	3301      	adds	r3, #1
 80134a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80134a4:	e002      	b.n	80134ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	3b01      	subs	r3, #1
 80134aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80134ac:	4b14      	ldr	r3, [pc, #80]	; (8013500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80134ae:	695b      	ldr	r3, [r3, #20]
 80134b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80134b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80134b8:	d102      	bne.n	80134c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d1f2      	bne.n	80134a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80134c0:	4b0f      	ldr	r3, [pc, #60]	; (8013500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80134c2:	695b      	ldr	r3, [r3, #20]
 80134c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80134c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80134cc:	d110      	bne.n	80134f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80134ce:	2303      	movs	r3, #3
 80134d0:	e00f      	b.n	80134f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80134d2:	4b0b      	ldr	r3, [pc, #44]	; (8013500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80134da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80134de:	d007      	beq.n	80134f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80134e0:	4b07      	ldr	r3, [pc, #28]	; (8013500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80134e8:	4a05      	ldr	r2, [pc, #20]	; (8013500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80134ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80134ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80134f0:	2300      	movs	r3, #0
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3714      	adds	r7, #20
 80134f6:	46bd      	mov	sp, r7
 80134f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fc:	4770      	bx	lr
 80134fe:	bf00      	nop
 8013500:	40007000 	.word	0x40007000
 8013504:	20000000 	.word	0x20000000
 8013508:	431bde83 	.word	0x431bde83

0801350c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 801350c:	b480      	push	{r7}
 801350e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8013510:	4b05      	ldr	r3, [pc, #20]	; (8013528 <HAL_PWREx_EnableVddUSB+0x1c>)
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	4a04      	ldr	r2, [pc, #16]	; (8013528 <HAL_PWREx_EnableVddUSB+0x1c>)
 8013516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801351a:	6053      	str	r3, [r2, #4]
}
 801351c:	bf00      	nop
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr
 8013526:	bf00      	nop
 8013528:	40007000 	.word	0x40007000

0801352c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b088      	sub	sp, #32
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d102      	bne.n	8013540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801353a:	2301      	movs	r3, #1
 801353c:	f000 bc02 	b.w	8013d44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013540:	4b96      	ldr	r3, [pc, #600]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013542:	689b      	ldr	r3, [r3, #8]
 8013544:	f003 030c 	and.w	r3, r3, #12
 8013548:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801354a:	4b94      	ldr	r3, [pc, #592]	; (801379c <HAL_RCC_OscConfig+0x270>)
 801354c:	68db      	ldr	r3, [r3, #12]
 801354e:	f003 0303 	and.w	r3, r3, #3
 8013552:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f003 0310 	and.w	r3, r3, #16
 801355c:	2b00      	cmp	r3, #0
 801355e:	f000 80e4 	beq.w	801372a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8013562:	69bb      	ldr	r3, [r7, #24]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d007      	beq.n	8013578 <HAL_RCC_OscConfig+0x4c>
 8013568:	69bb      	ldr	r3, [r7, #24]
 801356a:	2b0c      	cmp	r3, #12
 801356c:	f040 808b 	bne.w	8013686 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	2b01      	cmp	r3, #1
 8013574:	f040 8087 	bne.w	8013686 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013578:	4b88      	ldr	r3, [pc, #544]	; (801379c <HAL_RCC_OscConfig+0x270>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f003 0302 	and.w	r3, r3, #2
 8013580:	2b00      	cmp	r3, #0
 8013582:	d005      	beq.n	8013590 <HAL_RCC_OscConfig+0x64>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	699b      	ldr	r3, [r3, #24]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d101      	bne.n	8013590 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 801358c:	2301      	movs	r3, #1
 801358e:	e3d9      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6a1a      	ldr	r2, [r3, #32]
 8013594:	4b81      	ldr	r3, [pc, #516]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	f003 0308 	and.w	r3, r3, #8
 801359c:	2b00      	cmp	r3, #0
 801359e:	d004      	beq.n	80135aa <HAL_RCC_OscConfig+0x7e>
 80135a0:	4b7e      	ldr	r3, [pc, #504]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80135a8:	e005      	b.n	80135b6 <HAL_RCC_OscConfig+0x8a>
 80135aa:	4b7c      	ldr	r3, [pc, #496]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80135ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80135b0:	091b      	lsrs	r3, r3, #4
 80135b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d223      	bcs.n	8013602 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6a1b      	ldr	r3, [r3, #32]
 80135be:	4618      	mov	r0, r3
 80135c0:	f000 fd54 	bl	801406c <RCC_SetFlashLatencyFromMSIRange>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d001      	beq.n	80135ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80135ca:	2301      	movs	r3, #1
 80135cc:	e3ba      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80135ce:	4b73      	ldr	r3, [pc, #460]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	4a72      	ldr	r2, [pc, #456]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80135d4:	f043 0308 	orr.w	r3, r3, #8
 80135d8:	6013      	str	r3, [r2, #0]
 80135da:	4b70      	ldr	r3, [pc, #448]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6a1b      	ldr	r3, [r3, #32]
 80135e6:	496d      	ldr	r1, [pc, #436]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80135e8:	4313      	orrs	r3, r2
 80135ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80135ec:	4b6b      	ldr	r3, [pc, #428]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80135ee:	685b      	ldr	r3, [r3, #4]
 80135f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	69db      	ldr	r3, [r3, #28]
 80135f8:	021b      	lsls	r3, r3, #8
 80135fa:	4968      	ldr	r1, [pc, #416]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80135fc:	4313      	orrs	r3, r2
 80135fe:	604b      	str	r3, [r1, #4]
 8013600:	e025      	b.n	801364e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013602:	4b66      	ldr	r3, [pc, #408]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	4a65      	ldr	r2, [pc, #404]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013608:	f043 0308 	orr.w	r3, r3, #8
 801360c:	6013      	str	r3, [r2, #0]
 801360e:	4b63      	ldr	r3, [pc, #396]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6a1b      	ldr	r3, [r3, #32]
 801361a:	4960      	ldr	r1, [pc, #384]	; (801379c <HAL_RCC_OscConfig+0x270>)
 801361c:	4313      	orrs	r3, r2
 801361e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013620:	4b5e      	ldr	r3, [pc, #376]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	69db      	ldr	r3, [r3, #28]
 801362c:	021b      	lsls	r3, r3, #8
 801362e:	495b      	ldr	r1, [pc, #364]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013630:	4313      	orrs	r3, r2
 8013632:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013634:	69bb      	ldr	r3, [r7, #24]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d109      	bne.n	801364e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6a1b      	ldr	r3, [r3, #32]
 801363e:	4618      	mov	r0, r3
 8013640:	f000 fd14 	bl	801406c <RCC_SetFlashLatencyFromMSIRange>
 8013644:	4603      	mov	r3, r0
 8013646:	2b00      	cmp	r3, #0
 8013648:	d001      	beq.n	801364e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 801364a:	2301      	movs	r3, #1
 801364c:	e37a      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801364e:	f000 fc81 	bl	8013f54 <HAL_RCC_GetSysClockFreq>
 8013652:	4602      	mov	r2, r0
 8013654:	4b51      	ldr	r3, [pc, #324]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013656:	689b      	ldr	r3, [r3, #8]
 8013658:	091b      	lsrs	r3, r3, #4
 801365a:	f003 030f 	and.w	r3, r3, #15
 801365e:	4950      	ldr	r1, [pc, #320]	; (80137a0 <HAL_RCC_OscConfig+0x274>)
 8013660:	5ccb      	ldrb	r3, [r1, r3]
 8013662:	f003 031f 	and.w	r3, r3, #31
 8013666:	fa22 f303 	lsr.w	r3, r2, r3
 801366a:	4a4e      	ldr	r2, [pc, #312]	; (80137a4 <HAL_RCC_OscConfig+0x278>)
 801366c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801366e:	4b4e      	ldr	r3, [pc, #312]	; (80137a8 <HAL_RCC_OscConfig+0x27c>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	4618      	mov	r0, r3
 8013674:	f7fd fe02 	bl	801127c <HAL_InitTick>
 8013678:	4603      	mov	r3, r0
 801367a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 801367c:	7bfb      	ldrb	r3, [r7, #15]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d052      	beq.n	8013728 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8013682:	7bfb      	ldrb	r3, [r7, #15]
 8013684:	e35e      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	699b      	ldr	r3, [r3, #24]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d032      	beq.n	80136f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801368e:	4b43      	ldr	r3, [pc, #268]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	4a42      	ldr	r2, [pc, #264]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013694:	f043 0301 	orr.w	r3, r3, #1
 8013698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801369a:	f7fd fe3f 	bl	801131c <HAL_GetTick>
 801369e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80136a0:	e008      	b.n	80136b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80136a2:	f7fd fe3b 	bl	801131c <HAL_GetTick>
 80136a6:	4602      	mov	r2, r0
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	1ad3      	subs	r3, r2, r3
 80136ac:	2b02      	cmp	r3, #2
 80136ae:	d901      	bls.n	80136b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80136b0:	2303      	movs	r3, #3
 80136b2:	e347      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80136b4:	4b39      	ldr	r3, [pc, #228]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	f003 0302 	and.w	r3, r3, #2
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d0f0      	beq.n	80136a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80136c0:	4b36      	ldr	r3, [pc, #216]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	4a35      	ldr	r2, [pc, #212]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80136c6:	f043 0308 	orr.w	r3, r3, #8
 80136ca:	6013      	str	r3, [r2, #0]
 80136cc:	4b33      	ldr	r3, [pc, #204]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6a1b      	ldr	r3, [r3, #32]
 80136d8:	4930      	ldr	r1, [pc, #192]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80136da:	4313      	orrs	r3, r2
 80136dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80136de:	4b2f      	ldr	r3, [pc, #188]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	69db      	ldr	r3, [r3, #28]
 80136ea:	021b      	lsls	r3, r3, #8
 80136ec:	492b      	ldr	r1, [pc, #172]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80136ee:	4313      	orrs	r3, r2
 80136f0:	604b      	str	r3, [r1, #4]
 80136f2:	e01a      	b.n	801372a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80136f4:	4b29      	ldr	r3, [pc, #164]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	4a28      	ldr	r2, [pc, #160]	; (801379c <HAL_RCC_OscConfig+0x270>)
 80136fa:	f023 0301 	bic.w	r3, r3, #1
 80136fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013700:	f7fd fe0c 	bl	801131c <HAL_GetTick>
 8013704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013706:	e008      	b.n	801371a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013708:	f7fd fe08 	bl	801131c <HAL_GetTick>
 801370c:	4602      	mov	r2, r0
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	1ad3      	subs	r3, r2, r3
 8013712:	2b02      	cmp	r3, #2
 8013714:	d901      	bls.n	801371a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8013716:	2303      	movs	r3, #3
 8013718:	e314      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801371a:	4b20      	ldr	r3, [pc, #128]	; (801379c <HAL_RCC_OscConfig+0x270>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	f003 0302 	and.w	r3, r3, #2
 8013722:	2b00      	cmp	r3, #0
 8013724:	d1f0      	bne.n	8013708 <HAL_RCC_OscConfig+0x1dc>
 8013726:	e000      	b.n	801372a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013728:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f003 0301 	and.w	r3, r3, #1
 8013732:	2b00      	cmp	r3, #0
 8013734:	d073      	beq.n	801381e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	2b08      	cmp	r3, #8
 801373a:	d005      	beq.n	8013748 <HAL_RCC_OscConfig+0x21c>
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	2b0c      	cmp	r3, #12
 8013740:	d10e      	bne.n	8013760 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	2b03      	cmp	r3, #3
 8013746:	d10b      	bne.n	8013760 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013748:	4b14      	ldr	r3, [pc, #80]	; (801379c <HAL_RCC_OscConfig+0x270>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013750:	2b00      	cmp	r3, #0
 8013752:	d063      	beq.n	801381c <HAL_RCC_OscConfig+0x2f0>
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d15f      	bne.n	801381c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 801375c:	2301      	movs	r3, #1
 801375e:	e2f1      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013768:	d106      	bne.n	8013778 <HAL_RCC_OscConfig+0x24c>
 801376a:	4b0c      	ldr	r3, [pc, #48]	; (801379c <HAL_RCC_OscConfig+0x270>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	4a0b      	ldr	r2, [pc, #44]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013774:	6013      	str	r3, [r2, #0]
 8013776:	e025      	b.n	80137c4 <HAL_RCC_OscConfig+0x298>
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013780:	d114      	bne.n	80137ac <HAL_RCC_OscConfig+0x280>
 8013782:	4b06      	ldr	r3, [pc, #24]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	4a05      	ldr	r2, [pc, #20]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801378c:	6013      	str	r3, [r2, #0]
 801378e:	4b03      	ldr	r3, [pc, #12]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	4a02      	ldr	r2, [pc, #8]	; (801379c <HAL_RCC_OscConfig+0x270>)
 8013794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013798:	6013      	str	r3, [r2, #0]
 801379a:	e013      	b.n	80137c4 <HAL_RCC_OscConfig+0x298>
 801379c:	40021000 	.word	0x40021000
 80137a0:	0801c2a0 	.word	0x0801c2a0
 80137a4:	20000000 	.word	0x20000000
 80137a8:	20000004 	.word	0x20000004
 80137ac:	4ba0      	ldr	r3, [pc, #640]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	4a9f      	ldr	r2, [pc, #636]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80137b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80137b6:	6013      	str	r3, [r2, #0]
 80137b8:	4b9d      	ldr	r3, [pc, #628]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	4a9c      	ldr	r2, [pc, #624]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80137be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80137c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d013      	beq.n	80137f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80137cc:	f7fd fda6 	bl	801131c <HAL_GetTick>
 80137d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80137d2:	e008      	b.n	80137e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80137d4:	f7fd fda2 	bl	801131c <HAL_GetTick>
 80137d8:	4602      	mov	r2, r0
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	1ad3      	subs	r3, r2, r3
 80137de:	2b64      	cmp	r3, #100	; 0x64
 80137e0:	d901      	bls.n	80137e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80137e2:	2303      	movs	r3, #3
 80137e4:	e2ae      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80137e6:	4b92      	ldr	r3, [pc, #584]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d0f0      	beq.n	80137d4 <HAL_RCC_OscConfig+0x2a8>
 80137f2:	e014      	b.n	801381e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80137f4:	f7fd fd92 	bl	801131c <HAL_GetTick>
 80137f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80137fa:	e008      	b.n	801380e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80137fc:	f7fd fd8e 	bl	801131c <HAL_GetTick>
 8013800:	4602      	mov	r2, r0
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	1ad3      	subs	r3, r2, r3
 8013806:	2b64      	cmp	r3, #100	; 0x64
 8013808:	d901      	bls.n	801380e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801380a:	2303      	movs	r3, #3
 801380c:	e29a      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801380e:	4b88      	ldr	r3, [pc, #544]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013816:	2b00      	cmp	r3, #0
 8013818:	d1f0      	bne.n	80137fc <HAL_RCC_OscConfig+0x2d0>
 801381a:	e000      	b.n	801381e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	f003 0302 	and.w	r3, r3, #2
 8013826:	2b00      	cmp	r3, #0
 8013828:	d060      	beq.n	80138ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	2b04      	cmp	r3, #4
 801382e:	d005      	beq.n	801383c <HAL_RCC_OscConfig+0x310>
 8013830:	69bb      	ldr	r3, [r7, #24]
 8013832:	2b0c      	cmp	r3, #12
 8013834:	d119      	bne.n	801386a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	2b02      	cmp	r3, #2
 801383a:	d116      	bne.n	801386a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801383c:	4b7c      	ldr	r3, [pc, #496]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013844:	2b00      	cmp	r3, #0
 8013846:	d005      	beq.n	8013854 <HAL_RCC_OscConfig+0x328>
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d101      	bne.n	8013854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8013850:	2301      	movs	r3, #1
 8013852:	e277      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013854:	4b76      	ldr	r3, [pc, #472]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	691b      	ldr	r3, [r3, #16]
 8013860:	061b      	lsls	r3, r3, #24
 8013862:	4973      	ldr	r1, [pc, #460]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013864:	4313      	orrs	r3, r2
 8013866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013868:	e040      	b.n	80138ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d023      	beq.n	80138ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013872:	4b6f      	ldr	r3, [pc, #444]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	4a6e      	ldr	r2, [pc, #440]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801387c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801387e:	f7fd fd4d 	bl	801131c <HAL_GetTick>
 8013882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013884:	e008      	b.n	8013898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013886:	f7fd fd49 	bl	801131c <HAL_GetTick>
 801388a:	4602      	mov	r2, r0
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	1ad3      	subs	r3, r2, r3
 8013890:	2b02      	cmp	r3, #2
 8013892:	d901      	bls.n	8013898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8013894:	2303      	movs	r3, #3
 8013896:	e255      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013898:	4b65      	ldr	r3, [pc, #404]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d0f0      	beq.n	8013886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80138a4:	4b62      	ldr	r3, [pc, #392]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80138a6:	685b      	ldr	r3, [r3, #4]
 80138a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	691b      	ldr	r3, [r3, #16]
 80138b0:	061b      	lsls	r3, r3, #24
 80138b2:	495f      	ldr	r1, [pc, #380]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80138b4:	4313      	orrs	r3, r2
 80138b6:	604b      	str	r3, [r1, #4]
 80138b8:	e018      	b.n	80138ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80138ba:	4b5d      	ldr	r3, [pc, #372]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	4a5c      	ldr	r2, [pc, #368]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80138c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80138c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80138c6:	f7fd fd29 	bl	801131c <HAL_GetTick>
 80138ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80138cc:	e008      	b.n	80138e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80138ce:	f7fd fd25 	bl	801131c <HAL_GetTick>
 80138d2:	4602      	mov	r2, r0
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	1ad3      	subs	r3, r2, r3
 80138d8:	2b02      	cmp	r3, #2
 80138da:	d901      	bls.n	80138e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80138dc:	2303      	movs	r3, #3
 80138de:	e231      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80138e0:	4b53      	ldr	r3, [pc, #332]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d1f0      	bne.n	80138ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	f003 0308 	and.w	r3, r3, #8
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d03c      	beq.n	8013972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	695b      	ldr	r3, [r3, #20]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d01c      	beq.n	801393a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013900:	4b4b      	ldr	r3, [pc, #300]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013906:	4a4a      	ldr	r2, [pc, #296]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013908:	f043 0301 	orr.w	r3, r3, #1
 801390c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013910:	f7fd fd04 	bl	801131c <HAL_GetTick>
 8013914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013916:	e008      	b.n	801392a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013918:	f7fd fd00 	bl	801131c <HAL_GetTick>
 801391c:	4602      	mov	r2, r0
 801391e:	693b      	ldr	r3, [r7, #16]
 8013920:	1ad3      	subs	r3, r2, r3
 8013922:	2b02      	cmp	r3, #2
 8013924:	d901      	bls.n	801392a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8013926:	2303      	movs	r3, #3
 8013928:	e20c      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801392a:	4b41      	ldr	r3, [pc, #260]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 801392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013930:	f003 0302 	and.w	r3, r3, #2
 8013934:	2b00      	cmp	r3, #0
 8013936:	d0ef      	beq.n	8013918 <HAL_RCC_OscConfig+0x3ec>
 8013938:	e01b      	b.n	8013972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801393a:	4b3d      	ldr	r3, [pc, #244]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 801393c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013940:	4a3b      	ldr	r2, [pc, #236]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013942:	f023 0301 	bic.w	r3, r3, #1
 8013946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801394a:	f7fd fce7 	bl	801131c <HAL_GetTick>
 801394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013950:	e008      	b.n	8013964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013952:	f7fd fce3 	bl	801131c <HAL_GetTick>
 8013956:	4602      	mov	r2, r0
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	1ad3      	subs	r3, r2, r3
 801395c:	2b02      	cmp	r3, #2
 801395e:	d901      	bls.n	8013964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8013960:	2303      	movs	r3, #3
 8013962:	e1ef      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013964:	4b32      	ldr	r3, [pc, #200]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801396a:	f003 0302 	and.w	r3, r3, #2
 801396e:	2b00      	cmp	r3, #0
 8013970:	d1ef      	bne.n	8013952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	f003 0304 	and.w	r3, r3, #4
 801397a:	2b00      	cmp	r3, #0
 801397c:	f000 80a6 	beq.w	8013acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013980:	2300      	movs	r3, #0
 8013982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8013984:	4b2a      	ldr	r3, [pc, #168]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801398c:	2b00      	cmp	r3, #0
 801398e:	d10d      	bne.n	80139ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013990:	4b27      	ldr	r3, [pc, #156]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013994:	4a26      	ldr	r2, [pc, #152]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801399a:	6593      	str	r3, [r2, #88]	; 0x58
 801399c:	4b24      	ldr	r3, [pc, #144]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 801399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80139a4:	60bb      	str	r3, [r7, #8]
 80139a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80139a8:	2301      	movs	r3, #1
 80139aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80139ac:	4b21      	ldr	r3, [pc, #132]	; (8013a34 <HAL_RCC_OscConfig+0x508>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d118      	bne.n	80139ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80139b8:	4b1e      	ldr	r3, [pc, #120]	; (8013a34 <HAL_RCC_OscConfig+0x508>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	4a1d      	ldr	r2, [pc, #116]	; (8013a34 <HAL_RCC_OscConfig+0x508>)
 80139be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80139c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80139c4:	f7fd fcaa 	bl	801131c <HAL_GetTick>
 80139c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80139ca:	e008      	b.n	80139de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80139cc:	f7fd fca6 	bl	801131c <HAL_GetTick>
 80139d0:	4602      	mov	r2, r0
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	1ad3      	subs	r3, r2, r3
 80139d6:	2b02      	cmp	r3, #2
 80139d8:	d901      	bls.n	80139de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80139da:	2303      	movs	r3, #3
 80139dc:	e1b2      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80139de:	4b15      	ldr	r3, [pc, #84]	; (8013a34 <HAL_RCC_OscConfig+0x508>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d0f0      	beq.n	80139cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	689b      	ldr	r3, [r3, #8]
 80139ee:	2b01      	cmp	r3, #1
 80139f0:	d108      	bne.n	8013a04 <HAL_RCC_OscConfig+0x4d8>
 80139f2:	4b0f      	ldr	r3, [pc, #60]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80139f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139f8:	4a0d      	ldr	r2, [pc, #52]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 80139fa:	f043 0301 	orr.w	r3, r3, #1
 80139fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013a02:	e029      	b.n	8013a58 <HAL_RCC_OscConfig+0x52c>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	689b      	ldr	r3, [r3, #8]
 8013a08:	2b05      	cmp	r3, #5
 8013a0a:	d115      	bne.n	8013a38 <HAL_RCC_OscConfig+0x50c>
 8013a0c:	4b08      	ldr	r3, [pc, #32]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a12:	4a07      	ldr	r2, [pc, #28]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013a14:	f043 0304 	orr.w	r3, r3, #4
 8013a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013a1c:	4b04      	ldr	r3, [pc, #16]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a22:	4a03      	ldr	r2, [pc, #12]	; (8013a30 <HAL_RCC_OscConfig+0x504>)
 8013a24:	f043 0301 	orr.w	r3, r3, #1
 8013a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013a2c:	e014      	b.n	8013a58 <HAL_RCC_OscConfig+0x52c>
 8013a2e:	bf00      	nop
 8013a30:	40021000 	.word	0x40021000
 8013a34:	40007000 	.word	0x40007000
 8013a38:	4b9a      	ldr	r3, [pc, #616]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a3e:	4a99      	ldr	r2, [pc, #612]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013a40:	f023 0301 	bic.w	r3, r3, #1
 8013a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013a48:	4b96      	ldr	r3, [pc, #600]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a4e:	4a95      	ldr	r2, [pc, #596]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013a50:	f023 0304 	bic.w	r3, r3, #4
 8013a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	689b      	ldr	r3, [r3, #8]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d016      	beq.n	8013a8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013a60:	f7fd fc5c 	bl	801131c <HAL_GetTick>
 8013a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013a66:	e00a      	b.n	8013a7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013a68:	f7fd fc58 	bl	801131c <HAL_GetTick>
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	1ad3      	subs	r3, r2, r3
 8013a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d901      	bls.n	8013a7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8013a7a:	2303      	movs	r3, #3
 8013a7c:	e162      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013a7e:	4b89      	ldr	r3, [pc, #548]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a84:	f003 0302 	and.w	r3, r3, #2
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d0ed      	beq.n	8013a68 <HAL_RCC_OscConfig+0x53c>
 8013a8c:	e015      	b.n	8013aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013a8e:	f7fd fc45 	bl	801131c <HAL_GetTick>
 8013a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013a94:	e00a      	b.n	8013aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013a96:	f7fd fc41 	bl	801131c <HAL_GetTick>
 8013a9a:	4602      	mov	r2, r0
 8013a9c:	693b      	ldr	r3, [r7, #16]
 8013a9e:	1ad3      	subs	r3, r2, r3
 8013aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013aa4:	4293      	cmp	r3, r2
 8013aa6:	d901      	bls.n	8013aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	e14b      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013aac:	4b7d      	ldr	r3, [pc, #500]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ab2:	f003 0302 	and.w	r3, r3, #2
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d1ed      	bne.n	8013a96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013aba:	7ffb      	ldrb	r3, [r7, #31]
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d105      	bne.n	8013acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013ac0:	4b78      	ldr	r3, [pc, #480]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ac4:	4a77      	ldr	r2, [pc, #476]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013aca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	f003 0320 	and.w	r3, r3, #32
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d03c      	beq.n	8013b52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d01c      	beq.n	8013b1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013ae0:	4b70      	ldr	r3, [pc, #448]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013ae6:	4a6f      	ldr	r2, [pc, #444]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013ae8:	f043 0301 	orr.w	r3, r3, #1
 8013aec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013af0:	f7fd fc14 	bl	801131c <HAL_GetTick>
 8013af4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8013af6:	e008      	b.n	8013b0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013af8:	f7fd fc10 	bl	801131c <HAL_GetTick>
 8013afc:	4602      	mov	r2, r0
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	1ad3      	subs	r3, r2, r3
 8013b02:	2b02      	cmp	r3, #2
 8013b04:	d901      	bls.n	8013b0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8013b06:	2303      	movs	r3, #3
 8013b08:	e11c      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8013b0a:	4b66      	ldr	r3, [pc, #408]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013b10:	f003 0302 	and.w	r3, r3, #2
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d0ef      	beq.n	8013af8 <HAL_RCC_OscConfig+0x5cc>
 8013b18:	e01b      	b.n	8013b52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013b1a:	4b62      	ldr	r3, [pc, #392]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013b20:	4a60      	ldr	r2, [pc, #384]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013b22:	f023 0301 	bic.w	r3, r3, #1
 8013b26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013b2a:	f7fd fbf7 	bl	801131c <HAL_GetTick>
 8013b2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8013b30:	e008      	b.n	8013b44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013b32:	f7fd fbf3 	bl	801131c <HAL_GetTick>
 8013b36:	4602      	mov	r2, r0
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	1ad3      	subs	r3, r2, r3
 8013b3c:	2b02      	cmp	r3, #2
 8013b3e:	d901      	bls.n	8013b44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8013b40:	2303      	movs	r3, #3
 8013b42:	e0ff      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8013b44:	4b57      	ldr	r3, [pc, #348]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013b4a:	f003 0302 	and.w	r3, r3, #2
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d1ef      	bne.n	8013b32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	f000 80f3 	beq.w	8013d42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b60:	2b02      	cmp	r3, #2
 8013b62:	f040 80c9 	bne.w	8013cf8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8013b66:	4b4f      	ldr	r3, [pc, #316]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	f003 0203 	and.w	r2, r3, #3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d12c      	bne.n	8013bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b84:	3b01      	subs	r3, #1
 8013b86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d123      	bne.n	8013bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d11b      	bne.n	8013bd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ba6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d113      	bne.n	8013bd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bb6:	085b      	lsrs	r3, r3, #1
 8013bb8:	3b01      	subs	r3, #1
 8013bba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d109      	bne.n	8013bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bca:	085b      	lsrs	r3, r3, #1
 8013bcc:	3b01      	subs	r3, #1
 8013bce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	d06b      	beq.n	8013cac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	2b0c      	cmp	r3, #12
 8013bd8:	d062      	beq.n	8013ca0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8013bda:	4b32      	ldr	r3, [pc, #200]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d001      	beq.n	8013bea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8013be6:	2301      	movs	r3, #1
 8013be8:	e0ac      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8013bea:	4b2e      	ldr	r3, [pc, #184]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	4a2d      	ldr	r2, [pc, #180]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013bf4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013bf6:	f7fd fb91 	bl	801131c <HAL_GetTick>
 8013bfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013bfc:	e008      	b.n	8013c10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013bfe:	f7fd fb8d 	bl	801131c <HAL_GetTick>
 8013c02:	4602      	mov	r2, r0
 8013c04:	693b      	ldr	r3, [r7, #16]
 8013c06:	1ad3      	subs	r3, r2, r3
 8013c08:	2b02      	cmp	r3, #2
 8013c0a:	d901      	bls.n	8013c10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8013c0c:	2303      	movs	r3, #3
 8013c0e:	e099      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013c10:	4b24      	ldr	r3, [pc, #144]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d1f0      	bne.n	8013bfe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013c1c:	4b21      	ldr	r3, [pc, #132]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013c1e:	68da      	ldr	r2, [r3, #12]
 8013c20:	4b21      	ldr	r3, [pc, #132]	; (8013ca8 <HAL_RCC_OscConfig+0x77c>)
 8013c22:	4013      	ands	r3, r2
 8013c24:	687a      	ldr	r2, [r7, #4]
 8013c26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013c2c:	3a01      	subs	r2, #1
 8013c2e:	0112      	lsls	r2, r2, #4
 8013c30:	4311      	orrs	r1, r2
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013c36:	0212      	lsls	r2, r2, #8
 8013c38:	4311      	orrs	r1, r2
 8013c3a:	687a      	ldr	r2, [r7, #4]
 8013c3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013c3e:	0852      	lsrs	r2, r2, #1
 8013c40:	3a01      	subs	r2, #1
 8013c42:	0552      	lsls	r2, r2, #21
 8013c44:	4311      	orrs	r1, r2
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013c4a:	0852      	lsrs	r2, r2, #1
 8013c4c:	3a01      	subs	r2, #1
 8013c4e:	0652      	lsls	r2, r2, #25
 8013c50:	4311      	orrs	r1, r2
 8013c52:	687a      	ldr	r2, [r7, #4]
 8013c54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013c56:	06d2      	lsls	r2, r2, #27
 8013c58:	430a      	orrs	r2, r1
 8013c5a:	4912      	ldr	r1, [pc, #72]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013c5c:	4313      	orrs	r3, r2
 8013c5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8013c60:	4b10      	ldr	r3, [pc, #64]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4a0f      	ldr	r2, [pc, #60]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013c6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013c6c:	4b0d      	ldr	r3, [pc, #52]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013c6e:	68db      	ldr	r3, [r3, #12]
 8013c70:	4a0c      	ldr	r2, [pc, #48]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013c76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013c78:	f7fd fb50 	bl	801131c <HAL_GetTick>
 8013c7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013c7e:	e008      	b.n	8013c92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013c80:	f7fd fb4c 	bl	801131c <HAL_GetTick>
 8013c84:	4602      	mov	r2, r0
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	1ad3      	subs	r3, r2, r3
 8013c8a:	2b02      	cmp	r3, #2
 8013c8c:	d901      	bls.n	8013c92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8013c8e:	2303      	movs	r3, #3
 8013c90:	e058      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013c92:	4b04      	ldr	r3, [pc, #16]	; (8013ca4 <HAL_RCC_OscConfig+0x778>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d0f0      	beq.n	8013c80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013c9e:	e050      	b.n	8013d42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	e04f      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
 8013ca4:	40021000 	.word	0x40021000
 8013ca8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013cac:	4b27      	ldr	r3, [pc, #156]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d144      	bne.n	8013d42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8013cb8:	4b24      	ldr	r3, [pc, #144]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	4a23      	ldr	r2, [pc, #140]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013cc4:	4b21      	ldr	r3, [pc, #132]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013cc6:	68db      	ldr	r3, [r3, #12]
 8013cc8:	4a20      	ldr	r2, [pc, #128]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013cd0:	f7fd fb24 	bl	801131c <HAL_GetTick>
 8013cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013cd6:	e008      	b.n	8013cea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013cd8:	f7fd fb20 	bl	801131c <HAL_GetTick>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	693b      	ldr	r3, [r7, #16]
 8013ce0:	1ad3      	subs	r3, r2, r3
 8013ce2:	2b02      	cmp	r3, #2
 8013ce4:	d901      	bls.n	8013cea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8013ce6:	2303      	movs	r3, #3
 8013ce8:	e02c      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013cea:	4b18      	ldr	r3, [pc, #96]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d0f0      	beq.n	8013cd8 <HAL_RCC_OscConfig+0x7ac>
 8013cf6:	e024      	b.n	8013d42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013cf8:	69bb      	ldr	r3, [r7, #24]
 8013cfa:	2b0c      	cmp	r3, #12
 8013cfc:	d01f      	beq.n	8013d3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013cfe:	4b13      	ldr	r3, [pc, #76]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	4a12      	ldr	r2, [pc, #72]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013d0a:	f7fd fb07 	bl	801131c <HAL_GetTick>
 8013d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013d10:	e008      	b.n	8013d24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013d12:	f7fd fb03 	bl	801131c <HAL_GetTick>
 8013d16:	4602      	mov	r2, r0
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	1ad3      	subs	r3, r2, r3
 8013d1c:	2b02      	cmp	r3, #2
 8013d1e:	d901      	bls.n	8013d24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8013d20:	2303      	movs	r3, #3
 8013d22:	e00f      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013d24:	4b09      	ldr	r3, [pc, #36]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d1f0      	bne.n	8013d12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8013d30:	4b06      	ldr	r3, [pc, #24]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013d32:	68da      	ldr	r2, [r3, #12]
 8013d34:	4905      	ldr	r1, [pc, #20]	; (8013d4c <HAL_RCC_OscConfig+0x820>)
 8013d36:	4b06      	ldr	r3, [pc, #24]	; (8013d50 <HAL_RCC_OscConfig+0x824>)
 8013d38:	4013      	ands	r3, r2
 8013d3a:	60cb      	str	r3, [r1, #12]
 8013d3c:	e001      	b.n	8013d42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	e000      	b.n	8013d44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3720      	adds	r7, #32
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	40021000 	.word	0x40021000
 8013d50:	feeefffc 	.word	0xfeeefffc

08013d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d101      	bne.n	8013d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013d64:	2301      	movs	r3, #1
 8013d66:	e0e7      	b.n	8013f38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013d68:	4b75      	ldr	r3, [pc, #468]	; (8013f40 <HAL_RCC_ClockConfig+0x1ec>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	f003 0307 	and.w	r3, r3, #7
 8013d70:	683a      	ldr	r2, [r7, #0]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d910      	bls.n	8013d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013d76:	4b72      	ldr	r3, [pc, #456]	; (8013f40 <HAL_RCC_ClockConfig+0x1ec>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f023 0207 	bic.w	r2, r3, #7
 8013d7e:	4970      	ldr	r1, [pc, #448]	; (8013f40 <HAL_RCC_ClockConfig+0x1ec>)
 8013d80:	683b      	ldr	r3, [r7, #0]
 8013d82:	4313      	orrs	r3, r2
 8013d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013d86:	4b6e      	ldr	r3, [pc, #440]	; (8013f40 <HAL_RCC_ClockConfig+0x1ec>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	f003 0307 	and.w	r3, r3, #7
 8013d8e:	683a      	ldr	r2, [r7, #0]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d001      	beq.n	8013d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8013d94:	2301      	movs	r3, #1
 8013d96:	e0cf      	b.n	8013f38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f003 0302 	and.w	r3, r3, #2
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d010      	beq.n	8013dc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	689a      	ldr	r2, [r3, #8]
 8013da8:	4b66      	ldr	r3, [pc, #408]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013daa:	689b      	ldr	r3, [r3, #8]
 8013dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d908      	bls.n	8013dc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013db4:	4b63      	ldr	r3, [pc, #396]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013db6:	689b      	ldr	r3, [r3, #8]
 8013db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	689b      	ldr	r3, [r3, #8]
 8013dc0:	4960      	ldr	r1, [pc, #384]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013dc2:	4313      	orrs	r3, r2
 8013dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f003 0301 	and.w	r3, r3, #1
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d04c      	beq.n	8013e6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	685b      	ldr	r3, [r3, #4]
 8013dd6:	2b03      	cmp	r3, #3
 8013dd8:	d107      	bne.n	8013dea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013dda:	4b5a      	ldr	r3, [pc, #360]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d121      	bne.n	8013e2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8013de6:	2301      	movs	r3, #1
 8013de8:	e0a6      	b.n	8013f38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	2b02      	cmp	r3, #2
 8013df0:	d107      	bne.n	8013e02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013df2:	4b54      	ldr	r3, [pc, #336]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d115      	bne.n	8013e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8013dfe:	2301      	movs	r3, #1
 8013e00:	e09a      	b.n	8013f38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d107      	bne.n	8013e1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013e0a:	4b4e      	ldr	r3, [pc, #312]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	f003 0302 	and.w	r3, r3, #2
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d109      	bne.n	8013e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8013e16:	2301      	movs	r3, #1
 8013e18:	e08e      	b.n	8013f38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013e1a:	4b4a      	ldr	r3, [pc, #296]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d101      	bne.n	8013e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8013e26:	2301      	movs	r3, #1
 8013e28:	e086      	b.n	8013f38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013e2a:	4b46      	ldr	r3, [pc, #280]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013e2c:	689b      	ldr	r3, [r3, #8]
 8013e2e:	f023 0203 	bic.w	r2, r3, #3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	4943      	ldr	r1, [pc, #268]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013e38:	4313      	orrs	r3, r2
 8013e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013e3c:	f7fd fa6e 	bl	801131c <HAL_GetTick>
 8013e40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013e42:	e00a      	b.n	8013e5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013e44:	f7fd fa6a 	bl	801131c <HAL_GetTick>
 8013e48:	4602      	mov	r2, r0
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	1ad3      	subs	r3, r2, r3
 8013e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d901      	bls.n	8013e5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8013e56:	2303      	movs	r3, #3
 8013e58:	e06e      	b.n	8013f38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013e5a:	4b3a      	ldr	r3, [pc, #232]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013e5c:	689b      	ldr	r3, [r3, #8]
 8013e5e:	f003 020c 	and.w	r2, r3, #12
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d1eb      	bne.n	8013e44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f003 0302 	and.w	r3, r3, #2
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d010      	beq.n	8013e9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	689a      	ldr	r2, [r3, #8]
 8013e7c:	4b31      	ldr	r3, [pc, #196]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013e7e:	689b      	ldr	r3, [r3, #8]
 8013e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d208      	bcs.n	8013e9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013e88:	4b2e      	ldr	r3, [pc, #184]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013e8a:	689b      	ldr	r3, [r3, #8]
 8013e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	689b      	ldr	r3, [r3, #8]
 8013e94:	492b      	ldr	r1, [pc, #172]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013e96:	4313      	orrs	r3, r2
 8013e98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013e9a:	4b29      	ldr	r3, [pc, #164]	; (8013f40 <HAL_RCC_ClockConfig+0x1ec>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	f003 0307 	and.w	r3, r3, #7
 8013ea2:	683a      	ldr	r2, [r7, #0]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d210      	bcs.n	8013eca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013ea8:	4b25      	ldr	r3, [pc, #148]	; (8013f40 <HAL_RCC_ClockConfig+0x1ec>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	f023 0207 	bic.w	r2, r3, #7
 8013eb0:	4923      	ldr	r1, [pc, #140]	; (8013f40 <HAL_RCC_ClockConfig+0x1ec>)
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	4313      	orrs	r3, r2
 8013eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013eb8:	4b21      	ldr	r3, [pc, #132]	; (8013f40 <HAL_RCC_ClockConfig+0x1ec>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	f003 0307 	and.w	r3, r3, #7
 8013ec0:	683a      	ldr	r2, [r7, #0]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d001      	beq.n	8013eca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	e036      	b.n	8013f38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	f003 0304 	and.w	r3, r3, #4
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d008      	beq.n	8013ee8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013ed6:	4b1b      	ldr	r3, [pc, #108]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013ed8:	689b      	ldr	r3, [r3, #8]
 8013eda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	68db      	ldr	r3, [r3, #12]
 8013ee2:	4918      	ldr	r1, [pc, #96]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013ee4:	4313      	orrs	r3, r2
 8013ee6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	f003 0308 	and.w	r3, r3, #8
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d009      	beq.n	8013f08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013ef4:	4b13      	ldr	r3, [pc, #76]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013ef6:	689b      	ldr	r3, [r3, #8]
 8013ef8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	691b      	ldr	r3, [r3, #16]
 8013f00:	00db      	lsls	r3, r3, #3
 8013f02:	4910      	ldr	r1, [pc, #64]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013f04:	4313      	orrs	r3, r2
 8013f06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013f08:	f000 f824 	bl	8013f54 <HAL_RCC_GetSysClockFreq>
 8013f0c:	4602      	mov	r2, r0
 8013f0e:	4b0d      	ldr	r3, [pc, #52]	; (8013f44 <HAL_RCC_ClockConfig+0x1f0>)
 8013f10:	689b      	ldr	r3, [r3, #8]
 8013f12:	091b      	lsrs	r3, r3, #4
 8013f14:	f003 030f 	and.w	r3, r3, #15
 8013f18:	490b      	ldr	r1, [pc, #44]	; (8013f48 <HAL_RCC_ClockConfig+0x1f4>)
 8013f1a:	5ccb      	ldrb	r3, [r1, r3]
 8013f1c:	f003 031f 	and.w	r3, r3, #31
 8013f20:	fa22 f303 	lsr.w	r3, r2, r3
 8013f24:	4a09      	ldr	r2, [pc, #36]	; (8013f4c <HAL_RCC_ClockConfig+0x1f8>)
 8013f26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8013f28:	4b09      	ldr	r3, [pc, #36]	; (8013f50 <HAL_RCC_ClockConfig+0x1fc>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fd f9a5 	bl	801127c <HAL_InitTick>
 8013f32:	4603      	mov	r3, r0
 8013f34:	72fb      	strb	r3, [r7, #11]

  return status;
 8013f36:	7afb      	ldrb	r3, [r7, #11]
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3710      	adds	r7, #16
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}
 8013f40:	40022000 	.word	0x40022000
 8013f44:	40021000 	.word	0x40021000
 8013f48:	0801c2a0 	.word	0x0801c2a0
 8013f4c:	20000000 	.word	0x20000000
 8013f50:	20000004 	.word	0x20000004

08013f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b089      	sub	sp, #36	; 0x24
 8013f58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	61fb      	str	r3, [r7, #28]
 8013f5e:	2300      	movs	r3, #0
 8013f60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013f62:	4b3e      	ldr	r3, [pc, #248]	; (801405c <HAL_RCC_GetSysClockFreq+0x108>)
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	f003 030c 	and.w	r3, r3, #12
 8013f6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013f6c:	4b3b      	ldr	r3, [pc, #236]	; (801405c <HAL_RCC_GetSysClockFreq+0x108>)
 8013f6e:	68db      	ldr	r3, [r3, #12]
 8013f70:	f003 0303 	and.w	r3, r3, #3
 8013f74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d005      	beq.n	8013f88 <HAL_RCC_GetSysClockFreq+0x34>
 8013f7c:	693b      	ldr	r3, [r7, #16]
 8013f7e:	2b0c      	cmp	r3, #12
 8013f80:	d121      	bne.n	8013fc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2b01      	cmp	r3, #1
 8013f86:	d11e      	bne.n	8013fc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8013f88:	4b34      	ldr	r3, [pc, #208]	; (801405c <HAL_RCC_GetSysClockFreq+0x108>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	f003 0308 	and.w	r3, r3, #8
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d107      	bne.n	8013fa4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8013f94:	4b31      	ldr	r3, [pc, #196]	; (801405c <HAL_RCC_GetSysClockFreq+0x108>)
 8013f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013f9a:	0a1b      	lsrs	r3, r3, #8
 8013f9c:	f003 030f 	and.w	r3, r3, #15
 8013fa0:	61fb      	str	r3, [r7, #28]
 8013fa2:	e005      	b.n	8013fb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8013fa4:	4b2d      	ldr	r3, [pc, #180]	; (801405c <HAL_RCC_GetSysClockFreq+0x108>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	091b      	lsrs	r3, r3, #4
 8013faa:	f003 030f 	and.w	r3, r3, #15
 8013fae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8013fb0:	4a2b      	ldr	r2, [pc, #172]	; (8014060 <HAL_RCC_GetSysClockFreq+0x10c>)
 8013fb2:	69fb      	ldr	r3, [r7, #28]
 8013fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013fb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d10d      	bne.n	8013fdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8013fc0:	69fb      	ldr	r3, [r7, #28]
 8013fc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013fc4:	e00a      	b.n	8013fdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	2b04      	cmp	r3, #4
 8013fca:	d102      	bne.n	8013fd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8013fcc:	4b25      	ldr	r3, [pc, #148]	; (8014064 <HAL_RCC_GetSysClockFreq+0x110>)
 8013fce:	61bb      	str	r3, [r7, #24]
 8013fd0:	e004      	b.n	8013fdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	2b08      	cmp	r3, #8
 8013fd6:	d101      	bne.n	8013fdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8013fd8:	4b23      	ldr	r3, [pc, #140]	; (8014068 <HAL_RCC_GetSysClockFreq+0x114>)
 8013fda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	2b0c      	cmp	r3, #12
 8013fe0:	d134      	bne.n	801404c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8013fe2:	4b1e      	ldr	r3, [pc, #120]	; (801405c <HAL_RCC_GetSysClockFreq+0x108>)
 8013fe4:	68db      	ldr	r3, [r3, #12]
 8013fe6:	f003 0303 	and.w	r3, r3, #3
 8013fea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	2b02      	cmp	r3, #2
 8013ff0:	d003      	beq.n	8013ffa <HAL_RCC_GetSysClockFreq+0xa6>
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	2b03      	cmp	r3, #3
 8013ff6:	d003      	beq.n	8014000 <HAL_RCC_GetSysClockFreq+0xac>
 8013ff8:	e005      	b.n	8014006 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8013ffa:	4b1a      	ldr	r3, [pc, #104]	; (8014064 <HAL_RCC_GetSysClockFreq+0x110>)
 8013ffc:	617b      	str	r3, [r7, #20]
      break;
 8013ffe:	e005      	b.n	801400c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8014000:	4b19      	ldr	r3, [pc, #100]	; (8014068 <HAL_RCC_GetSysClockFreq+0x114>)
 8014002:	617b      	str	r3, [r7, #20]
      break;
 8014004:	e002      	b.n	801400c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8014006:	69fb      	ldr	r3, [r7, #28]
 8014008:	617b      	str	r3, [r7, #20]
      break;
 801400a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801400c:	4b13      	ldr	r3, [pc, #76]	; (801405c <HAL_RCC_GetSysClockFreq+0x108>)
 801400e:	68db      	ldr	r3, [r3, #12]
 8014010:	091b      	lsrs	r3, r3, #4
 8014012:	f003 0307 	and.w	r3, r3, #7
 8014016:	3301      	adds	r3, #1
 8014018:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801401a:	4b10      	ldr	r3, [pc, #64]	; (801405c <HAL_RCC_GetSysClockFreq+0x108>)
 801401c:	68db      	ldr	r3, [r3, #12]
 801401e:	0a1b      	lsrs	r3, r3, #8
 8014020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014024:	697a      	ldr	r2, [r7, #20]
 8014026:	fb03 f202 	mul.w	r2, r3, r2
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014030:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8014032:	4b0a      	ldr	r3, [pc, #40]	; (801405c <HAL_RCC_GetSysClockFreq+0x108>)
 8014034:	68db      	ldr	r3, [r3, #12]
 8014036:	0e5b      	lsrs	r3, r3, #25
 8014038:	f003 0303 	and.w	r3, r3, #3
 801403c:	3301      	adds	r3, #1
 801403e:	005b      	lsls	r3, r3, #1
 8014040:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8014042:	697a      	ldr	r2, [r7, #20]
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	fbb2 f3f3 	udiv	r3, r2, r3
 801404a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801404c:	69bb      	ldr	r3, [r7, #24]
}
 801404e:	4618      	mov	r0, r3
 8014050:	3724      	adds	r7, #36	; 0x24
 8014052:	46bd      	mov	sp, r7
 8014054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014058:	4770      	bx	lr
 801405a:	bf00      	nop
 801405c:	40021000 	.word	0x40021000
 8014060:	0801c2b0 	.word	0x0801c2b0
 8014064:	00f42400 	.word	0x00f42400
 8014068:	007a1200 	.word	0x007a1200

0801406c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b086      	sub	sp, #24
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8014074:	2300      	movs	r3, #0
 8014076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8014078:	4b2a      	ldr	r3, [pc, #168]	; (8014124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014080:	2b00      	cmp	r3, #0
 8014082:	d003      	beq.n	801408c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8014084:	f7ff f9de 	bl	8013444 <HAL_PWREx_GetVoltageRange>
 8014088:	6178      	str	r0, [r7, #20]
 801408a:	e014      	b.n	80140b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801408c:	4b25      	ldr	r3, [pc, #148]	; (8014124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014090:	4a24      	ldr	r2, [pc, #144]	; (8014124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8014092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014096:	6593      	str	r3, [r2, #88]	; 0x58
 8014098:	4b22      	ldr	r3, [pc, #136]	; (8014124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801409c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80140a0:	60fb      	str	r3, [r7, #12]
 80140a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80140a4:	f7ff f9ce 	bl	8013444 <HAL_PWREx_GetVoltageRange>
 80140a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80140aa:	4b1e      	ldr	r3, [pc, #120]	; (8014124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80140ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140ae:	4a1d      	ldr	r2, [pc, #116]	; (8014124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80140b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80140b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80140bc:	d10b      	bne.n	80140d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2b80      	cmp	r3, #128	; 0x80
 80140c2:	d919      	bls.n	80140f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2ba0      	cmp	r3, #160	; 0xa0
 80140c8:	d902      	bls.n	80140d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80140ca:	2302      	movs	r3, #2
 80140cc:	613b      	str	r3, [r7, #16]
 80140ce:	e013      	b.n	80140f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80140d0:	2301      	movs	r3, #1
 80140d2:	613b      	str	r3, [r7, #16]
 80140d4:	e010      	b.n	80140f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2b80      	cmp	r3, #128	; 0x80
 80140da:	d902      	bls.n	80140e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80140dc:	2303      	movs	r3, #3
 80140de:	613b      	str	r3, [r7, #16]
 80140e0:	e00a      	b.n	80140f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2b80      	cmp	r3, #128	; 0x80
 80140e6:	d102      	bne.n	80140ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80140e8:	2302      	movs	r3, #2
 80140ea:	613b      	str	r3, [r7, #16]
 80140ec:	e004      	b.n	80140f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2b70      	cmp	r3, #112	; 0x70
 80140f2:	d101      	bne.n	80140f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80140f4:	2301      	movs	r3, #1
 80140f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80140f8:	4b0b      	ldr	r3, [pc, #44]	; (8014128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	f023 0207 	bic.w	r2, r3, #7
 8014100:	4909      	ldr	r1, [pc, #36]	; (8014128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8014102:	693b      	ldr	r3, [r7, #16]
 8014104:	4313      	orrs	r3, r2
 8014106:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8014108:	4b07      	ldr	r3, [pc, #28]	; (8014128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	f003 0307 	and.w	r3, r3, #7
 8014110:	693a      	ldr	r2, [r7, #16]
 8014112:	429a      	cmp	r2, r3
 8014114:	d001      	beq.n	801411a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8014116:	2301      	movs	r3, #1
 8014118:	e000      	b.n	801411c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3718      	adds	r7, #24
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}
 8014124:	40021000 	.word	0x40021000
 8014128:	40022000 	.word	0x40022000

0801412c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b086      	sub	sp, #24
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8014134:	2300      	movs	r3, #0
 8014136:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8014138:	2300      	movs	r3, #0
 801413a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014144:	2b00      	cmp	r3, #0
 8014146:	d031      	beq.n	80141ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801414c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8014150:	d01a      	beq.n	8014188 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8014152:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8014156:	d814      	bhi.n	8014182 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8014158:	2b00      	cmp	r3, #0
 801415a:	d009      	beq.n	8014170 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801415c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014160:	d10f      	bne.n	8014182 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8014162:	4b5d      	ldr	r3, [pc, #372]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8014164:	68db      	ldr	r3, [r3, #12]
 8014166:	4a5c      	ldr	r2, [pc, #368]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8014168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801416c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801416e:	e00c      	b.n	801418a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	3304      	adds	r3, #4
 8014174:	2100      	movs	r1, #0
 8014176:	4618      	mov	r0, r3
 8014178:	f000 f9de 	bl	8014538 <RCCEx_PLLSAI1_Config>
 801417c:	4603      	mov	r3, r0
 801417e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8014180:	e003      	b.n	801418a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8014182:	2301      	movs	r3, #1
 8014184:	74fb      	strb	r3, [r7, #19]
      break;
 8014186:	e000      	b.n	801418a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8014188:	bf00      	nop
    }

    if(ret == HAL_OK)
 801418a:	7cfb      	ldrb	r3, [r7, #19]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d10b      	bne.n	80141a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8014190:	4b51      	ldr	r3, [pc, #324]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8014192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801419e:	494e      	ldr	r1, [pc, #312]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80141a0:	4313      	orrs	r3, r2
 80141a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80141a6:	e001      	b.n	80141ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80141a8:	7cfb      	ldrb	r3, [r7, #19]
 80141aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	f000 809e 	beq.w	80142f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80141ba:	2300      	movs	r3, #0
 80141bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80141be:	4b46      	ldr	r3, [pc, #280]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80141c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d101      	bne.n	80141ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80141ca:	2301      	movs	r3, #1
 80141cc:	e000      	b.n	80141d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80141ce:	2300      	movs	r3, #0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d00d      	beq.n	80141f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80141d4:	4b40      	ldr	r3, [pc, #256]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80141d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141d8:	4a3f      	ldr	r2, [pc, #252]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80141da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80141de:	6593      	str	r3, [r2, #88]	; 0x58
 80141e0:	4b3d      	ldr	r3, [pc, #244]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80141e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80141e8:	60bb      	str	r3, [r7, #8]
 80141ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80141ec:	2301      	movs	r3, #1
 80141ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80141f0:	4b3a      	ldr	r3, [pc, #232]	; (80142dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	4a39      	ldr	r2, [pc, #228]	; (80142dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80141f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80141fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80141fc:	f7fd f88e 	bl	801131c <HAL_GetTick>
 8014200:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8014202:	e009      	b.n	8014218 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014204:	f7fd f88a 	bl	801131c <HAL_GetTick>
 8014208:	4602      	mov	r2, r0
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	1ad3      	subs	r3, r2, r3
 801420e:	2b02      	cmp	r3, #2
 8014210:	d902      	bls.n	8014218 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8014212:	2303      	movs	r3, #3
 8014214:	74fb      	strb	r3, [r7, #19]
        break;
 8014216:	e005      	b.n	8014224 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8014218:	4b30      	ldr	r3, [pc, #192]	; (80142dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014220:	2b00      	cmp	r3, #0
 8014222:	d0ef      	beq.n	8014204 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8014224:	7cfb      	ldrb	r3, [r7, #19]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d15a      	bne.n	80142e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801422a:	4b2b      	ldr	r3, [pc, #172]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014234:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d01e      	beq.n	801427a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014240:	697a      	ldr	r2, [r7, #20]
 8014242:	429a      	cmp	r2, r3
 8014244:	d019      	beq.n	801427a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8014246:	4b24      	ldr	r3, [pc, #144]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8014248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801424c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014250:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8014252:	4b21      	ldr	r3, [pc, #132]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8014254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014258:	4a1f      	ldr	r2, [pc, #124]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801425a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801425e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8014262:	4b1d      	ldr	r3, [pc, #116]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8014264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014268:	4a1b      	ldr	r2, [pc, #108]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8014272:	4a19      	ldr	r2, [pc, #100]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	f003 0301 	and.w	r3, r3, #1
 8014280:	2b00      	cmp	r3, #0
 8014282:	d016      	beq.n	80142b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014284:	f7fd f84a 	bl	801131c <HAL_GetTick>
 8014288:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801428a:	e00b      	b.n	80142a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801428c:	f7fd f846 	bl	801131c <HAL_GetTick>
 8014290:	4602      	mov	r2, r0
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	1ad3      	subs	r3, r2, r3
 8014296:	f241 3288 	movw	r2, #5000	; 0x1388
 801429a:	4293      	cmp	r3, r2
 801429c:	d902      	bls.n	80142a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 801429e:	2303      	movs	r3, #3
 80142a0:	74fb      	strb	r3, [r7, #19]
            break;
 80142a2:	e006      	b.n	80142b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80142a4:	4b0c      	ldr	r3, [pc, #48]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80142a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142aa:	f003 0302 	and.w	r3, r3, #2
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d0ec      	beq.n	801428c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80142b2:	7cfb      	ldrb	r3, [r7, #19]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d10b      	bne.n	80142d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80142b8:	4b07      	ldr	r3, [pc, #28]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80142ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142c6:	4904      	ldr	r1, [pc, #16]	; (80142d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80142c8:	4313      	orrs	r3, r2
 80142ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80142ce:	e009      	b.n	80142e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80142d0:	7cfb      	ldrb	r3, [r7, #19]
 80142d2:	74bb      	strb	r3, [r7, #18]
 80142d4:	e006      	b.n	80142e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80142d6:	bf00      	nop
 80142d8:	40021000 	.word	0x40021000
 80142dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80142e0:	7cfb      	ldrb	r3, [r7, #19]
 80142e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80142e4:	7c7b      	ldrb	r3, [r7, #17]
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	d105      	bne.n	80142f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80142ea:	4b8a      	ldr	r3, [pc, #552]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80142ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80142ee:	4a89      	ldr	r2, [pc, #548]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80142f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80142f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f003 0301 	and.w	r3, r3, #1
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d00a      	beq.n	8014318 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014302:	4b84      	ldr	r3, [pc, #528]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014308:	f023 0203 	bic.w	r2, r3, #3
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6a1b      	ldr	r3, [r3, #32]
 8014310:	4980      	ldr	r1, [pc, #512]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014312:	4313      	orrs	r3, r2
 8014314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	f003 0302 	and.w	r3, r3, #2
 8014320:	2b00      	cmp	r3, #0
 8014322:	d00a      	beq.n	801433a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014324:	4b7b      	ldr	r3, [pc, #492]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801432a:	f023 020c 	bic.w	r2, r3, #12
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014332:	4978      	ldr	r1, [pc, #480]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014334:	4313      	orrs	r3, r2
 8014336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	f003 0320 	and.w	r3, r3, #32
 8014342:	2b00      	cmp	r3, #0
 8014344:	d00a      	beq.n	801435c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014346:	4b73      	ldr	r3, [pc, #460]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801434c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014354:	496f      	ldr	r1, [pc, #444]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014356:	4313      	orrs	r3, r2
 8014358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014364:	2b00      	cmp	r3, #0
 8014366:	d00a      	beq.n	801437e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014368:	4b6a      	ldr	r3, [pc, #424]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 801436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801436e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014376:	4967      	ldr	r1, [pc, #412]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014378:	4313      	orrs	r3, r2
 801437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014386:	2b00      	cmp	r3, #0
 8014388:	d00a      	beq.n	80143a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801438a:	4b62      	ldr	r3, [pc, #392]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 801438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014398:	495e      	ldr	r1, [pc, #376]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 801439a:	4313      	orrs	r3, r2
 801439c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d00a      	beq.n	80143c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80143ac:	4b59      	ldr	r3, [pc, #356]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80143ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143ba:	4956      	ldr	r1, [pc, #344]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80143bc:	4313      	orrs	r3, r2
 80143be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d00a      	beq.n	80143e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80143ce:	4b51      	ldr	r3, [pc, #324]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80143d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143dc:	494d      	ldr	r1, [pc, #308]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80143de:	4313      	orrs	r3, r2
 80143e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d028      	beq.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80143f0:	4b48      	ldr	r3, [pc, #288]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80143f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143fe:	4945      	ldr	r1, [pc, #276]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014400:	4313      	orrs	r3, r2
 8014402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801440a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801440e:	d106      	bne.n	801441e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014410:	4b40      	ldr	r3, [pc, #256]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014412:	68db      	ldr	r3, [r3, #12]
 8014414:	4a3f      	ldr	r2, [pc, #252]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801441a:	60d3      	str	r3, [r2, #12]
 801441c:	e011      	b.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014426:	d10c      	bne.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	3304      	adds	r3, #4
 801442c:	2101      	movs	r1, #1
 801442e:	4618      	mov	r0, r3
 8014430:	f000 f882 	bl	8014538 <RCCEx_PLLSAI1_Config>
 8014434:	4603      	mov	r3, r0
 8014436:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8014438:	7cfb      	ldrb	r3, [r7, #19]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d001      	beq.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 801443e:	7cfb      	ldrb	r3, [r7, #19]
 8014440:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801444a:	2b00      	cmp	r3, #0
 801444c:	d028      	beq.n	80144a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801444e:	4b31      	ldr	r3, [pc, #196]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014454:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801445c:	492d      	ldr	r1, [pc, #180]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 801445e:	4313      	orrs	r3, r2
 8014460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801446c:	d106      	bne.n	801447c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801446e:	4b29      	ldr	r3, [pc, #164]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014470:	68db      	ldr	r3, [r3, #12]
 8014472:	4a28      	ldr	r2, [pc, #160]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014478:	60d3      	str	r3, [r2, #12]
 801447a:	e011      	b.n	80144a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014484:	d10c      	bne.n	80144a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	3304      	adds	r3, #4
 801448a:	2101      	movs	r1, #1
 801448c:	4618      	mov	r0, r3
 801448e:	f000 f853 	bl	8014538 <RCCEx_PLLSAI1_Config>
 8014492:	4603      	mov	r3, r0
 8014494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014496:	7cfb      	ldrb	r3, [r7, #19]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d001      	beq.n	80144a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 801449c:	7cfb      	ldrb	r3, [r7, #19]
 801449e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d01c      	beq.n	80144e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80144ac:	4b19      	ldr	r3, [pc, #100]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80144ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144ba:	4916      	ldr	r1, [pc, #88]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80144bc:	4313      	orrs	r3, r2
 80144be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80144ca:	d10c      	bne.n	80144e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	3304      	adds	r3, #4
 80144d0:	2102      	movs	r1, #2
 80144d2:	4618      	mov	r0, r3
 80144d4:	f000 f830 	bl	8014538 <RCCEx_PLLSAI1_Config>
 80144d8:	4603      	mov	r3, r0
 80144da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80144dc:	7cfb      	ldrb	r3, [r7, #19]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d001      	beq.n	80144e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80144e2:	7cfb      	ldrb	r3, [r7, #19]
 80144e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d00a      	beq.n	8014508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80144f2:	4b08      	ldr	r3, [pc, #32]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80144f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014500:	4904      	ldr	r1, [pc, #16]	; (8014514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8014502:	4313      	orrs	r3, r2
 8014504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8014508:	7cbb      	ldrb	r3, [r7, #18]
}
 801450a:	4618      	mov	r0, r3
 801450c:	3718      	adds	r7, #24
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	40021000 	.word	0x40021000

08014518 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8014518:	b480      	push	{r7}
 801451a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 801451c:	4b05      	ldr	r3, [pc, #20]	; (8014534 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4a04      	ldr	r2, [pc, #16]	; (8014534 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8014522:	f043 0304 	orr.w	r3, r3, #4
 8014526:	6013      	str	r3, [r2, #0]
}
 8014528:	bf00      	nop
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	40021000 	.word	0x40021000

08014538 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014542:	2300      	movs	r3, #0
 8014544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8014546:	4b74      	ldr	r3, [pc, #464]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8014548:	68db      	ldr	r3, [r3, #12]
 801454a:	f003 0303 	and.w	r3, r3, #3
 801454e:	2b00      	cmp	r3, #0
 8014550:	d018      	beq.n	8014584 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8014552:	4b71      	ldr	r3, [pc, #452]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8014554:	68db      	ldr	r3, [r3, #12]
 8014556:	f003 0203 	and.w	r2, r3, #3
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	429a      	cmp	r2, r3
 8014560:	d10d      	bne.n	801457e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
       ||
 8014566:	2b00      	cmp	r3, #0
 8014568:	d009      	beq.n	801457e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801456a:	4b6b      	ldr	r3, [pc, #428]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	091b      	lsrs	r3, r3, #4
 8014570:	f003 0307 	and.w	r3, r3, #7
 8014574:	1c5a      	adds	r2, r3, #1
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	685b      	ldr	r3, [r3, #4]
       ||
 801457a:	429a      	cmp	r2, r3
 801457c:	d047      	beq.n	801460e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801457e:	2301      	movs	r3, #1
 8014580:	73fb      	strb	r3, [r7, #15]
 8014582:	e044      	b.n	801460e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	2b03      	cmp	r3, #3
 801458a:	d018      	beq.n	80145be <RCCEx_PLLSAI1_Config+0x86>
 801458c:	2b03      	cmp	r3, #3
 801458e:	d825      	bhi.n	80145dc <RCCEx_PLLSAI1_Config+0xa4>
 8014590:	2b01      	cmp	r3, #1
 8014592:	d002      	beq.n	801459a <RCCEx_PLLSAI1_Config+0x62>
 8014594:	2b02      	cmp	r3, #2
 8014596:	d009      	beq.n	80145ac <RCCEx_PLLSAI1_Config+0x74>
 8014598:	e020      	b.n	80145dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801459a:	4b5f      	ldr	r3, [pc, #380]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	f003 0302 	and.w	r3, r3, #2
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d11d      	bne.n	80145e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80145a6:	2301      	movs	r3, #1
 80145a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80145aa:	e01a      	b.n	80145e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80145ac:	4b5a      	ldr	r3, [pc, #360]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d116      	bne.n	80145e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80145b8:	2301      	movs	r3, #1
 80145ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80145bc:	e013      	b.n	80145e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80145be:	4b56      	ldr	r3, [pc, #344]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d10f      	bne.n	80145ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80145ca:	4b53      	ldr	r3, [pc, #332]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d109      	bne.n	80145ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80145d6:	2301      	movs	r3, #1
 80145d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80145da:	e006      	b.n	80145ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80145dc:	2301      	movs	r3, #1
 80145de:	73fb      	strb	r3, [r7, #15]
      break;
 80145e0:	e004      	b.n	80145ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80145e2:	bf00      	nop
 80145e4:	e002      	b.n	80145ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80145e6:	bf00      	nop
 80145e8:	e000      	b.n	80145ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80145ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80145ec:	7bfb      	ldrb	r3, [r7, #15]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d10d      	bne.n	801460e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80145f2:	4b49      	ldr	r3, [pc, #292]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6819      	ldr	r1, [r3, #0]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	3b01      	subs	r3, #1
 8014604:	011b      	lsls	r3, r3, #4
 8014606:	430b      	orrs	r3, r1
 8014608:	4943      	ldr	r1, [pc, #268]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 801460a:	4313      	orrs	r3, r2
 801460c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801460e:	7bfb      	ldrb	r3, [r7, #15]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d17c      	bne.n	801470e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8014614:	4b40      	ldr	r3, [pc, #256]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	4a3f      	ldr	r2, [pc, #252]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 801461a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801461e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014620:	f7fc fe7c 	bl	801131c <HAL_GetTick>
 8014624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8014626:	e009      	b.n	801463c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014628:	f7fc fe78 	bl	801131c <HAL_GetTick>
 801462c:	4602      	mov	r2, r0
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	1ad3      	subs	r3, r2, r3
 8014632:	2b02      	cmp	r3, #2
 8014634:	d902      	bls.n	801463c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8014636:	2303      	movs	r3, #3
 8014638:	73fb      	strb	r3, [r7, #15]
        break;
 801463a:	e005      	b.n	8014648 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801463c:	4b36      	ldr	r3, [pc, #216]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014644:	2b00      	cmp	r3, #0
 8014646:	d1ef      	bne.n	8014628 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8014648:	7bfb      	ldrb	r3, [r7, #15]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d15f      	bne.n	801470e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d110      	bne.n	8014676 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014654:	4b30      	ldr	r3, [pc, #192]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8014656:	691b      	ldr	r3, [r3, #16]
 8014658:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 801465c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8014660:	687a      	ldr	r2, [r7, #4]
 8014662:	6892      	ldr	r2, [r2, #8]
 8014664:	0211      	lsls	r1, r2, #8
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	68d2      	ldr	r2, [r2, #12]
 801466a:	06d2      	lsls	r2, r2, #27
 801466c:	430a      	orrs	r2, r1
 801466e:	492a      	ldr	r1, [pc, #168]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8014670:	4313      	orrs	r3, r2
 8014672:	610b      	str	r3, [r1, #16]
 8014674:	e027      	b.n	80146c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	2b01      	cmp	r3, #1
 801467a:	d112      	bne.n	80146a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801467c:	4b26      	ldr	r3, [pc, #152]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 801467e:	691b      	ldr	r3, [r3, #16]
 8014680:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8014684:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	6892      	ldr	r2, [r2, #8]
 801468c:	0211      	lsls	r1, r2, #8
 801468e:	687a      	ldr	r2, [r7, #4]
 8014690:	6912      	ldr	r2, [r2, #16]
 8014692:	0852      	lsrs	r2, r2, #1
 8014694:	3a01      	subs	r2, #1
 8014696:	0552      	lsls	r2, r2, #21
 8014698:	430a      	orrs	r2, r1
 801469a:	491f      	ldr	r1, [pc, #124]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 801469c:	4313      	orrs	r3, r2
 801469e:	610b      	str	r3, [r1, #16]
 80146a0:	e011      	b.n	80146c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80146a2:	4b1d      	ldr	r3, [pc, #116]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80146a4:	691b      	ldr	r3, [r3, #16]
 80146a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80146aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	6892      	ldr	r2, [r2, #8]
 80146b2:	0211      	lsls	r1, r2, #8
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	6952      	ldr	r2, [r2, #20]
 80146b8:	0852      	lsrs	r2, r2, #1
 80146ba:	3a01      	subs	r2, #1
 80146bc:	0652      	lsls	r2, r2, #25
 80146be:	430a      	orrs	r2, r1
 80146c0:	4915      	ldr	r1, [pc, #84]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80146c2:	4313      	orrs	r3, r2
 80146c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80146c6:	4b14      	ldr	r3, [pc, #80]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	4a13      	ldr	r2, [pc, #76]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80146cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80146d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80146d2:	f7fc fe23 	bl	801131c <HAL_GetTick>
 80146d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80146d8:	e009      	b.n	80146ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80146da:	f7fc fe1f 	bl	801131c <HAL_GetTick>
 80146de:	4602      	mov	r2, r0
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	1ad3      	subs	r3, r2, r3
 80146e4:	2b02      	cmp	r3, #2
 80146e6:	d902      	bls.n	80146ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80146e8:	2303      	movs	r3, #3
 80146ea:	73fb      	strb	r3, [r7, #15]
          break;
 80146ec:	e005      	b.n	80146fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80146ee:	4b0a      	ldr	r3, [pc, #40]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d0ef      	beq.n	80146da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80146fa:	7bfb      	ldrb	r3, [r7, #15]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d106      	bne.n	801470e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8014700:	4b05      	ldr	r3, [pc, #20]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8014702:	691a      	ldr	r2, [r3, #16]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	699b      	ldr	r3, [r3, #24]
 8014708:	4903      	ldr	r1, [pc, #12]	; (8014718 <RCCEx_PLLSAI1_Config+0x1e0>)
 801470a:	4313      	orrs	r3, r2
 801470c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801470e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014710:	4618      	mov	r0, r3
 8014712:	3710      	adds	r7, #16
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	40021000 	.word	0x40021000

0801471c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b084      	sub	sp, #16
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d101      	bne.n	801472e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801472a:	2301      	movs	r3, #1
 801472c:	e049      	b.n	80147c2 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	795b      	ldrb	r3, [r3, #5]
 8014732:	b2db      	uxtb	r3, r3
 8014734:	2b00      	cmp	r3, #0
 8014736:	d105      	bne.n	8014744 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2200      	movs	r2, #0
 801473c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7fc fbd4 	bl	8010eec <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2202      	movs	r2, #2
 8014748:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f042 0204 	orr.w	r2, r2, #4
 8014758:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014764:	2b40      	cmp	r3, #64	; 0x40
 8014766:	d104      	bne.n	8014772 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2204      	movs	r2, #4
 801476c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 801476e:	2301      	movs	r3, #1
 8014770:	e027      	b.n	80147c2 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8014772:	f7fc fdd3 	bl	801131c <HAL_GetTick>
 8014776:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8014778:	e015      	b.n	80147a6 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801477a:	f7fc fdcf 	bl	801131c <HAL_GetTick>
 801477e:	4602      	mov	r2, r0
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	1ad3      	subs	r3, r2, r3
 8014784:	2b02      	cmp	r3, #2
 8014786:	d90e      	bls.n	80147a6 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	f003 0304 	and.w	r3, r3, #4
 8014792:	2b04      	cmp	r3, #4
 8014794:	d107      	bne.n	80147a6 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2204      	movs	r2, #4
 801479a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2202      	movs	r2, #2
 80147a0:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80147a2:	2301      	movs	r3, #1
 80147a4:	e00d      	b.n	80147c2 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	f003 0304 	and.w	r3, r3, #4
 80147b0:	2b04      	cmp	r3, #4
 80147b2:	d0e2      	beq.n	801477a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2201      	movs	r2, #1
 80147b8:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2200      	movs	r2, #0
 80147be:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80147c0:	2300      	movs	r3, #0
}
 80147c2:	4618      	mov	r0, r3
 80147c4:	3710      	adds	r7, #16
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}

080147ca <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80147ca:	b580      	push	{r7, lr}
 80147cc:	b084      	sub	sp, #16
 80147ce:	af00      	add	r7, sp, #0
 80147d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80147d2:	2301      	movs	r3, #1
 80147d4:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d06c      	beq.n	80148b6 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80147e2:	b2db      	uxtb	r3, r3
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d106      	bne.n	80147f6 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2200      	movs	r2, #0
 80147ec:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7fc fbaf 	bl	8010f54 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2202      	movs	r2, #2
 80147fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	22ca      	movs	r2, #202	; 0xca
 8014804:	625a      	str	r2, [r3, #36]	; 0x24
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	2253      	movs	r2, #83	; 0x53
 801480c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f000 f9a0 	bl	8014b54 <RTC_EnterInitMode>
 8014814:	4603      	mov	r3, r0
 8014816:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8014818:	7bfb      	ldrb	r3, [r7, #15]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d14b      	bne.n	80148b6 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	689b      	ldr	r3, [r3, #8]
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	6812      	ldr	r2, [r2, #0]
 8014828:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014830:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	6899      	ldr	r1, [r3, #8]
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	685a      	ldr	r2, [r3, #4]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	691b      	ldr	r3, [r3, #16]
 8014840:	431a      	orrs	r2, r3
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	699b      	ldr	r3, [r3, #24]
 8014846:	431a      	orrs	r2, r3
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	430a      	orrs	r2, r1
 801484e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	687a      	ldr	r2, [r7, #4]
 8014856:	68d2      	ldr	r2, [r2, #12]
 8014858:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	6919      	ldr	r1, [r3, #16]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	689b      	ldr	r3, [r3, #8]
 8014864:	041a      	lsls	r2, r3, #16
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	430a      	orrs	r2, r1
 801486c:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f000 f9a4 	bl	8014bbc <RTC_ExitInitMode>
 8014874:	4603      	mov	r3, r0
 8014876:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8014878:	7bfb      	ldrb	r3, [r7, #15]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d11b      	bne.n	80148b6 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	f022 0203 	bic.w	r2, r2, #3
 801488c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	69da      	ldr	r2, [r3, #28]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	695b      	ldr	r3, [r3, #20]
 801489c:	431a      	orrs	r2, r3
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	430a      	orrs	r2, r1
 80148a4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	22ff      	movs	r2, #255	; 0xff
 80148ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2201      	movs	r2, #1
 80148b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80148b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3710      	adds	r7, #16
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}

080148c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80148c0:	b590      	push	{r4, r7, lr}
 80148c2:	b087      	sub	sp, #28
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	60f8      	str	r0, [r7, #12]
 80148c8:	60b9      	str	r1, [r7, #8]
 80148ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80148d2:	2b01      	cmp	r3, #1
 80148d4:	d101      	bne.n	80148da <HAL_RTC_SetTime+0x1a>
 80148d6:	2302      	movs	r3, #2
 80148d8:	e08b      	b.n	80149f2 <HAL_RTC_SetTime+0x132>
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	2201      	movs	r2, #1
 80148de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	2202      	movs	r2, #2
 80148e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	22ca      	movs	r2, #202	; 0xca
 80148f0:	625a      	str	r2, [r3, #36]	; 0x24
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	2253      	movs	r2, #83	; 0x53
 80148f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80148fa:	68f8      	ldr	r0, [r7, #12]
 80148fc:	f000 f92a 	bl	8014b54 <RTC_EnterInitMode>
 8014900:	4603      	mov	r3, r0
 8014902:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8014904:	7cfb      	ldrb	r3, [r7, #19]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d163      	bne.n	80149d2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d126      	bne.n	801495e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801491a:	2b00      	cmp	r3, #0
 801491c:	d102      	bne.n	8014924 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	2200      	movs	r2, #0
 8014922:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	4618      	mov	r0, r3
 801492a:	f000 f985 	bl	8014c38 <RTC_ByteToBcd2>
 801492e:	4603      	mov	r3, r0
 8014930:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	785b      	ldrb	r3, [r3, #1]
 8014936:	4618      	mov	r0, r3
 8014938:	f000 f97e 	bl	8014c38 <RTC_ByteToBcd2>
 801493c:	4603      	mov	r3, r0
 801493e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014940:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	789b      	ldrb	r3, [r3, #2]
 8014946:	4618      	mov	r0, r3
 8014948:	f000 f976 	bl	8014c38 <RTC_ByteToBcd2>
 801494c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801494e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	78db      	ldrb	r3, [r3, #3]
 8014956:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014958:	4313      	orrs	r3, r2
 801495a:	617b      	str	r3, [r7, #20]
 801495c:	e018      	b.n	8014990 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	689b      	ldr	r3, [r3, #8]
 8014964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014968:	2b00      	cmp	r3, #0
 801496a:	d102      	bne.n	8014972 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	2200      	movs	r2, #0
 8014970:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	781b      	ldrb	r3, [r3, #0]
 8014976:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	785b      	ldrb	r3, [r3, #1]
 801497c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801497e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8014980:	68ba      	ldr	r2, [r7, #8]
 8014982:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014984:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	78db      	ldrb	r3, [r3, #3]
 801498a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801498c:	4313      	orrs	r3, r2
 801498e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801499a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801499e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	689a      	ldr	r2, [r3, #8]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80149ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	6899      	ldr	r1, [r3, #8]
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	68da      	ldr	r2, [r3, #12]
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	691b      	ldr	r3, [r3, #16]
 80149be:	431a      	orrs	r2, r3
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	430a      	orrs	r2, r1
 80149c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80149c8:	68f8      	ldr	r0, [r7, #12]
 80149ca:	f000 f8f7 	bl	8014bbc <RTC_ExitInitMode>
 80149ce:	4603      	mov	r3, r0
 80149d0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	22ff      	movs	r2, #255	; 0xff
 80149d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80149da:	7cfb      	ldrb	r3, [r7, #19]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d103      	bne.n	80149e8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2201      	movs	r2, #1
 80149e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2200      	movs	r2, #0
 80149ec:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80149f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	371c      	adds	r7, #28
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd90      	pop	{r4, r7, pc}

080149fa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80149fa:	b590      	push	{r4, r7, lr}
 80149fc:	b087      	sub	sp, #28
 80149fe:	af00      	add	r7, sp, #0
 8014a00:	60f8      	str	r0, [r7, #12]
 8014a02:	60b9      	str	r1, [r7, #8]
 8014a04:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d101      	bne.n	8014a14 <HAL_RTC_SetDate+0x1a>
 8014a10:	2302      	movs	r3, #2
 8014a12:	e075      	b.n	8014b00 <HAL_RTC_SetDate+0x106>
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2201      	movs	r2, #1
 8014a18:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2202      	movs	r2, #2
 8014a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d10e      	bne.n	8014a48 <HAL_RTC_SetDate+0x4e>
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	785b      	ldrb	r3, [r3, #1]
 8014a2e:	f003 0310 	and.w	r3, r3, #16
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d008      	beq.n	8014a48 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	785b      	ldrb	r3, [r3, #1]
 8014a3a:	f023 0310 	bic.w	r3, r3, #16
 8014a3e:	b2db      	uxtb	r3, r3
 8014a40:	330a      	adds	r3, #10
 8014a42:	b2da      	uxtb	r2, r3
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d11c      	bne.n	8014a88 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	78db      	ldrb	r3, [r3, #3]
 8014a52:	4618      	mov	r0, r3
 8014a54:	f000 f8f0 	bl	8014c38 <RTC_ByteToBcd2>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	785b      	ldrb	r3, [r3, #1]
 8014a60:	4618      	mov	r0, r3
 8014a62:	f000 f8e9 	bl	8014c38 <RTC_ByteToBcd2>
 8014a66:	4603      	mov	r3, r0
 8014a68:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8014a6a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	789b      	ldrb	r3, [r3, #2]
 8014a70:	4618      	mov	r0, r3
 8014a72:	f000 f8e1 	bl	8014c38 <RTC_ByteToBcd2>
 8014a76:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014a78:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8014a82:	4313      	orrs	r3, r2
 8014a84:	617b      	str	r3, [r7, #20]
 8014a86:	e00e      	b.n	8014aa6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	78db      	ldrb	r3, [r3, #3]
 8014a8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	785b      	ldrb	r3, [r3, #1]
 8014a92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8014a94:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8014a96:	68ba      	ldr	r2, [r7, #8]
 8014a98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8014a9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8014aa2:	4313      	orrs	r3, r2
 8014aa4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	22ca      	movs	r2, #202	; 0xca
 8014aac:	625a      	str	r2, [r3, #36]	; 0x24
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2253      	movs	r2, #83	; 0x53
 8014ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014ab6:	68f8      	ldr	r0, [r7, #12]
 8014ab8:	f000 f84c 	bl	8014b54 <RTC_EnterInitMode>
 8014abc:	4603      	mov	r3, r0
 8014abe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8014ac0:	7cfb      	ldrb	r3, [r7, #19]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d10c      	bne.n	8014ae0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	681a      	ldr	r2, [r3, #0]
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014ad0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8014ad4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8014ad6:	68f8      	ldr	r0, [r7, #12]
 8014ad8:	f000 f870 	bl	8014bbc <RTC_ExitInitMode>
 8014adc:	4603      	mov	r3, r0
 8014ade:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	22ff      	movs	r2, #255	; 0xff
 8014ae6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8014ae8:	7cfb      	ldrb	r3, [r7, #19]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d103      	bne.n	8014af6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	2201      	movs	r2, #1
 8014af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2200      	movs	r2, #0
 8014afa:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8014afe:	7cfb      	ldrb	r3, [r7, #19]
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	371c      	adds	r7, #28
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd90      	pop	{r4, r7, pc}

08014b08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b084      	sub	sp, #16
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	68da      	ldr	r2, [r3, #12]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8014b1e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8014b20:	f7fc fbfc 	bl	801131c <HAL_GetTick>
 8014b24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014b26:	e009      	b.n	8014b3c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014b28:	f7fc fbf8 	bl	801131c <HAL_GetTick>
 8014b2c:	4602      	mov	r2, r0
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	1ad3      	subs	r3, r2, r3
 8014b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014b36:	d901      	bls.n	8014b3c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8014b38:	2303      	movs	r3, #3
 8014b3a:	e007      	b.n	8014b4c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	68db      	ldr	r3, [r3, #12]
 8014b42:	f003 0320 	and.w	r3, r3, #32
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d0ee      	beq.n	8014b28 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8014b4a:	2300      	movs	r3, #0
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3710      	adds	r7, #16
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}

08014b54 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b084      	sub	sp, #16
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	68db      	ldr	r3, [r3, #12]
 8014b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d120      	bne.n	8014bb0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	f04f 32ff 	mov.w	r2, #4294967295
 8014b76:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8014b78:	f7fc fbd0 	bl	801131c <HAL_GetTick>
 8014b7c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8014b7e:	e00d      	b.n	8014b9c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8014b80:	f7fc fbcc 	bl	801131c <HAL_GetTick>
 8014b84:	4602      	mov	r2, r0
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	1ad3      	subs	r3, r2, r3
 8014b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014b8e:	d905      	bls.n	8014b9c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8014b90:	2303      	movs	r3, #3
 8014b92:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2203      	movs	r2, #3
 8014b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	68db      	ldr	r3, [r3, #12]
 8014ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d102      	bne.n	8014bb0 <RTC_EnterInitMode+0x5c>
 8014baa:	7bfb      	ldrb	r3, [r7, #15]
 8014bac:	2b03      	cmp	r3, #3
 8014bae:	d1e7      	bne.n	8014b80 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8014bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3710      	adds	r7, #16
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}
	...

08014bbc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8014bc8:	4b1a      	ldr	r3, [pc, #104]	; (8014c34 <RTC_ExitInitMode+0x78>)
 8014bca:	68db      	ldr	r3, [r3, #12]
 8014bcc:	4a19      	ldr	r2, [pc, #100]	; (8014c34 <RTC_ExitInitMode+0x78>)
 8014bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014bd2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8014bd4:	4b17      	ldr	r3, [pc, #92]	; (8014c34 <RTC_ExitInitMode+0x78>)
 8014bd6:	689b      	ldr	r3, [r3, #8]
 8014bd8:	f003 0320 	and.w	r3, r3, #32
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d10c      	bne.n	8014bfa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f7ff ff91 	bl	8014b08 <HAL_RTC_WaitForSynchro>
 8014be6:	4603      	mov	r3, r0
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d01e      	beq.n	8014c2a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2203      	movs	r2, #3
 8014bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8014bf4:	2303      	movs	r3, #3
 8014bf6:	73fb      	strb	r3, [r7, #15]
 8014bf8:	e017      	b.n	8014c2a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8014bfa:	4b0e      	ldr	r3, [pc, #56]	; (8014c34 <RTC_ExitInitMode+0x78>)
 8014bfc:	689b      	ldr	r3, [r3, #8]
 8014bfe:	4a0d      	ldr	r2, [pc, #52]	; (8014c34 <RTC_ExitInitMode+0x78>)
 8014c00:	f023 0320 	bic.w	r3, r3, #32
 8014c04:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f7ff ff7e 	bl	8014b08 <HAL_RTC_WaitForSynchro>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d005      	beq.n	8014c1e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2203      	movs	r2, #3
 8014c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8014c1a:	2303      	movs	r3, #3
 8014c1c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8014c1e:	4b05      	ldr	r3, [pc, #20]	; (8014c34 <RTC_ExitInitMode+0x78>)
 8014c20:	689b      	ldr	r3, [r3, #8]
 8014c22:	4a04      	ldr	r2, [pc, #16]	; (8014c34 <RTC_ExitInitMode+0x78>)
 8014c24:	f043 0320 	orr.w	r3, r3, #32
 8014c28:	6093      	str	r3, [r2, #8]
  }

  return status;
 8014c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3710      	adds	r7, #16
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	40002800 	.word	0x40002800

08014c38 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b085      	sub	sp, #20
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	4603      	mov	r3, r0
 8014c40:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8014c42:	2300      	movs	r3, #0
 8014c44:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8014c46:	79fb      	ldrb	r3, [r7, #7]
 8014c48:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8014c4a:	e005      	b.n	8014c58 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	3301      	adds	r3, #1
 8014c50:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8014c52:	7afb      	ldrb	r3, [r7, #11]
 8014c54:	3b0a      	subs	r3, #10
 8014c56:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8014c58:	7afb      	ldrb	r3, [r7, #11]
 8014c5a:	2b09      	cmp	r3, #9
 8014c5c:	d8f6      	bhi.n	8014c4c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	011b      	lsls	r3, r3, #4
 8014c64:	b2da      	uxtb	r2, r3
 8014c66:	7afb      	ldrb	r3, [r7, #11]
 8014c68:	4313      	orrs	r3, r2
 8014c6a:	b2db      	uxtb	r3, r3
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3714      	adds	r7, #20
 8014c70:	46bd      	mov	sp, r7
 8014c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c76:	4770      	bx	lr

08014c78 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b086      	sub	sp, #24
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	60f8      	str	r0, [r7, #12]
 8014c80:	60b9      	str	r1, [r7, #8]
 8014c82:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c8a:	2b01      	cmp	r3, #1
 8014c8c:	d101      	bne.n	8014c92 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8014c8e:	2302      	movs	r3, #2
 8014c90:	e07f      	b.n	8014d92 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	2201      	movs	r2, #1
 8014c96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	2202      	movs	r2, #2
 8014c9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	22ca      	movs	r2, #202	; 0xca
 8014ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	2253      	movs	r2, #83	; 0x53
 8014cb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	689a      	ldr	r2, [r3, #8]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014cc0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	68db      	ldr	r3, [r3, #12]
 8014cc8:	b2da      	uxtb	r2, r3
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8014cd2:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	68db      	ldr	r3, [r3, #12]
 8014cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d120      	bne.n	8014d24 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8014ce2:	f7fc fb1b 	bl	801131c <HAL_GetTick>
 8014ce6:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8014ce8:	e015      	b.n	8014d16 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014cea:	f7fc fb17 	bl	801131c <HAL_GetTick>
 8014cee:	4602      	mov	r2, r0
 8014cf0:	697b      	ldr	r3, [r7, #20]
 8014cf2:	1ad3      	subs	r3, r2, r3
 8014cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014cf8:	d90d      	bls.n	8014d16 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	22ff      	movs	r2, #255	; 0xff
 8014d00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2203      	movs	r2, #3
 8014d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8014d12:	2303      	movs	r3, #3
 8014d14:	e03d      	b.n	8014d92 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	68db      	ldr	r3, [r3, #12]
 8014d1c:	f003 0304 	and.w	r3, r3, #4
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d0e2      	beq.n	8014cea <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	68ba      	ldr	r2, [r7, #8]
 8014d2a:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	689b      	ldr	r3, [r3, #8]
 8014d32:	f023 0107 	bic.w	r1, r3, #7
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	430a      	orrs	r2, r1
 8014d3e:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8014d40:	4b16      	ldr	r3, [pc, #88]	; (8014d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	4a15      	ldr	r2, [pc, #84]	; (8014d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8014d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d4a:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8014d4c:	4b13      	ldr	r3, [pc, #76]	; (8014d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8014d4e:	689b      	ldr	r3, [r3, #8]
 8014d50:	4a12      	ldr	r2, [pc, #72]	; (8014d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8014d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d56:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	689a      	ldr	r2, [r3, #8]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014d66:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	689a      	ldr	r2, [r3, #8]
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014d76:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	22ff      	movs	r2, #255	; 0xff
 8014d7e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	2201      	movs	r2, #1
 8014d84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8014d90:	2300      	movs	r3, #0
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3718      	adds	r7, #24
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	40010400 	.word	0x40010400

08014da0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8014da8:	4b0f      	ldr	r3, [pc, #60]	; (8014de8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8014daa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014dae:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d00b      	beq.n	8014dd6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	b2da      	uxtb	r2, r3
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8014dce:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f000 f80b 	bl	8014dec <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2201      	movs	r2, #1
 8014dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8014dde:	bf00      	nop
 8014de0:	3708      	adds	r7, #8
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	40010400 	.word	0x40010400

08014dec <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8014dec:	b480      	push	{r7}
 8014dee:	b083      	sub	sp, #12
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8014df4:	bf00      	nop
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8014e00:	b084      	sub	sp, #16
 8014e02:	b480      	push	{r7}
 8014e04:	b083      	sub	sp, #12
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	6078      	str	r0, [r7, #4]
 8014e0a:	f107 0014 	add.w	r0, r7, #20
 8014e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8014e12:	2300      	movs	r3, #0
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	370c      	adds	r7, #12
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1e:	b004      	add	sp, #16
 8014e20:	4770      	bx	lr

08014e22 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8014e22:	b480      	push	{r7}
 8014e24:	b085      	sub	sp, #20
 8014e26:	af00      	add	r7, sp, #0
 8014e28:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8014e32:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8014e36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	b29a      	uxth	r2, r3
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8014e42:	2300      	movs	r3, #0
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3714      	adds	r7, #20
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4e:	4770      	bx	lr

08014e50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8014e50:	b480      	push	{r7}
 8014e52:	b085      	sub	sp, #20
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8014e58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8014e5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8014e64:	b29a      	uxth	r2, r3
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	43db      	mvns	r3, r3
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	4013      	ands	r3, r2
 8014e70:	b29a      	uxth	r2, r3
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8014e78:	2300      	movs	r3, #0
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3714      	adds	r7, #20
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr

08014e86 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8014e86:	b480      	push	{r7}
 8014e88:	b083      	sub	sp, #12
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	6078      	str	r0, [r7, #4]
 8014e8e:	460b      	mov	r3, r1
 8014e90:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8014e92:	2300      	movs	r3, #0
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	370c      	adds	r7, #12
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9e:	4770      	bx	lr

08014ea0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8014ea0:	b084      	sub	sp, #16
 8014ea2:	b480      	push	{r7}
 8014ea4:	b083      	sub	sp, #12
 8014ea6:	af00      	add	r7, sp, #0
 8014ea8:	6078      	str	r0, [r7, #4]
 8014eaa:	f107 0014 	add.w	r0, r7, #20
 8014eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8014ed2:	2300      	movs	r3, #0
}
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	370c      	adds	r7, #12
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ede:	b004      	add	sp, #16
 8014ee0:	4770      	bx	lr
	...

08014ee4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b09d      	sub	sp, #116	; 0x74
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	781b      	ldrb	r3, [r3, #0]
 8014efa:	009b      	lsls	r3, r3, #2
 8014efc:	4413      	add	r3, r2
 8014efe:	881b      	ldrh	r3, [r3, #0]
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8014f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014f0a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	78db      	ldrb	r3, [r3, #3]
 8014f12:	2b03      	cmp	r3, #3
 8014f14:	d81f      	bhi.n	8014f56 <USB_ActivateEndpoint+0x72>
 8014f16:	a201      	add	r2, pc, #4	; (adr r2, 8014f1c <USB_ActivateEndpoint+0x38>)
 8014f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f1c:	08014f2d 	.word	0x08014f2d
 8014f20:	08014f49 	.word	0x08014f49
 8014f24:	08014f5f 	.word	0x08014f5f
 8014f28:	08014f3b 	.word	0x08014f3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8014f2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8014f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014f34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8014f38:	e012      	b.n	8014f60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8014f3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8014f3e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8014f42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8014f46:	e00b      	b.n	8014f60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8014f48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8014f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014f50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8014f54:	e004      	b.n	8014f60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8014f56:	2301      	movs	r3, #1
 8014f58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8014f5c:	e000      	b.n	8014f60 <USB_ActivateEndpoint+0x7c>
      break;
 8014f5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8014f60:	687a      	ldr	r2, [r7, #4]
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	781b      	ldrb	r3, [r3, #0]
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	441a      	add	r2, r3
 8014f6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8014f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8014f82:	687a      	ldr	r2, [r7, #4]
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	009b      	lsls	r3, r3, #2
 8014f8a:	4413      	add	r3, r2
 8014f8c:	881b      	ldrh	r3, [r3, #0]
 8014f8e:	b29b      	uxth	r3, r3
 8014f90:	b21b      	sxth	r3, r3
 8014f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014f9a:	b21a      	sxth	r2, r3
 8014f9c:	683b      	ldr	r3, [r7, #0]
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	b21b      	sxth	r3, r3
 8014fa2:	4313      	orrs	r3, r2
 8014fa4:	b21b      	sxth	r3, r3
 8014fa6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8014faa:	687a      	ldr	r2, [r7, #4]
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	781b      	ldrb	r3, [r3, #0]
 8014fb0:	009b      	lsls	r3, r3, #2
 8014fb2:	441a      	add	r2, r3
 8014fb4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8014fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8014fcc:	683b      	ldr	r3, [r7, #0]
 8014fce:	7b1b      	ldrb	r3, [r3, #12]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	f040 816e 	bne.w	80152b2 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	785b      	ldrb	r3, [r3, #1]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	f000 8084 	beq.w	80150e8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	61bb      	str	r3, [r7, #24]
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	461a      	mov	r2, r3
 8014fee:	69bb      	ldr	r3, [r7, #24]
 8014ff0:	4413      	add	r3, r2
 8014ff2:	61bb      	str	r3, [r7, #24]
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	781b      	ldrb	r3, [r3, #0]
 8014ff8:	00da      	lsls	r2, r3, #3
 8014ffa:	69bb      	ldr	r3, [r7, #24]
 8014ffc:	4413      	add	r3, r2
 8014ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015002:	617b      	str	r3, [r7, #20]
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	88db      	ldrh	r3, [r3, #6]
 8015008:	085b      	lsrs	r3, r3, #1
 801500a:	b29b      	uxth	r3, r3
 801500c:	005b      	lsls	r3, r3, #1
 801500e:	b29a      	uxth	r2, r3
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015014:	687a      	ldr	r2, [r7, #4]
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	009b      	lsls	r3, r3, #2
 801501c:	4413      	add	r3, r2
 801501e:	881b      	ldrh	r3, [r3, #0]
 8015020:	827b      	strh	r3, [r7, #18]
 8015022:	8a7b      	ldrh	r3, [r7, #18]
 8015024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015028:	2b00      	cmp	r3, #0
 801502a:	d01b      	beq.n	8015064 <USB_ActivateEndpoint+0x180>
 801502c:	687a      	ldr	r2, [r7, #4]
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	781b      	ldrb	r3, [r3, #0]
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4413      	add	r3, r2
 8015036:	881b      	ldrh	r3, [r3, #0]
 8015038:	b29b      	uxth	r3, r3
 801503a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015042:	823b      	strh	r3, [r7, #16]
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	009b      	lsls	r3, r3, #2
 801504c:	441a      	add	r2, r3
 801504e:	8a3b      	ldrh	r3, [r7, #16]
 8015050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801505c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8015060:	b29b      	uxth	r3, r3
 8015062:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	78db      	ldrb	r3, [r3, #3]
 8015068:	2b01      	cmp	r3, #1
 801506a:	d020      	beq.n	80150ae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	781b      	ldrb	r3, [r3, #0]
 8015072:	009b      	lsls	r3, r3, #2
 8015074:	4413      	add	r3, r2
 8015076:	881b      	ldrh	r3, [r3, #0]
 8015078:	b29b      	uxth	r3, r3
 801507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801507e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015082:	81bb      	strh	r3, [r7, #12]
 8015084:	89bb      	ldrh	r3, [r7, #12]
 8015086:	f083 0320 	eor.w	r3, r3, #32
 801508a:	81bb      	strh	r3, [r7, #12]
 801508c:	687a      	ldr	r2, [r7, #4]
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	781b      	ldrb	r3, [r3, #0]
 8015092:	009b      	lsls	r3, r3, #2
 8015094:	441a      	add	r2, r3
 8015096:	89bb      	ldrh	r3, [r7, #12]
 8015098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801509c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80150a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80150a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150a8:	b29b      	uxth	r3, r3
 80150aa:	8013      	strh	r3, [r2, #0]
 80150ac:	e2cb      	b.n	8015646 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	009b      	lsls	r3, r3, #2
 80150b6:	4413      	add	r3, r2
 80150b8:	881b      	ldrh	r3, [r3, #0]
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80150c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80150c4:	81fb      	strh	r3, [r7, #14]
 80150c6:	687a      	ldr	r2, [r7, #4]
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	441a      	add	r2, r3
 80150d0:	89fb      	ldrh	r3, [r7, #14]
 80150d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80150d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80150da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80150de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150e2:	b29b      	uxth	r3, r3
 80150e4:	8013      	strh	r3, [r2, #0]
 80150e6:	e2ae      	b.n	8015646 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	633b      	str	r3, [r7, #48]	; 0x30
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	461a      	mov	r2, r3
 80150f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f8:	4413      	add	r3, r2
 80150fa:	633b      	str	r3, [r7, #48]	; 0x30
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	00da      	lsls	r2, r3, #3
 8015102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015104:	4413      	add	r3, r2
 8015106:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801510a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	88db      	ldrh	r3, [r3, #6]
 8015110:	085b      	lsrs	r3, r3, #1
 8015112:	b29b      	uxth	r3, r3
 8015114:	005b      	lsls	r3, r3, #1
 8015116:	b29a      	uxth	r2, r3
 8015118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801511a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015126:	b29b      	uxth	r3, r3
 8015128:	461a      	mov	r2, r3
 801512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801512c:	4413      	add	r3, r2
 801512e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	781b      	ldrb	r3, [r3, #0]
 8015134:	00da      	lsls	r2, r3, #3
 8015136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015138:	4413      	add	r3, r2
 801513a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801513e:	627b      	str	r3, [r7, #36]	; 0x24
 8015140:	683b      	ldr	r3, [r7, #0]
 8015142:	691b      	ldr	r3, [r3, #16]
 8015144:	2b3e      	cmp	r3, #62	; 0x3e
 8015146:	d918      	bls.n	801517a <USB_ActivateEndpoint+0x296>
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	691b      	ldr	r3, [r3, #16]
 801514c:	095b      	lsrs	r3, r3, #5
 801514e:	66bb      	str	r3, [r7, #104]	; 0x68
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	691b      	ldr	r3, [r3, #16]
 8015154:	f003 031f 	and.w	r3, r3, #31
 8015158:	2b00      	cmp	r3, #0
 801515a:	d102      	bne.n	8015162 <USB_ActivateEndpoint+0x27e>
 801515c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801515e:	3b01      	subs	r3, #1
 8015160:	66bb      	str	r3, [r7, #104]	; 0x68
 8015162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015164:	b29b      	uxth	r3, r3
 8015166:	029b      	lsls	r3, r3, #10
 8015168:	b29b      	uxth	r3, r3
 801516a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801516e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015172:	b29a      	uxth	r2, r3
 8015174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015176:	801a      	strh	r2, [r3, #0]
 8015178:	e029      	b.n	80151ce <USB_ActivateEndpoint+0x2ea>
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	691b      	ldr	r3, [r3, #16]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d112      	bne.n	80151a8 <USB_ActivateEndpoint+0x2c4>
 8015182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015184:	881b      	ldrh	r3, [r3, #0]
 8015186:	b29b      	uxth	r3, r3
 8015188:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801518c:	b29a      	uxth	r2, r3
 801518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015190:	801a      	strh	r2, [r3, #0]
 8015192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015194:	881b      	ldrh	r3, [r3, #0]
 8015196:	b29b      	uxth	r3, r3
 8015198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801519c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a4:	801a      	strh	r2, [r3, #0]
 80151a6:	e012      	b.n	80151ce <USB_ActivateEndpoint+0x2ea>
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	691b      	ldr	r3, [r3, #16]
 80151ac:	085b      	lsrs	r3, r3, #1
 80151ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	691b      	ldr	r3, [r3, #16]
 80151b4:	f003 0301 	and.w	r3, r3, #1
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d002      	beq.n	80151c2 <USB_ActivateEndpoint+0x2de>
 80151bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151be:	3301      	adds	r3, #1
 80151c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80151c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	029b      	lsls	r3, r3, #10
 80151c8:	b29a      	uxth	r2, r3
 80151ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80151ce:	687a      	ldr	r2, [r7, #4]
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	009b      	lsls	r3, r3, #2
 80151d6:	4413      	add	r3, r2
 80151d8:	881b      	ldrh	r3, [r3, #0]
 80151da:	847b      	strh	r3, [r7, #34]	; 0x22
 80151dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d01b      	beq.n	801521e <USB_ActivateEndpoint+0x33a>
 80151e6:	687a      	ldr	r2, [r7, #4]
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	009b      	lsls	r3, r3, #2
 80151ee:	4413      	add	r3, r2
 80151f0:	881b      	ldrh	r3, [r3, #0]
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80151f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151fc:	843b      	strh	r3, [r7, #32]
 80151fe:	687a      	ldr	r2, [r7, #4]
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	781b      	ldrb	r3, [r3, #0]
 8015204:	009b      	lsls	r3, r3, #2
 8015206:	441a      	add	r2, r3
 8015208:	8c3b      	ldrh	r3, [r7, #32]
 801520a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801520e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801521a:	b29b      	uxth	r3, r3
 801521c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d124      	bne.n	8015270 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015226:	687a      	ldr	r2, [r7, #4]
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	781b      	ldrb	r3, [r3, #0]
 801522c:	009b      	lsls	r3, r3, #2
 801522e:	4413      	add	r3, r2
 8015230:	881b      	ldrh	r3, [r3, #0]
 8015232:	b29b      	uxth	r3, r3
 8015234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801523c:	83bb      	strh	r3, [r7, #28]
 801523e:	8bbb      	ldrh	r3, [r7, #28]
 8015240:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8015244:	83bb      	strh	r3, [r7, #28]
 8015246:	8bbb      	ldrh	r3, [r7, #28]
 8015248:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801524c:	83bb      	strh	r3, [r7, #28]
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	781b      	ldrb	r3, [r3, #0]
 8015254:	009b      	lsls	r3, r3, #2
 8015256:	441a      	add	r2, r3
 8015258:	8bbb      	ldrh	r3, [r7, #28]
 801525a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801525e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801526a:	b29b      	uxth	r3, r3
 801526c:	8013      	strh	r3, [r2, #0]
 801526e:	e1ea      	b.n	8015646 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8015270:	687a      	ldr	r2, [r7, #4]
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	009b      	lsls	r3, r3, #2
 8015278:	4413      	add	r3, r2
 801527a:	881b      	ldrh	r3, [r3, #0]
 801527c:	b29b      	uxth	r3, r3
 801527e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015286:	83fb      	strh	r3, [r7, #30]
 8015288:	8bfb      	ldrh	r3, [r7, #30]
 801528a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801528e:	83fb      	strh	r3, [r7, #30]
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	009b      	lsls	r3, r3, #2
 8015298:	441a      	add	r2, r3
 801529a:	8bfb      	ldrh	r3, [r7, #30]
 801529c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80152a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80152a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80152a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152ac:	b29b      	uxth	r3, r3
 80152ae:	8013      	strh	r3, [r2, #0]
 80152b0:	e1c9      	b.n	8015646 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	78db      	ldrb	r3, [r3, #3]
 80152b6:	2b02      	cmp	r3, #2
 80152b8:	d11e      	bne.n	80152f8 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	781b      	ldrb	r3, [r3, #0]
 80152c0:	009b      	lsls	r3, r3, #2
 80152c2:	4413      	add	r3, r2
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80152cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80152d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80152d4:	687a      	ldr	r2, [r7, #4]
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	781b      	ldrb	r3, [r3, #0]
 80152da:	009b      	lsls	r3, r3, #2
 80152dc:	441a      	add	r2, r3
 80152de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80152e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80152e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80152ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80152ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	8013      	strh	r3, [r2, #0]
 80152f6:	e01d      	b.n	8015334 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80152f8:	687a      	ldr	r2, [r7, #4]
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	781b      	ldrb	r3, [r3, #0]
 80152fe:	009b      	lsls	r3, r3, #2
 8015300:	4413      	add	r3, r2
 8015302:	881b      	ldrh	r3, [r3, #0]
 8015304:	b29b      	uxth	r3, r3
 8015306:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801530e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	781b      	ldrb	r3, [r3, #0]
 8015318:	009b      	lsls	r3, r3, #2
 801531a:	441a      	add	r2, r3
 801531c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8015320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801532c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015330:	b29b      	uxth	r3, r3
 8015332:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801533e:	b29b      	uxth	r3, r3
 8015340:	461a      	mov	r2, r3
 8015342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015344:	4413      	add	r3, r2
 8015346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	00da      	lsls	r2, r3, #3
 801534e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015350:	4413      	add	r3, r2
 8015352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015356:	65bb      	str	r3, [r7, #88]	; 0x58
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	891b      	ldrh	r3, [r3, #8]
 801535c:	085b      	lsrs	r3, r3, #1
 801535e:	b29b      	uxth	r3, r3
 8015360:	005b      	lsls	r3, r3, #1
 8015362:	b29a      	uxth	r2, r3
 8015364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015366:	801a      	strh	r2, [r3, #0]
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	657b      	str	r3, [r7, #84]	; 0x54
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015372:	b29b      	uxth	r3, r3
 8015374:	461a      	mov	r2, r3
 8015376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015378:	4413      	add	r3, r2
 801537a:	657b      	str	r3, [r7, #84]	; 0x54
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	781b      	ldrb	r3, [r3, #0]
 8015380:	00da      	lsls	r2, r3, #3
 8015382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015384:	4413      	add	r3, r2
 8015386:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801538a:	653b      	str	r3, [r7, #80]	; 0x50
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	895b      	ldrh	r3, [r3, #10]
 8015390:	085b      	lsrs	r3, r3, #1
 8015392:	b29b      	uxth	r3, r3
 8015394:	005b      	lsls	r3, r3, #1
 8015396:	b29a      	uxth	r2, r3
 8015398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801539a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	785b      	ldrb	r3, [r3, #1]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	f040 8093 	bne.w	80154cc <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80153a6:	687a      	ldr	r2, [r7, #4]
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	781b      	ldrb	r3, [r3, #0]
 80153ac:	009b      	lsls	r3, r3, #2
 80153ae:	4413      	add	r3, r2
 80153b0:	881b      	ldrh	r3, [r3, #0]
 80153b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80153b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80153ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d01b      	beq.n	80153fa <USB_ActivateEndpoint+0x516>
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	781b      	ldrb	r3, [r3, #0]
 80153c8:	009b      	lsls	r3, r3, #2
 80153ca:	4413      	add	r3, r2
 80153cc:	881b      	ldrh	r3, [r3, #0]
 80153ce:	b29b      	uxth	r3, r3
 80153d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80153d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80153d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80153da:	687a      	ldr	r2, [r7, #4]
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	781b      	ldrb	r3, [r3, #0]
 80153e0:	009b      	lsls	r3, r3, #2
 80153e2:	441a      	add	r2, r3
 80153e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80153e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80153ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80153ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80153f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153f6:	b29b      	uxth	r3, r3
 80153f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80153fa:	687a      	ldr	r2, [r7, #4]
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	781b      	ldrb	r3, [r3, #0]
 8015400:	009b      	lsls	r3, r3, #2
 8015402:	4413      	add	r3, r2
 8015404:	881b      	ldrh	r3, [r3, #0]
 8015406:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015408:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801540e:	2b00      	cmp	r3, #0
 8015410:	d01b      	beq.n	801544a <USB_ActivateEndpoint+0x566>
 8015412:	687a      	ldr	r2, [r7, #4]
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	781b      	ldrb	r3, [r3, #0]
 8015418:	009b      	lsls	r3, r3, #2
 801541a:	4413      	add	r3, r2
 801541c:	881b      	ldrh	r3, [r3, #0]
 801541e:	b29b      	uxth	r3, r3
 8015420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015428:	877b      	strh	r3, [r7, #58]	; 0x3a
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	781b      	ldrb	r3, [r3, #0]
 8015430:	009b      	lsls	r3, r3, #2
 8015432:	441a      	add	r2, r3
 8015434:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801543a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801543e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015442:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8015446:	b29b      	uxth	r3, r3
 8015448:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801544a:	687a      	ldr	r2, [r7, #4]
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	781b      	ldrb	r3, [r3, #0]
 8015450:	009b      	lsls	r3, r3, #2
 8015452:	4413      	add	r3, r2
 8015454:	881b      	ldrh	r3, [r3, #0]
 8015456:	b29b      	uxth	r3, r3
 8015458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801545c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015460:	873b      	strh	r3, [r7, #56]	; 0x38
 8015462:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015464:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8015468:	873b      	strh	r3, [r7, #56]	; 0x38
 801546a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801546c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8015470:	873b      	strh	r3, [r7, #56]	; 0x38
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	009b      	lsls	r3, r3, #2
 801547a:	441a      	add	r2, r3
 801547c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801547e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801548a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801548e:	b29b      	uxth	r3, r3
 8015490:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015492:	687a      	ldr	r2, [r7, #4]
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	009b      	lsls	r3, r3, #2
 801549a:	4413      	add	r3, r2
 801549c:	881b      	ldrh	r3, [r3, #0]
 801549e:	b29b      	uxth	r3, r3
 80154a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80154a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80154a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80154aa:	687a      	ldr	r2, [r7, #4]
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	009b      	lsls	r3, r3, #2
 80154b2:	441a      	add	r2, r3
 80154b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80154b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80154ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80154be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80154c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	8013      	strh	r3, [r2, #0]
 80154ca:	e0bc      	b.n	8015646 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80154cc:	687a      	ldr	r2, [r7, #4]
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	781b      	ldrb	r3, [r3, #0]
 80154d2:	009b      	lsls	r3, r3, #2
 80154d4:	4413      	add	r3, r2
 80154d6:	881b      	ldrh	r3, [r3, #0]
 80154d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80154dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80154e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d01d      	beq.n	8015524 <USB_ActivateEndpoint+0x640>
 80154e8:	687a      	ldr	r2, [r7, #4]
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	781b      	ldrb	r3, [r3, #0]
 80154ee:	009b      	lsls	r3, r3, #2
 80154f0:	4413      	add	r3, r2
 80154f2:	881b      	ldrh	r3, [r3, #0]
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80154fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80154fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015502:	687a      	ldr	r2, [r7, #4]
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	781b      	ldrb	r3, [r3, #0]
 8015508:	009b      	lsls	r3, r3, #2
 801550a:	441a      	add	r2, r3
 801550c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8015510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801551c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015520:	b29b      	uxth	r3, r3
 8015522:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	781b      	ldrb	r3, [r3, #0]
 801552a:	009b      	lsls	r3, r3, #2
 801552c:	4413      	add	r3, r2
 801552e:	881b      	ldrh	r3, [r3, #0]
 8015530:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8015534:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8015538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801553c:	2b00      	cmp	r3, #0
 801553e:	d01d      	beq.n	801557c <USB_ActivateEndpoint+0x698>
 8015540:	687a      	ldr	r2, [r7, #4]
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	781b      	ldrb	r3, [r3, #0]
 8015546:	009b      	lsls	r3, r3, #2
 8015548:	4413      	add	r3, r2
 801554a:	881b      	ldrh	r3, [r3, #0]
 801554c:	b29b      	uxth	r3, r3
 801554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015556:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	009b      	lsls	r3, r3, #2
 8015562:	441a      	add	r2, r3
 8015564:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801556c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015574:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8015578:	b29b      	uxth	r3, r3
 801557a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	78db      	ldrb	r3, [r3, #3]
 8015580:	2b01      	cmp	r3, #1
 8015582:	d024      	beq.n	80155ce <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8015584:	687a      	ldr	r2, [r7, #4]
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	009b      	lsls	r3, r3, #2
 801558c:	4413      	add	r3, r2
 801558e:	881b      	ldrh	r3, [r3, #0]
 8015590:	b29b      	uxth	r3, r3
 8015592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801559a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801559e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80155a2:	f083 0320 	eor.w	r3, r3, #32
 80155a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80155aa:	687a      	ldr	r2, [r7, #4]
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	009b      	lsls	r3, r3, #2
 80155b2:	441a      	add	r2, r3
 80155b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80155b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80155bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80155c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80155c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	8013      	strh	r3, [r2, #0]
 80155cc:	e01d      	b.n	801560a <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80155ce:	687a      	ldr	r2, [r7, #4]
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	009b      	lsls	r3, r3, #2
 80155d6:	4413      	add	r3, r2
 80155d8:	881b      	ldrh	r3, [r3, #0]
 80155da:	b29b      	uxth	r3, r3
 80155dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80155e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80155e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80155e8:	687a      	ldr	r2, [r7, #4]
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	009b      	lsls	r3, r3, #2
 80155f0:	441a      	add	r2, r3
 80155f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80155f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80155fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80155fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015606:	b29b      	uxth	r3, r3
 8015608:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801560a:	687a      	ldr	r2, [r7, #4]
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	009b      	lsls	r3, r3, #2
 8015612:	4413      	add	r3, r2
 8015614:	881b      	ldrh	r3, [r3, #0]
 8015616:	b29b      	uxth	r3, r3
 8015618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015620:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015624:	687a      	ldr	r2, [r7, #4]
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	009b      	lsls	r3, r3, #2
 801562c:	441a      	add	r2, r3
 801562e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801563a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801563e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015642:	b29b      	uxth	r3, r3
 8015644:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8015646:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801564a:	4618      	mov	r0, r3
 801564c:	3774      	adds	r7, #116	; 0x74
 801564e:	46bd      	mov	sp, r7
 8015650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015654:	4770      	bx	lr
 8015656:	bf00      	nop

08015658 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015658:	b480      	push	{r7}
 801565a:	b08d      	sub	sp, #52	; 0x34
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
 8015660:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	7b1b      	ldrb	r3, [r3, #12]
 8015666:	2b00      	cmp	r3, #0
 8015668:	f040 808e 	bne.w	8015788 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	785b      	ldrb	r3, [r3, #1]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d044      	beq.n	80156fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015674:	687a      	ldr	r2, [r7, #4]
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	009b      	lsls	r3, r3, #2
 801567c:	4413      	add	r3, r2
 801567e:	881b      	ldrh	r3, [r3, #0]
 8015680:	81bb      	strh	r3, [r7, #12]
 8015682:	89bb      	ldrh	r3, [r7, #12]
 8015684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015688:	2b00      	cmp	r3, #0
 801568a:	d01b      	beq.n	80156c4 <USB_DeactivateEndpoint+0x6c>
 801568c:	687a      	ldr	r2, [r7, #4]
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	009b      	lsls	r3, r3, #2
 8015694:	4413      	add	r3, r2
 8015696:	881b      	ldrh	r3, [r3, #0]
 8015698:	b29b      	uxth	r3, r3
 801569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80156a2:	817b      	strh	r3, [r7, #10]
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	781b      	ldrb	r3, [r3, #0]
 80156aa:	009b      	lsls	r3, r3, #2
 80156ac:	441a      	add	r2, r3
 80156ae:	897b      	ldrh	r3, [r7, #10]
 80156b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80156b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80156b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80156bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	009b      	lsls	r3, r3, #2
 80156cc:	4413      	add	r3, r2
 80156ce:	881b      	ldrh	r3, [r3, #0]
 80156d0:	b29b      	uxth	r3, r3
 80156d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80156d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80156da:	813b      	strh	r3, [r7, #8]
 80156dc:	687a      	ldr	r2, [r7, #4]
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	009b      	lsls	r3, r3, #2
 80156e4:	441a      	add	r2, r3
 80156e6:	893b      	ldrh	r3, [r7, #8]
 80156e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80156ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80156f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80156f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	8013      	strh	r3, [r2, #0]
 80156fc:	e192      	b.n	8015a24 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80156fe:	687a      	ldr	r2, [r7, #4]
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	009b      	lsls	r3, r3, #2
 8015706:	4413      	add	r3, r2
 8015708:	881b      	ldrh	r3, [r3, #0]
 801570a:	827b      	strh	r3, [r7, #18]
 801570c:	8a7b      	ldrh	r3, [r7, #18]
 801570e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015712:	2b00      	cmp	r3, #0
 8015714:	d01b      	beq.n	801574e <USB_DeactivateEndpoint+0xf6>
 8015716:	687a      	ldr	r2, [r7, #4]
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	781b      	ldrb	r3, [r3, #0]
 801571c:	009b      	lsls	r3, r3, #2
 801571e:	4413      	add	r3, r2
 8015720:	881b      	ldrh	r3, [r3, #0]
 8015722:	b29b      	uxth	r3, r3
 8015724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801572c:	823b      	strh	r3, [r7, #16]
 801572e:	687a      	ldr	r2, [r7, #4]
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	441a      	add	r2, r3
 8015738:	8a3b      	ldrh	r3, [r7, #16]
 801573a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801573e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801574a:	b29b      	uxth	r3, r3
 801574c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801574e:	687a      	ldr	r2, [r7, #4]
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	781b      	ldrb	r3, [r3, #0]
 8015754:	009b      	lsls	r3, r3, #2
 8015756:	4413      	add	r3, r2
 8015758:	881b      	ldrh	r3, [r3, #0]
 801575a:	b29b      	uxth	r3, r3
 801575c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015764:	81fb      	strh	r3, [r7, #14]
 8015766:	687a      	ldr	r2, [r7, #4]
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	009b      	lsls	r3, r3, #2
 801576e:	441a      	add	r2, r3
 8015770:	89fb      	ldrh	r3, [r7, #14]
 8015772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801577a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801577e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015782:	b29b      	uxth	r3, r3
 8015784:	8013      	strh	r3, [r2, #0]
 8015786:	e14d      	b.n	8015a24 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	785b      	ldrb	r3, [r3, #1]
 801578c:	2b00      	cmp	r3, #0
 801578e:	f040 80a5 	bne.w	80158dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015792:	687a      	ldr	r2, [r7, #4]
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	781b      	ldrb	r3, [r3, #0]
 8015798:	009b      	lsls	r3, r3, #2
 801579a:	4413      	add	r3, r2
 801579c:	881b      	ldrh	r3, [r3, #0]
 801579e:	843b      	strh	r3, [r7, #32]
 80157a0:	8c3b      	ldrh	r3, [r7, #32]
 80157a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d01b      	beq.n	80157e2 <USB_DeactivateEndpoint+0x18a>
 80157aa:	687a      	ldr	r2, [r7, #4]
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	009b      	lsls	r3, r3, #2
 80157b2:	4413      	add	r3, r2
 80157b4:	881b      	ldrh	r3, [r3, #0]
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80157bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80157c0:	83fb      	strh	r3, [r7, #30]
 80157c2:	687a      	ldr	r2, [r7, #4]
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	009b      	lsls	r3, r3, #2
 80157ca:	441a      	add	r2, r3
 80157cc:	8bfb      	ldrh	r3, [r7, #30]
 80157ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80157d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80157d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80157da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157de:	b29b      	uxth	r3, r3
 80157e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80157e2:	687a      	ldr	r2, [r7, #4]
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	009b      	lsls	r3, r3, #2
 80157ea:	4413      	add	r3, r2
 80157ec:	881b      	ldrh	r3, [r3, #0]
 80157ee:	83bb      	strh	r3, [r7, #28]
 80157f0:	8bbb      	ldrh	r3, [r7, #28]
 80157f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d01b      	beq.n	8015832 <USB_DeactivateEndpoint+0x1da>
 80157fa:	687a      	ldr	r2, [r7, #4]
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	009b      	lsls	r3, r3, #2
 8015802:	4413      	add	r3, r2
 8015804:	881b      	ldrh	r3, [r3, #0]
 8015806:	b29b      	uxth	r3, r3
 8015808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015810:	837b      	strh	r3, [r7, #26]
 8015812:	687a      	ldr	r2, [r7, #4]
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	009b      	lsls	r3, r3, #2
 801581a:	441a      	add	r2, r3
 801581c:	8b7b      	ldrh	r3, [r7, #26]
 801581e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801582a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801582e:	b29b      	uxth	r3, r3
 8015830:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	009b      	lsls	r3, r3, #2
 801583a:	4413      	add	r3, r2
 801583c:	881b      	ldrh	r3, [r3, #0]
 801583e:	b29b      	uxth	r3, r3
 8015840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015848:	833b      	strh	r3, [r7, #24]
 801584a:	687a      	ldr	r2, [r7, #4]
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	009b      	lsls	r3, r3, #2
 8015852:	441a      	add	r2, r3
 8015854:	8b3b      	ldrh	r3, [r7, #24]
 8015856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801585a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801585e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015862:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8015866:	b29b      	uxth	r3, r3
 8015868:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801586a:	687a      	ldr	r2, [r7, #4]
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	009b      	lsls	r3, r3, #2
 8015872:	4413      	add	r3, r2
 8015874:	881b      	ldrh	r3, [r3, #0]
 8015876:	b29b      	uxth	r3, r3
 8015878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801587c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015880:	82fb      	strh	r3, [r7, #22]
 8015882:	687a      	ldr	r2, [r7, #4]
 8015884:	683b      	ldr	r3, [r7, #0]
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	009b      	lsls	r3, r3, #2
 801588a:	441a      	add	r2, r3
 801588c:	8afb      	ldrh	r3, [r7, #22]
 801588e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801589a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801589e:	b29b      	uxth	r3, r3
 80158a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80158a2:	687a      	ldr	r2, [r7, #4]
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	4413      	add	r3, r2
 80158ac:	881b      	ldrh	r3, [r3, #0]
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80158b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80158b8:	82bb      	strh	r3, [r7, #20]
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	441a      	add	r2, r3
 80158c4:	8abb      	ldrh	r3, [r7, #20]
 80158c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80158ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80158ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80158d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158d6:	b29b      	uxth	r3, r3
 80158d8:	8013      	strh	r3, [r2, #0]
 80158da:	e0a3      	b.n	8015a24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	683b      	ldr	r3, [r7, #0]
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	009b      	lsls	r3, r3, #2
 80158e4:	4413      	add	r3, r2
 80158e6:	881b      	ldrh	r3, [r3, #0]
 80158e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80158ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80158ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d01b      	beq.n	801592c <USB_DeactivateEndpoint+0x2d4>
 80158f4:	687a      	ldr	r2, [r7, #4]
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	009b      	lsls	r3, r3, #2
 80158fc:	4413      	add	r3, r2
 80158fe:	881b      	ldrh	r3, [r3, #0]
 8015900:	b29b      	uxth	r3, r3
 8015902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801590a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	441a      	add	r2, r3
 8015916:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801591c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015928:	b29b      	uxth	r3, r3
 801592a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801592c:	687a      	ldr	r2, [r7, #4]
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	009b      	lsls	r3, r3, #2
 8015934:	4413      	add	r3, r2
 8015936:	881b      	ldrh	r3, [r3, #0]
 8015938:	857b      	strh	r3, [r7, #42]	; 0x2a
 801593a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015940:	2b00      	cmp	r3, #0
 8015942:	d01b      	beq.n	801597c <USB_DeactivateEndpoint+0x324>
 8015944:	687a      	ldr	r2, [r7, #4]
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	009b      	lsls	r3, r3, #2
 801594c:	4413      	add	r3, r2
 801594e:	881b      	ldrh	r3, [r3, #0]
 8015950:	b29b      	uxth	r3, r3
 8015952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801595a:	853b      	strh	r3, [r7, #40]	; 0x28
 801595c:	687a      	ldr	r2, [r7, #4]
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	009b      	lsls	r3, r3, #2
 8015964:	441a      	add	r2, r3
 8015966:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801596c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8015978:	b29b      	uxth	r3, r3
 801597a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801597c:	687a      	ldr	r2, [r7, #4]
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	781b      	ldrb	r3, [r3, #0]
 8015982:	009b      	lsls	r3, r3, #2
 8015984:	4413      	add	r3, r2
 8015986:	881b      	ldrh	r3, [r3, #0]
 8015988:	b29b      	uxth	r3, r3
 801598a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015992:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015994:	687a      	ldr	r2, [r7, #4]
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	781b      	ldrb	r3, [r3, #0]
 801599a:	009b      	lsls	r3, r3, #2
 801599c:	441a      	add	r2, r3
 801599e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80159a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80159a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80159a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80159ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159b0:	b29b      	uxth	r3, r3
 80159b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80159b4:	687a      	ldr	r2, [r7, #4]
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	009b      	lsls	r3, r3, #2
 80159bc:	4413      	add	r3, r2
 80159be:	881b      	ldrh	r3, [r3, #0]
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80159c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80159ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80159cc:	687a      	ldr	r2, [r7, #4]
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	781b      	ldrb	r3, [r3, #0]
 80159d2:	009b      	lsls	r3, r3, #2
 80159d4:	441a      	add	r2, r3
 80159d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80159d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80159dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80159e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80159e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80159ec:	687a      	ldr	r2, [r7, #4]
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	009b      	lsls	r3, r3, #2
 80159f4:	4413      	add	r3, r2
 80159f6:	881b      	ldrh	r3, [r3, #0]
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80159fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	009b      	lsls	r3, r3, #2
 8015a0c:	441a      	add	r2, r3
 8015a0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a20:	b29b      	uxth	r3, r3
 8015a22:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8015a24:	2300      	movs	r3, #0
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3734      	adds	r7, #52	; 0x34
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a30:	4770      	bx	lr

08015a32 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015a32:	b580      	push	{r7, lr}
 8015a34:	b0c2      	sub	sp, #264	; 0x108
 8015a36:	af00      	add	r7, sp, #0
 8015a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015a40:	6018      	str	r0, [r3, #0]
 8015a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015a4a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	785b      	ldrb	r3, [r3, #1]
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	f040 867b 	bne.w	8016754 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8015a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	699a      	ldr	r2, [r3, #24]
 8015a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	691b      	ldr	r3, [r3, #16]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d908      	bls.n	8015a8c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8015a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	691b      	ldr	r3, [r3, #16]
 8015a86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015a8a:	e007      	b.n	8015a9c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8015a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	699b      	ldr	r3, [r3, #24]
 8015a98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8015a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	7b1b      	ldrb	r3, [r3, #12]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d13a      	bne.n	8015b22 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8015aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	6959      	ldr	r1, [r3, #20]
 8015ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	88da      	ldrh	r2, [r3, #6]
 8015ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015ac8:	b29b      	uxth	r3, r3
 8015aca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8015ace:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8015ad2:	6800      	ldr	r0, [r0, #0]
 8015ad4:	f001 fc3e 	bl	8017354 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8015ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	613b      	str	r3, [r7, #16]
 8015ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	461a      	mov	r2, r3
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	4413      	add	r3, r2
 8015afa:	613b      	str	r3, [r7, #16]
 8015afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	00da      	lsls	r2, r3, #3
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	4413      	add	r3, r2
 8015b0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8015b12:	60fb      	str	r3, [r7, #12]
 8015b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015b18:	b29a      	uxth	r2, r3
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	801a      	strh	r2, [r3, #0]
 8015b1e:	f000 bde3 	b.w	80166e8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8015b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	78db      	ldrb	r3, [r3, #3]
 8015b2e:	2b02      	cmp	r3, #2
 8015b30:	f040 843a 	bne.w	80163a8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8015b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	6a1a      	ldr	r2, [r3, #32]
 8015b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	691b      	ldr	r3, [r3, #16]
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	f240 83b7 	bls.w	80162c0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8015b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015b5a:	681a      	ldr	r2, [r3, #0]
 8015b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	009b      	lsls	r3, r3, #2
 8015b6a:	4413      	add	r3, r2
 8015b6c:	881b      	ldrh	r3, [r3, #0]
 8015b6e:	b29b      	uxth	r3, r3
 8015b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015b78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8015b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	441a      	add	r2, r3
 8015b96:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015ba2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8015ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8015bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	6a1a      	ldr	r2, [r3, #32]
 8015bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015bbe:	1ad2      	subs	r2, r2, r3
 8015bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8015bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015bd4:	681a      	ldr	r2, [r3, #0]
 8015bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	4413      	add	r3, r2
 8015be6:	881b      	ldrh	r3, [r3, #0]
 8015be8:	b29b      	uxth	r3, r3
 8015bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	f000 81b3 	beq.w	8015f5a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8015bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8015c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	785b      	ldrb	r3, [r3, #1]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d16d      	bne.n	8015cec <USB_EPStartXfer+0x2ba>
 8015c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c30:	4413      	add	r3, r2
 8015c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	00da      	lsls	r2, r3, #3
 8015c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c44:	4413      	add	r3, r2
 8015c46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8015c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8015c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015c50:	2b3e      	cmp	r3, #62	; 0x3e
 8015c52:	d91c      	bls.n	8015c8e <USB_EPStartXfer+0x25c>
 8015c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015c58:	095b      	lsrs	r3, r3, #5
 8015c5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8015c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015c62:	f003 031f 	and.w	r3, r3, #31
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d104      	bne.n	8015c74 <USB_EPStartXfer+0x242>
 8015c6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015c6e:	3b01      	subs	r3, #1
 8015c70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8015c74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015c78:	b29b      	uxth	r3, r3
 8015c7a:	029b      	lsls	r3, r3, #10
 8015c7c:	b29b      	uxth	r3, r3
 8015c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015c86:	b29a      	uxth	r2, r3
 8015c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8a:	801a      	strh	r2, [r3, #0]
 8015c8c:	e053      	b.n	8015d36 <USB_EPStartXfer+0x304>
 8015c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d112      	bne.n	8015cbc <USB_EPStartXfer+0x28a>
 8015c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c98:	881b      	ldrh	r3, [r3, #0]
 8015c9a:	b29b      	uxth	r3, r3
 8015c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8015ca0:	b29a      	uxth	r2, r3
 8015ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca4:	801a      	strh	r2, [r3, #0]
 8015ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca8:	881b      	ldrh	r3, [r3, #0]
 8015caa:	b29b      	uxth	r3, r3
 8015cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015cb4:	b29a      	uxth	r2, r3
 8015cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb8:	801a      	strh	r2, [r3, #0]
 8015cba:	e03c      	b.n	8015d36 <USB_EPStartXfer+0x304>
 8015cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015cc0:	085b      	lsrs	r3, r3, #1
 8015cc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8015cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015cca:	f003 0301 	and.w	r3, r3, #1
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d004      	beq.n	8015cdc <USB_EPStartXfer+0x2aa>
 8015cd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015cd6:	3301      	adds	r3, #1
 8015cd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8015cdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015ce0:	b29b      	uxth	r3, r3
 8015ce2:	029b      	lsls	r3, r3, #10
 8015ce4:	b29a      	uxth	r2, r3
 8015ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce8:	801a      	strh	r2, [r3, #0]
 8015cea:	e024      	b.n	8015d36 <USB_EPStartXfer+0x304>
 8015cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	785b      	ldrb	r3, [r3, #1]
 8015cf8:	2b01      	cmp	r3, #1
 8015cfa:	d11c      	bne.n	8015d36 <USB_EPStartXfer+0x304>
 8015cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015d0a:	b29b      	uxth	r3, r3
 8015d0c:	461a      	mov	r2, r3
 8015d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d10:	4413      	add	r3, r2
 8015d12:	633b      	str	r3, [r7, #48]	; 0x30
 8015d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	00da      	lsls	r2, r3, #3
 8015d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d24:	4413      	add	r3, r2
 8015d26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8015d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015d30:	b29a      	uxth	r2, r3
 8015d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8015d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	895b      	ldrh	r3, [r3, #10]
 8015d42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	6959      	ldr	r1, [r3, #20]
 8015d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015d56:	b29b      	uxth	r3, r3
 8015d58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8015d5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8015d60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8015d64:	6800      	ldr	r0, [r0, #0]
 8015d66:	f001 faf5 	bl	8017354 <USB_WritePMA>
            ep->xfer_buff += len;
 8015d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	695a      	ldr	r2, [r3, #20]
 8015d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015d7a:	441a      	add	r2, r3
 8015d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8015d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	6a1a      	ldr	r2, [r3, #32]
 8015d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	691b      	ldr	r3, [r3, #16]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d90f      	bls.n	8015dc4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8015da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	6a1a      	ldr	r2, [r3, #32]
 8015db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015db4:	1ad2      	subs	r2, r2, r3
 8015db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	621a      	str	r2, [r3, #32]
 8015dc2:	e00e      	b.n	8015de2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8015dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	6a1b      	ldr	r3, [r3, #32]
 8015dd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8015dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	2200      	movs	r2, #0
 8015de0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8015de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	785b      	ldrb	r3, [r3, #1]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d16d      	bne.n	8015ece <USB_EPStartXfer+0x49c>
 8015df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	61bb      	str	r3, [r7, #24]
 8015dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	461a      	mov	r2, r3
 8015e10:	69bb      	ldr	r3, [r7, #24]
 8015e12:	4413      	add	r3, r2
 8015e14:	61bb      	str	r3, [r7, #24]
 8015e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	781b      	ldrb	r3, [r3, #0]
 8015e22:	00da      	lsls	r2, r3, #3
 8015e24:	69bb      	ldr	r3, [r7, #24]
 8015e26:	4413      	add	r3, r2
 8015e28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8015e2c:	617b      	str	r3, [r7, #20]
 8015e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015e32:	2b3e      	cmp	r3, #62	; 0x3e
 8015e34:	d91c      	bls.n	8015e70 <USB_EPStartXfer+0x43e>
 8015e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015e3a:	095b      	lsrs	r3, r3, #5
 8015e3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8015e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015e44:	f003 031f 	and.w	r3, r3, #31
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d104      	bne.n	8015e56 <USB_EPStartXfer+0x424>
 8015e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015e50:	3b01      	subs	r3, #1
 8015e52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8015e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015e5a:	b29b      	uxth	r3, r3
 8015e5c:	029b      	lsls	r3, r3, #10
 8015e5e:	b29b      	uxth	r3, r3
 8015e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015e68:	b29a      	uxth	r2, r3
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	801a      	strh	r2, [r3, #0]
 8015e6e:	e059      	b.n	8015f24 <USB_EPStartXfer+0x4f2>
 8015e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d112      	bne.n	8015e9e <USB_EPStartXfer+0x46c>
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	881b      	ldrh	r3, [r3, #0]
 8015e7c:	b29b      	uxth	r3, r3
 8015e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8015e82:	b29a      	uxth	r2, r3
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	801a      	strh	r2, [r3, #0]
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	881b      	ldrh	r3, [r3, #0]
 8015e8c:	b29b      	uxth	r3, r3
 8015e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015e96:	b29a      	uxth	r2, r3
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	801a      	strh	r2, [r3, #0]
 8015e9c:	e042      	b.n	8015f24 <USB_EPStartXfer+0x4f2>
 8015e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015ea2:	085b      	lsrs	r3, r3, #1
 8015ea4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8015ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015eac:	f003 0301 	and.w	r3, r3, #1
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d004      	beq.n	8015ebe <USB_EPStartXfer+0x48c>
 8015eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015eb8:	3301      	adds	r3, #1
 8015eba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8015ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015ec2:	b29b      	uxth	r3, r3
 8015ec4:	029b      	lsls	r3, r3, #10
 8015ec6:	b29a      	uxth	r2, r3
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	801a      	strh	r2, [r3, #0]
 8015ecc:	e02a      	b.n	8015f24 <USB_EPStartXfer+0x4f2>
 8015ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	785b      	ldrb	r3, [r3, #1]
 8015eda:	2b01      	cmp	r3, #1
 8015edc:	d122      	bne.n	8015f24 <USB_EPStartXfer+0x4f2>
 8015ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	623b      	str	r3, [r7, #32]
 8015eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	461a      	mov	r2, r3
 8015efc:	6a3b      	ldr	r3, [r7, #32]
 8015efe:	4413      	add	r3, r2
 8015f00:	623b      	str	r3, [r7, #32]
 8015f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	781b      	ldrb	r3, [r3, #0]
 8015f0e:	00da      	lsls	r2, r3, #3
 8015f10:	6a3b      	ldr	r3, [r7, #32]
 8015f12:	4413      	add	r3, r2
 8015f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8015f18:	61fb      	str	r3, [r7, #28]
 8015f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015f1e:	b29a      	uxth	r2, r3
 8015f20:	69fb      	ldr	r3, [r7, #28]
 8015f22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8015f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	891b      	ldrh	r3, [r3, #8]
 8015f30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	6959      	ldr	r1, [r3, #20]
 8015f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015f44:	b29b      	uxth	r3, r3
 8015f46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8015f4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8015f4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8015f52:	6800      	ldr	r0, [r0, #0]
 8015f54:	f001 f9fe 	bl	8017354 <USB_WritePMA>
 8015f58:	e3c6      	b.n	80166e8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8015f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	785b      	ldrb	r3, [r3, #1]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d16d      	bne.n	8016046 <USB_EPStartXfer+0x614>
 8015f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8015f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015f84:	b29b      	uxth	r3, r3
 8015f86:	461a      	mov	r2, r3
 8015f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f8a:	4413      	add	r3, r2
 8015f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8015f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	781b      	ldrb	r3, [r3, #0]
 8015f9a:	00da      	lsls	r2, r3, #3
 8015f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f9e:	4413      	add	r3, r2
 8015fa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8015fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8015fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015faa:	2b3e      	cmp	r3, #62	; 0x3e
 8015fac:	d91c      	bls.n	8015fe8 <USB_EPStartXfer+0x5b6>
 8015fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015fb2:	095b      	lsrs	r3, r3, #5
 8015fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8015fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015fbc:	f003 031f 	and.w	r3, r3, #31
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d104      	bne.n	8015fce <USB_EPStartXfer+0x59c>
 8015fc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015fc8:	3b01      	subs	r3, #1
 8015fca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8015fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015fd2:	b29b      	uxth	r3, r3
 8015fd4:	029b      	lsls	r3, r3, #10
 8015fd6:	b29b      	uxth	r3, r3
 8015fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015fe0:	b29a      	uxth	r2, r3
 8015fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fe4:	801a      	strh	r2, [r3, #0]
 8015fe6:	e059      	b.n	801609c <USB_EPStartXfer+0x66a>
 8015fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d112      	bne.n	8016016 <USB_EPStartXfer+0x5e4>
 8015ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ff2:	881b      	ldrh	r3, [r3, #0]
 8015ff4:	b29b      	uxth	r3, r3
 8015ff6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8015ffa:	b29a      	uxth	r2, r3
 8015ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ffe:	801a      	strh	r2, [r3, #0]
 8016000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016002:	881b      	ldrh	r3, [r3, #0]
 8016004:	b29b      	uxth	r3, r3
 8016006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801600a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801600e:	b29a      	uxth	r2, r3
 8016010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016012:	801a      	strh	r2, [r3, #0]
 8016014:	e042      	b.n	801609c <USB_EPStartXfer+0x66a>
 8016016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801601a:	085b      	lsrs	r3, r3, #1
 801601c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8016020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016024:	f003 0301 	and.w	r3, r3, #1
 8016028:	2b00      	cmp	r3, #0
 801602a:	d004      	beq.n	8016036 <USB_EPStartXfer+0x604>
 801602c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8016030:	3301      	adds	r3, #1
 8016032:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8016036:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801603a:	b29b      	uxth	r3, r3
 801603c:	029b      	lsls	r3, r3, #10
 801603e:	b29a      	uxth	r2, r3
 8016040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016042:	801a      	strh	r2, [r3, #0]
 8016044:	e02a      	b.n	801609c <USB_EPStartXfer+0x66a>
 8016046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801604a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	785b      	ldrb	r3, [r3, #1]
 8016052:	2b01      	cmp	r3, #1
 8016054:	d122      	bne.n	801609c <USB_EPStartXfer+0x66a>
 8016056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801605a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	653b      	str	r3, [r7, #80]	; 0x50
 8016062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016070:	b29b      	uxth	r3, r3
 8016072:	461a      	mov	r2, r3
 8016074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016076:	4413      	add	r3, r2
 8016078:	653b      	str	r3, [r7, #80]	; 0x50
 801607a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801607e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	781b      	ldrb	r3, [r3, #0]
 8016086:	00da      	lsls	r2, r3, #3
 8016088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801608a:	4413      	add	r3, r2
 801608c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8016090:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016096:	b29a      	uxth	r2, r3
 8016098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801609a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801609c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80160a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	891b      	ldrh	r3, [r3, #8]
 80160a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80160ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80160b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	6959      	ldr	r1, [r3, #20]
 80160b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80160bc:	b29b      	uxth	r3, r3
 80160be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80160c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80160c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80160ca:	6800      	ldr	r0, [r0, #0]
 80160cc:	f001 f942 	bl	8017354 <USB_WritePMA>
            ep->xfer_buff += len;
 80160d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80160d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	695a      	ldr	r2, [r3, #20]
 80160dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80160e0:	441a      	add	r2, r3
 80160e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80160e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80160ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80160f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	6a1a      	ldr	r2, [r3, #32]
 80160fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80160fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	691b      	ldr	r3, [r3, #16]
 8016106:	429a      	cmp	r2, r3
 8016108:	d90f      	bls.n	801612a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 801610a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801610e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	6a1a      	ldr	r2, [r3, #32]
 8016116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801611a:	1ad2      	subs	r2, r2, r3
 801611c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	621a      	str	r2, [r3, #32]
 8016128:	e00e      	b.n	8016148 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 801612a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801612e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	6a1b      	ldr	r3, [r3, #32]
 8016136:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801613a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801613e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	2200      	movs	r2, #0
 8016146:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8016148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801614c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	643b      	str	r3, [r7, #64]	; 0x40
 8016154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	785b      	ldrb	r3, [r3, #1]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d16d      	bne.n	8016240 <USB_EPStartXfer+0x80e>
 8016164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801617e:	b29b      	uxth	r3, r3
 8016180:	461a      	mov	r2, r3
 8016182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016184:	4413      	add	r3, r2
 8016186:	63bb      	str	r3, [r7, #56]	; 0x38
 8016188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801618c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	00da      	lsls	r2, r3, #3
 8016196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016198:	4413      	add	r3, r2
 801619a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801619e:	637b      	str	r3, [r7, #52]	; 0x34
 80161a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80161a4:	2b3e      	cmp	r3, #62	; 0x3e
 80161a6:	d91c      	bls.n	80161e2 <USB_EPStartXfer+0x7b0>
 80161a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80161ac:	095b      	lsrs	r3, r3, #5
 80161ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80161b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80161b6:	f003 031f 	and.w	r3, r3, #31
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d104      	bne.n	80161c8 <USB_EPStartXfer+0x796>
 80161be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80161c2:	3b01      	subs	r3, #1
 80161c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80161c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80161cc:	b29b      	uxth	r3, r3
 80161ce:	029b      	lsls	r3, r3, #10
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80161d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80161da:	b29a      	uxth	r2, r3
 80161dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161de:	801a      	strh	r2, [r3, #0]
 80161e0:	e053      	b.n	801628a <USB_EPStartXfer+0x858>
 80161e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d112      	bne.n	8016210 <USB_EPStartXfer+0x7de>
 80161ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ec:	881b      	ldrh	r3, [r3, #0]
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80161f4:	b29a      	uxth	r2, r3
 80161f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161f8:	801a      	strh	r2, [r3, #0]
 80161fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161fc:	881b      	ldrh	r3, [r3, #0]
 80161fe:	b29b      	uxth	r3, r3
 8016200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016208:	b29a      	uxth	r2, r3
 801620a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801620c:	801a      	strh	r2, [r3, #0]
 801620e:	e03c      	b.n	801628a <USB_EPStartXfer+0x858>
 8016210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016214:	085b      	lsrs	r3, r3, #1
 8016216:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801621a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801621e:	f003 0301 	and.w	r3, r3, #1
 8016222:	2b00      	cmp	r3, #0
 8016224:	d004      	beq.n	8016230 <USB_EPStartXfer+0x7fe>
 8016226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801622a:	3301      	adds	r3, #1
 801622c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8016230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016234:	b29b      	uxth	r3, r3
 8016236:	029b      	lsls	r3, r3, #10
 8016238:	b29a      	uxth	r2, r3
 801623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801623c:	801a      	strh	r2, [r3, #0]
 801623e:	e024      	b.n	801628a <USB_EPStartXfer+0x858>
 8016240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	785b      	ldrb	r3, [r3, #1]
 801624c:	2b01      	cmp	r3, #1
 801624e:	d11c      	bne.n	801628a <USB_EPStartXfer+0x858>
 8016250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801625e:	b29b      	uxth	r3, r3
 8016260:	461a      	mov	r2, r3
 8016262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016264:	4413      	add	r3, r2
 8016266:	643b      	str	r3, [r7, #64]	; 0x40
 8016268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801626c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	00da      	lsls	r2, r3, #3
 8016276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016278:	4413      	add	r3, r2
 801627a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801627e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016284:	b29a      	uxth	r2, r3
 8016286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016288:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801628a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801628e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	895b      	ldrh	r3, [r3, #10]
 8016296:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801629a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801629e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	6959      	ldr	r1, [r3, #20]
 80162a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80162b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80162b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80162b8:	6800      	ldr	r0, [r0, #0]
 80162ba:	f001 f84b 	bl	8017354 <USB_WritePMA>
 80162be:	e213      	b.n	80166e8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80162c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80162c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	6a1b      	ldr	r3, [r3, #32]
 80162cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80162d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80162d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80162d8:	681a      	ldr	r2, [r3, #0]
 80162da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80162de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	781b      	ldrb	r3, [r3, #0]
 80162e6:	009b      	lsls	r3, r3, #2
 80162e8:	4413      	add	r3, r2
 80162ea:	881b      	ldrh	r3, [r3, #0]
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80162f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80162f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80162fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80162fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016302:	681a      	ldr	r2, [r3, #0]
 8016304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	009b      	lsls	r3, r3, #2
 8016312:	441a      	add	r2, r3
 8016314:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8016318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801631c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8016320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016328:	b29b      	uxth	r3, r3
 801632a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801632c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801633c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016346:	b29b      	uxth	r3, r3
 8016348:	461a      	mov	r2, r3
 801634a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801634c:	4413      	add	r3, r2
 801634e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	00da      	lsls	r2, r3, #3
 801635e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016360:	4413      	add	r3, r2
 8016362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8016366:	65bb      	str	r3, [r7, #88]	; 0x58
 8016368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801636c:	b29a      	uxth	r2, r3
 801636e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016370:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8016372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	891b      	ldrh	r3, [r3, #8]
 801637e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	6959      	ldr	r1, [r3, #20]
 801638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016392:	b29b      	uxth	r3, r3
 8016394:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8016398:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801639c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80163a0:	6800      	ldr	r0, [r0, #0]
 80163a2:	f000 ffd7 	bl	8017354 <USB_WritePMA>
 80163a6:	e19f      	b.n	80166e8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80163a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80163ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	6a1a      	ldr	r2, [r3, #32]
 80163b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80163b8:	1ad2      	subs	r2, r2, r3
 80163ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80163be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80163c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80163ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80163ce:	681a      	ldr	r2, [r3, #0]
 80163d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80163d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	781b      	ldrb	r3, [r3, #0]
 80163dc:	009b      	lsls	r3, r3, #2
 80163de:	4413      	add	r3, r2
 80163e0:	881b      	ldrh	r3, [r3, #0]
 80163e2:	b29b      	uxth	r3, r3
 80163e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	f000 80bc 	beq.w	8016566 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80163ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80163f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	673b      	str	r3, [r7, #112]	; 0x70
 80163fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80163fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	785b      	ldrb	r3, [r3, #1]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d16d      	bne.n	80164e6 <USB_EPStartXfer+0xab4>
 801640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801640e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	66bb      	str	r3, [r7, #104]	; 0x68
 8016416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801641a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016424:	b29b      	uxth	r3, r3
 8016426:	461a      	mov	r2, r3
 8016428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801642a:	4413      	add	r3, r2
 801642c:	66bb      	str	r3, [r7, #104]	; 0x68
 801642e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	00da      	lsls	r2, r3, #3
 801643c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801643e:	4413      	add	r3, r2
 8016440:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8016444:	667b      	str	r3, [r7, #100]	; 0x64
 8016446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801644a:	2b3e      	cmp	r3, #62	; 0x3e
 801644c:	d91c      	bls.n	8016488 <USB_EPStartXfer+0xa56>
 801644e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016452:	095b      	lsrs	r3, r3, #5
 8016454:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8016458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801645c:	f003 031f 	and.w	r3, r3, #31
 8016460:	2b00      	cmp	r3, #0
 8016462:	d104      	bne.n	801646e <USB_EPStartXfer+0xa3c>
 8016464:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8016468:	3b01      	subs	r3, #1
 801646a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801646e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8016472:	b29b      	uxth	r3, r3
 8016474:	029b      	lsls	r3, r3, #10
 8016476:	b29b      	uxth	r3, r3
 8016478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801647c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016480:	b29a      	uxth	r2, r3
 8016482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016484:	801a      	strh	r2, [r3, #0]
 8016486:	e053      	b.n	8016530 <USB_EPStartXfer+0xafe>
 8016488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801648c:	2b00      	cmp	r3, #0
 801648e:	d112      	bne.n	80164b6 <USB_EPStartXfer+0xa84>
 8016490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016492:	881b      	ldrh	r3, [r3, #0]
 8016494:	b29b      	uxth	r3, r3
 8016496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801649a:	b29a      	uxth	r2, r3
 801649c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801649e:	801a      	strh	r2, [r3, #0]
 80164a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80164a2:	881b      	ldrh	r3, [r3, #0]
 80164a4:	b29b      	uxth	r3, r3
 80164a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80164aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80164ae:	b29a      	uxth	r2, r3
 80164b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80164b2:	801a      	strh	r2, [r3, #0]
 80164b4:	e03c      	b.n	8016530 <USB_EPStartXfer+0xafe>
 80164b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80164ba:	085b      	lsrs	r3, r3, #1
 80164bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80164c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80164c4:	f003 0301 	and.w	r3, r3, #1
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d004      	beq.n	80164d6 <USB_EPStartXfer+0xaa4>
 80164cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80164d0:	3301      	adds	r3, #1
 80164d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80164d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80164da:	b29b      	uxth	r3, r3
 80164dc:	029b      	lsls	r3, r3, #10
 80164de:	b29a      	uxth	r2, r3
 80164e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80164e2:	801a      	strh	r2, [r3, #0]
 80164e4:	e024      	b.n	8016530 <USB_EPStartXfer+0xafe>
 80164e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80164ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	785b      	ldrb	r3, [r3, #1]
 80164f2:	2b01      	cmp	r3, #1
 80164f4:	d11c      	bne.n	8016530 <USB_EPStartXfer+0xafe>
 80164f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80164fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016504:	b29b      	uxth	r3, r3
 8016506:	461a      	mov	r2, r3
 8016508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801650a:	4413      	add	r3, r2
 801650c:	673b      	str	r3, [r7, #112]	; 0x70
 801650e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	00da      	lsls	r2, r3, #3
 801651c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801651e:	4413      	add	r3, r2
 8016520:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8016524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801652a:	b29a      	uxth	r2, r3
 801652c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801652e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8016530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	895b      	ldrh	r3, [r3, #10]
 801653c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	6959      	ldr	r1, [r3, #20]
 801654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016550:	b29b      	uxth	r3, r3
 8016552:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8016556:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801655a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801655e:	6800      	ldr	r0, [r0, #0]
 8016560:	f000 fef8 	bl	8017354 <USB_WritePMA>
 8016564:	e0c0      	b.n	80166e8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8016566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801656a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	785b      	ldrb	r3, [r3, #1]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d16d      	bne.n	8016652 <USB_EPStartXfer+0xc20>
 8016576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801657a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016590:	b29b      	uxth	r3, r3
 8016592:	461a      	mov	r2, r3
 8016594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016596:	4413      	add	r3, r2
 8016598:	67fb      	str	r3, [r7, #124]	; 0x7c
 801659a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801659e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	00da      	lsls	r2, r3, #3
 80165a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80165aa:	4413      	add	r3, r2
 80165ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80165b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80165b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80165b6:	2b3e      	cmp	r3, #62	; 0x3e
 80165b8:	d91c      	bls.n	80165f4 <USB_EPStartXfer+0xbc2>
 80165ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80165be:	095b      	lsrs	r3, r3, #5
 80165c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80165c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80165c8:	f003 031f 	and.w	r3, r3, #31
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d104      	bne.n	80165da <USB_EPStartXfer+0xba8>
 80165d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80165d4:	3b01      	subs	r3, #1
 80165d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80165da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80165de:	b29b      	uxth	r3, r3
 80165e0:	029b      	lsls	r3, r3, #10
 80165e2:	b29b      	uxth	r3, r3
 80165e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80165e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80165ec:	b29a      	uxth	r2, r3
 80165ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80165f0:	801a      	strh	r2, [r3, #0]
 80165f2:	e05f      	b.n	80166b4 <USB_EPStartXfer+0xc82>
 80165f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d112      	bne.n	8016622 <USB_EPStartXfer+0xbf0>
 80165fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80165fe:	881b      	ldrh	r3, [r3, #0]
 8016600:	b29b      	uxth	r3, r3
 8016602:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8016606:	b29a      	uxth	r2, r3
 8016608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801660a:	801a      	strh	r2, [r3, #0]
 801660c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801660e:	881b      	ldrh	r3, [r3, #0]
 8016610:	b29b      	uxth	r3, r3
 8016612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801661a:	b29a      	uxth	r2, r3
 801661c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801661e:	801a      	strh	r2, [r3, #0]
 8016620:	e048      	b.n	80166b4 <USB_EPStartXfer+0xc82>
 8016622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016626:	085b      	lsrs	r3, r3, #1
 8016628:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016630:	f003 0301 	and.w	r3, r3, #1
 8016634:	2b00      	cmp	r3, #0
 8016636:	d004      	beq.n	8016642 <USB_EPStartXfer+0xc10>
 8016638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801663c:	3301      	adds	r3, #1
 801663e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8016642:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016646:	b29b      	uxth	r3, r3
 8016648:	029b      	lsls	r3, r3, #10
 801664a:	b29a      	uxth	r2, r3
 801664c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801664e:	801a      	strh	r2, [r3, #0]
 8016650:	e030      	b.n	80166b4 <USB_EPStartXfer+0xc82>
 8016652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	785b      	ldrb	r3, [r3, #1]
 801665e:	2b01      	cmp	r3, #1
 8016660:	d128      	bne.n	80166b4 <USB_EPStartXfer+0xc82>
 8016662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801667e:	b29b      	uxth	r3, r3
 8016680:	461a      	mov	r2, r3
 8016682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016686:	4413      	add	r3, r2
 8016688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	781b      	ldrb	r3, [r3, #0]
 8016698:	00da      	lsls	r2, r3, #3
 801669a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801669e:	4413      	add	r3, r2
 80166a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80166a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80166a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80166ac:	b29a      	uxth	r2, r3
 80166ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80166b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80166b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80166b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	891b      	ldrh	r3, [r3, #8]
 80166c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80166c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80166c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	6959      	ldr	r1, [r3, #20]
 80166d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80166d4:	b29b      	uxth	r3, r3
 80166d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80166da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80166de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80166e2:	6800      	ldr	r0, [r0, #0]
 80166e4:	f000 fe36 	bl	8017354 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80166e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80166ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80166f0:	681a      	ldr	r2, [r3, #0]
 80166f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80166f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	781b      	ldrb	r3, [r3, #0]
 80166fe:	009b      	lsls	r3, r3, #2
 8016700:	4413      	add	r3, r2
 8016702:	881b      	ldrh	r3, [r3, #0]
 8016704:	b29b      	uxth	r3, r3
 8016706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801670a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801670e:	817b      	strh	r3, [r7, #10]
 8016710:	897b      	ldrh	r3, [r7, #10]
 8016712:	f083 0310 	eor.w	r3, r3, #16
 8016716:	817b      	strh	r3, [r7, #10]
 8016718:	897b      	ldrh	r3, [r7, #10]
 801671a:	f083 0320 	eor.w	r3, r3, #32
 801671e:	817b      	strh	r3, [r7, #10]
 8016720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016728:	681a      	ldr	r2, [r3, #0]
 801672a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801672e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	781b      	ldrb	r3, [r3, #0]
 8016736:	009b      	lsls	r3, r3, #2
 8016738:	441a      	add	r2, r3
 801673a:	897b      	ldrh	r3, [r7, #10]
 801673c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8016740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8016744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801674c:	b29b      	uxth	r3, r3
 801674e:	8013      	strh	r3, [r2, #0]
 8016750:	f000 bc9f 	b.w	8017092 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8016754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	7b1b      	ldrb	r3, [r3, #12]
 8016760:	2b00      	cmp	r3, #0
 8016762:	f040 80ae 	bne.w	80168c2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8016766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801676a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	699a      	ldr	r2, [r3, #24]
 8016772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	691b      	ldr	r3, [r3, #16]
 801677e:	429a      	cmp	r2, r3
 8016780:	d917      	bls.n	80167b2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8016782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	691b      	ldr	r3, [r3, #16]
 801678e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8016792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	699a      	ldr	r2, [r3, #24]
 801679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80167a2:	1ad2      	subs	r2, r2, r3
 80167a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	619a      	str	r2, [r3, #24]
 80167b0:	e00e      	b.n	80167d0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80167b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	699b      	ldr	r3, [r3, #24]
 80167be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80167c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	2200      	movs	r2, #0
 80167ce:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80167d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80167de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80167ec:	b29b      	uxth	r3, r3
 80167ee:	461a      	mov	r2, r3
 80167f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80167f4:	4413      	add	r3, r2
 80167f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80167fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	781b      	ldrb	r3, [r3, #0]
 8016806:	00da      	lsls	r2, r3, #3
 8016808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801680c:	4413      	add	r3, r2
 801680e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8016812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801681a:	2b3e      	cmp	r3, #62	; 0x3e
 801681c:	d91d      	bls.n	801685a <USB_EPStartXfer+0xe28>
 801681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016822:	095b      	lsrs	r3, r3, #5
 8016824:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8016828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801682c:	f003 031f 	and.w	r3, r3, #31
 8016830:	2b00      	cmp	r3, #0
 8016832:	d104      	bne.n	801683e <USB_EPStartXfer+0xe0c>
 8016834:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016838:	3b01      	subs	r3, #1
 801683a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801683e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016842:	b29b      	uxth	r3, r3
 8016844:	029b      	lsls	r3, r3, #10
 8016846:	b29b      	uxth	r3, r3
 8016848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801684c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016850:	b29a      	uxth	r2, r3
 8016852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016856:	801a      	strh	r2, [r3, #0]
 8016858:	e3e1      	b.n	801701e <USB_EPStartXfer+0x15ec>
 801685a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801685e:	2b00      	cmp	r3, #0
 8016860:	d116      	bne.n	8016890 <USB_EPStartXfer+0xe5e>
 8016862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016866:	881b      	ldrh	r3, [r3, #0]
 8016868:	b29b      	uxth	r3, r3
 801686a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801686e:	b29a      	uxth	r2, r3
 8016870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016874:	801a      	strh	r2, [r3, #0]
 8016876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801687a:	881b      	ldrh	r3, [r3, #0]
 801687c:	b29b      	uxth	r3, r3
 801687e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016886:	b29a      	uxth	r2, r3
 8016888:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801688c:	801a      	strh	r2, [r3, #0]
 801688e:	e3c6      	b.n	801701e <USB_EPStartXfer+0x15ec>
 8016890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016894:	085b      	lsrs	r3, r3, #1
 8016896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801689e:	f003 0301 	and.w	r3, r3, #1
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d004      	beq.n	80168b0 <USB_EPStartXfer+0xe7e>
 80168a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80168aa:	3301      	adds	r3, #1
 80168ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80168b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80168b4:	b29b      	uxth	r3, r3
 80168b6:	029b      	lsls	r3, r3, #10
 80168b8:	b29a      	uxth	r2, r3
 80168ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80168be:	801a      	strh	r2, [r3, #0]
 80168c0:	e3ad      	b.n	801701e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80168c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80168c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	78db      	ldrb	r3, [r3, #3]
 80168ce:	2b02      	cmp	r3, #2
 80168d0:	f040 8200 	bne.w	8016cd4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80168d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80168d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	785b      	ldrb	r3, [r3, #1]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	f040 8091 	bne.w	8016a08 <USB_EPStartXfer+0xfd6>
 80168e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80168ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80168f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80168f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016902:	b29b      	uxth	r3, r3
 8016904:	461a      	mov	r2, r3
 8016906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801690a:	4413      	add	r3, r2
 801690c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	781b      	ldrb	r3, [r3, #0]
 801691c:	00da      	lsls	r2, r3, #3
 801691e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016922:	4413      	add	r3, r2
 8016924:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8016928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	691b      	ldr	r3, [r3, #16]
 8016938:	2b3e      	cmp	r3, #62	; 0x3e
 801693a:	d925      	bls.n	8016988 <USB_EPStartXfer+0xf56>
 801693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	691b      	ldr	r3, [r3, #16]
 8016948:	095b      	lsrs	r3, r3, #5
 801694a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	691b      	ldr	r3, [r3, #16]
 801695a:	f003 031f 	and.w	r3, r3, #31
 801695e:	2b00      	cmp	r3, #0
 8016960:	d104      	bne.n	801696c <USB_EPStartXfer+0xf3a>
 8016962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016966:	3b01      	subs	r3, #1
 8016968:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016970:	b29b      	uxth	r3, r3
 8016972:	029b      	lsls	r3, r3, #10
 8016974:	b29b      	uxth	r3, r3
 8016976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801697a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801697e:	b29a      	uxth	r2, r3
 8016980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016984:	801a      	strh	r2, [r3, #0]
 8016986:	e074      	b.n	8016a72 <USB_EPStartXfer+0x1040>
 8016988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801698c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	691b      	ldr	r3, [r3, #16]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d116      	bne.n	80169c6 <USB_EPStartXfer+0xf94>
 8016998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801699c:	881b      	ldrh	r3, [r3, #0]
 801699e:	b29b      	uxth	r3, r3
 80169a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80169a4:	b29a      	uxth	r2, r3
 80169a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80169aa:	801a      	strh	r2, [r3, #0]
 80169ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80169b0:	881b      	ldrh	r3, [r3, #0]
 80169b2:	b29b      	uxth	r3, r3
 80169b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80169b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80169bc:	b29a      	uxth	r2, r3
 80169be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80169c2:	801a      	strh	r2, [r3, #0]
 80169c4:	e055      	b.n	8016a72 <USB_EPStartXfer+0x1040>
 80169c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80169ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	691b      	ldr	r3, [r3, #16]
 80169d2:	085b      	lsrs	r3, r3, #1
 80169d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80169d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80169dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	691b      	ldr	r3, [r3, #16]
 80169e4:	f003 0301 	and.w	r3, r3, #1
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d004      	beq.n	80169f6 <USB_EPStartXfer+0xfc4>
 80169ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80169f0:	3301      	adds	r3, #1
 80169f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80169f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80169fa:	b29b      	uxth	r3, r3
 80169fc:	029b      	lsls	r3, r3, #10
 80169fe:	b29a      	uxth	r2, r3
 8016a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a04:	801a      	strh	r2, [r3, #0]
 8016a06:	e034      	b.n	8016a72 <USB_EPStartXfer+0x1040>
 8016a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	785b      	ldrb	r3, [r3, #1]
 8016a14:	2b01      	cmp	r3, #1
 8016a16:	d12c      	bne.n	8016a72 <USB_EPStartXfer+0x1040>
 8016a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	461a      	mov	r2, r3
 8016a38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a3c:	4413      	add	r3, r2
 8016a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	00da      	lsls	r2, r3, #3
 8016a50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a54:	4413      	add	r3, r2
 8016a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8016a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	691b      	ldr	r3, [r3, #16]
 8016a6a:	b29a      	uxth	r2, r3
 8016a6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016a70:	801a      	strh	r2, [r3, #0]
 8016a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8016a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	785b      	ldrb	r3, [r3, #1]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f040 8091 	bne.w	8016bb4 <USB_EPStartXfer+0x1182>
 8016a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	461a      	mov	r2, r3
 8016ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016ab6:	4413      	add	r3, r2
 8016ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	00da      	lsls	r2, r3, #3
 8016aca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016ace:	4413      	add	r3, r2
 8016ad0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8016ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	691b      	ldr	r3, [r3, #16]
 8016ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8016ae6:	d925      	bls.n	8016b34 <USB_EPStartXfer+0x1102>
 8016ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	691b      	ldr	r3, [r3, #16]
 8016af4:	095b      	lsrs	r3, r3, #5
 8016af6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8016afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	691b      	ldr	r3, [r3, #16]
 8016b06:	f003 031f 	and.w	r3, r3, #31
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d104      	bne.n	8016b18 <USB_EPStartXfer+0x10e6>
 8016b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016b12:	3b01      	subs	r3, #1
 8016b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8016b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016b1c:	b29b      	uxth	r3, r3
 8016b1e:	029b      	lsls	r3, r3, #10
 8016b20:	b29b      	uxth	r3, r3
 8016b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016b2a:	b29a      	uxth	r2, r3
 8016b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016b30:	801a      	strh	r2, [r3, #0]
 8016b32:	e06d      	b.n	8016c10 <USB_EPStartXfer+0x11de>
 8016b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	691b      	ldr	r3, [r3, #16]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d116      	bne.n	8016b72 <USB_EPStartXfer+0x1140>
 8016b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016b48:	881b      	ldrh	r3, [r3, #0]
 8016b4a:	b29b      	uxth	r3, r3
 8016b4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8016b50:	b29a      	uxth	r2, r3
 8016b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016b56:	801a      	strh	r2, [r3, #0]
 8016b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016b5c:	881b      	ldrh	r3, [r3, #0]
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016b68:	b29a      	uxth	r2, r3
 8016b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016b6e:	801a      	strh	r2, [r3, #0]
 8016b70:	e04e      	b.n	8016c10 <USB_EPStartXfer+0x11de>
 8016b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	691b      	ldr	r3, [r3, #16]
 8016b7e:	085b      	lsrs	r3, r3, #1
 8016b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8016b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	691b      	ldr	r3, [r3, #16]
 8016b90:	f003 0301 	and.w	r3, r3, #1
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d004      	beq.n	8016ba2 <USB_EPStartXfer+0x1170>
 8016b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016b9c:	3301      	adds	r3, #1
 8016b9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8016ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	029b      	lsls	r3, r3, #10
 8016baa:	b29a      	uxth	r2, r3
 8016bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016bb0:	801a      	strh	r2, [r3, #0]
 8016bb2:	e02d      	b.n	8016c10 <USB_EPStartXfer+0x11de>
 8016bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	785b      	ldrb	r3, [r3, #1]
 8016bc0:	2b01      	cmp	r3, #1
 8016bc2:	d125      	bne.n	8016c10 <USB_EPStartXfer+0x11de>
 8016bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016bd2:	b29b      	uxth	r3, r3
 8016bd4:	461a      	mov	r2, r3
 8016bd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016bda:	4413      	add	r3, r2
 8016bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8016be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	781b      	ldrb	r3, [r3, #0]
 8016bec:	00da      	lsls	r2, r3, #3
 8016bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016bf2:	4413      	add	r3, r2
 8016bf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8016bf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8016bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	691b      	ldr	r3, [r3, #16]
 8016c08:	b29a      	uxth	r2, r3
 8016c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016c0e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8016c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	69db      	ldr	r3, [r3, #28]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f000 81fe 	beq.w	801701e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8016c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016c2a:	681a      	ldr	r2, [r3, #0]
 8016c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	781b      	ldrb	r3, [r3, #0]
 8016c38:	009b      	lsls	r3, r3, #2
 8016c3a:	4413      	add	r3, r2
 8016c3c:	881b      	ldrh	r3, [r3, #0]
 8016c3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8016c42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8016c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d005      	beq.n	8016c5a <USB_EPStartXfer+0x1228>
 8016c4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8016c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d10d      	bne.n	8016c76 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016c5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8016c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	f040 81db 	bne.w	801701e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016c68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8016c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	f040 81d4 	bne.w	801701e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8016c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	781b      	ldrb	r3, [r3, #0]
 8016c8c:	009b      	lsls	r3, r3, #2
 8016c8e:	4413      	add	r3, r2
 8016c90:	881b      	ldrh	r3, [r3, #0]
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016c9c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8016ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016ca4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016ca8:	681a      	ldr	r2, [r3, #0]
 8016caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	781b      	ldrb	r3, [r3, #0]
 8016cb6:	009b      	lsls	r3, r3, #2
 8016cb8:	441a      	add	r2, r3
 8016cba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8016cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8016cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8016cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8016cce:	b29b      	uxth	r3, r3
 8016cd0:	8013      	strh	r3, [r2, #0]
 8016cd2:	e1a4      	b.n	801701e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8016cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	78db      	ldrb	r3, [r3, #3]
 8016ce0:	2b01      	cmp	r3, #1
 8016ce2:	f040 819a 	bne.w	801701a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8016ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	699a      	ldr	r2, [r3, #24]
 8016cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	691b      	ldr	r3, [r3, #16]
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d917      	bls.n	8016d32 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8016d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	691b      	ldr	r3, [r3, #16]
 8016d0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8016d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	699a      	ldr	r2, [r3, #24]
 8016d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016d22:	1ad2      	subs	r2, r2, r3
 8016d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	619a      	str	r2, [r3, #24]
 8016d30:	e00e      	b.n	8016d50 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8016d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	699b      	ldr	r3, [r3, #24]
 8016d3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8016d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	2200      	movs	r2, #0
 8016d4e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8016d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	785b      	ldrb	r3, [r3, #1]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d178      	bne.n	8016e52 <USB_EPStartXfer+0x1420>
 8016d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8016d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016d7c:	b29b      	uxth	r3, r3
 8016d7e:	461a      	mov	r2, r3
 8016d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d84:	4413      	add	r3, r2
 8016d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8016d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	781b      	ldrb	r3, [r3, #0]
 8016d96:	00da      	lsls	r2, r3, #3
 8016d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d9c:	4413      	add	r3, r2
 8016d9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8016da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016daa:	2b3e      	cmp	r3, #62	; 0x3e
 8016dac:	d91d      	bls.n	8016dea <USB_EPStartXfer+0x13b8>
 8016dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016db2:	095b      	lsrs	r3, r3, #5
 8016db4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016dbc:	f003 031f 	and.w	r3, r3, #31
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d104      	bne.n	8016dce <USB_EPStartXfer+0x139c>
 8016dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016dc8:	3b01      	subs	r3, #1
 8016dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	029b      	lsls	r3, r3, #10
 8016dd6:	b29b      	uxth	r3, r3
 8016dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016de0:	b29a      	uxth	r2, r3
 8016de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016de6:	801a      	strh	r2, [r3, #0]
 8016de8:	e064      	b.n	8016eb4 <USB_EPStartXfer+0x1482>
 8016dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d116      	bne.n	8016e20 <USB_EPStartXfer+0x13ee>
 8016df2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016df6:	881b      	ldrh	r3, [r3, #0]
 8016df8:	b29b      	uxth	r3, r3
 8016dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8016dfe:	b29a      	uxth	r2, r3
 8016e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016e04:	801a      	strh	r2, [r3, #0]
 8016e06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016e0a:	881b      	ldrh	r3, [r3, #0]
 8016e0c:	b29b      	uxth	r3, r3
 8016e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016e16:	b29a      	uxth	r2, r3
 8016e18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016e1c:	801a      	strh	r2, [r3, #0]
 8016e1e:	e049      	b.n	8016eb4 <USB_EPStartXfer+0x1482>
 8016e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016e24:	085b      	lsrs	r3, r3, #1
 8016e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016e2e:	f003 0301 	and.w	r3, r3, #1
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d004      	beq.n	8016e40 <USB_EPStartXfer+0x140e>
 8016e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016e44:	b29b      	uxth	r3, r3
 8016e46:	029b      	lsls	r3, r3, #10
 8016e48:	b29a      	uxth	r2, r3
 8016e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016e4e:	801a      	strh	r2, [r3, #0]
 8016e50:	e030      	b.n	8016eb4 <USB_EPStartXfer+0x1482>
 8016e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	785b      	ldrb	r3, [r3, #1]
 8016e5e:	2b01      	cmp	r3, #1
 8016e60:	d128      	bne.n	8016eb4 <USB_EPStartXfer+0x1482>
 8016e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016e66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8016e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016e74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016e7e:	b29b      	uxth	r3, r3
 8016e80:	461a      	mov	r2, r3
 8016e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016e86:	4413      	add	r3, r2
 8016e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8016e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	781b      	ldrb	r3, [r3, #0]
 8016e98:	00da      	lsls	r2, r3, #3
 8016e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016e9e:	4413      	add	r3, r2
 8016ea0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8016ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016eac:	b29a      	uxth	r2, r3
 8016eae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016eb2:	801a      	strh	r2, [r3, #0]
 8016eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	785b      	ldrb	r3, [r3, #1]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d178      	bne.n	8016fc4 <USB_EPStartXfer+0x1592>
 8016ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8016ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016eee:	b29b      	uxth	r3, r3
 8016ef0:	461a      	mov	r2, r3
 8016ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016ef6:	4413      	add	r3, r2
 8016ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8016efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	00da      	lsls	r2, r3, #3
 8016f0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016f0e:	4413      	add	r3, r2
 8016f10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8016f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016f1c:	2b3e      	cmp	r3, #62	; 0x3e
 8016f1e:	d91d      	bls.n	8016f5c <USB_EPStartXfer+0x152a>
 8016f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016f24:	095b      	lsrs	r3, r3, #5
 8016f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016f2e:	f003 031f 	and.w	r3, r3, #31
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d104      	bne.n	8016f40 <USB_EPStartXfer+0x150e>
 8016f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016f3a:	3b01      	subs	r3, #1
 8016f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	029b      	lsls	r3, r3, #10
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016f52:	b29a      	uxth	r2, r3
 8016f54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016f58:	801a      	strh	r2, [r3, #0]
 8016f5a:	e060      	b.n	801701e <USB_EPStartXfer+0x15ec>
 8016f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d116      	bne.n	8016f92 <USB_EPStartXfer+0x1560>
 8016f64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016f68:	881b      	ldrh	r3, [r3, #0]
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8016f70:	b29a      	uxth	r2, r3
 8016f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016f76:	801a      	strh	r2, [r3, #0]
 8016f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016f7c:	881b      	ldrh	r3, [r3, #0]
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016f88:	b29a      	uxth	r2, r3
 8016f8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016f8e:	801a      	strh	r2, [r3, #0]
 8016f90:	e045      	b.n	801701e <USB_EPStartXfer+0x15ec>
 8016f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016f96:	085b      	lsrs	r3, r3, #1
 8016f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016fa0:	f003 0301 	and.w	r3, r3, #1
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d004      	beq.n	8016fb2 <USB_EPStartXfer+0x1580>
 8016fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016fac:	3301      	adds	r3, #1
 8016fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016fb6:	b29b      	uxth	r3, r3
 8016fb8:	029b      	lsls	r3, r3, #10
 8016fba:	b29a      	uxth	r2, r3
 8016fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016fc0:	801a      	strh	r2, [r3, #0]
 8016fc2:	e02c      	b.n	801701e <USB_EPStartXfer+0x15ec>
 8016fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	785b      	ldrb	r3, [r3, #1]
 8016fd0:	2b01      	cmp	r3, #1
 8016fd2:	d124      	bne.n	801701e <USB_EPStartXfer+0x15ec>
 8016fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016fd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016fe2:	b29b      	uxth	r3, r3
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016fea:	4413      	add	r3, r2
 8016fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	00da      	lsls	r2, r3, #3
 8016ffe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017002:	4413      	add	r3, r2
 8017004:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8017008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017010:	b29a      	uxth	r2, r3
 8017012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017016:	801a      	strh	r2, [r3, #0]
 8017018:	e001      	b.n	801701e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 801701a:	2301      	movs	r3, #1
 801701c:	e03a      	b.n	8017094 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801701e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017022:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017026:	681a      	ldr	r2, [r3, #0]
 8017028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801702c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	781b      	ldrb	r3, [r3, #0]
 8017034:	009b      	lsls	r3, r3, #2
 8017036:	4413      	add	r3, r2
 8017038:	881b      	ldrh	r3, [r3, #0]
 801703a:	b29b      	uxth	r3, r3
 801703c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017044:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8017048:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801704c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8017050:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8017054:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8017058:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801705c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8017060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017068:	681a      	ldr	r2, [r3, #0]
 801706a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801706e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	009b      	lsls	r3, r3, #2
 8017078:	441a      	add	r2, r3
 801707a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801707e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801708a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801708e:	b29b      	uxth	r3, r3
 8017090:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8017092:	2300      	movs	r3, #0
}
 8017094:	4618      	mov	r0, r3
 8017096:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}

0801709e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801709e:	b480      	push	{r7}
 80170a0:	b085      	sub	sp, #20
 80170a2:	af00      	add	r7, sp, #0
 80170a4:	6078      	str	r0, [r7, #4]
 80170a6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	785b      	ldrb	r3, [r3, #1]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d020      	beq.n	80170f2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80170b0:	687a      	ldr	r2, [r7, #4]
 80170b2:	683b      	ldr	r3, [r7, #0]
 80170b4:	781b      	ldrb	r3, [r3, #0]
 80170b6:	009b      	lsls	r3, r3, #2
 80170b8:	4413      	add	r3, r2
 80170ba:	881b      	ldrh	r3, [r3, #0]
 80170bc:	b29b      	uxth	r3, r3
 80170be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80170c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80170c6:	81bb      	strh	r3, [r7, #12]
 80170c8:	89bb      	ldrh	r3, [r7, #12]
 80170ca:	f083 0310 	eor.w	r3, r3, #16
 80170ce:	81bb      	strh	r3, [r7, #12]
 80170d0:	687a      	ldr	r2, [r7, #4]
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	009b      	lsls	r3, r3, #2
 80170d8:	441a      	add	r2, r3
 80170da:	89bb      	ldrh	r3, [r7, #12]
 80170dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80170e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80170e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80170e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170ec:	b29b      	uxth	r3, r3
 80170ee:	8013      	strh	r3, [r2, #0]
 80170f0:	e01f      	b.n	8017132 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80170f2:	687a      	ldr	r2, [r7, #4]
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	009b      	lsls	r3, r3, #2
 80170fa:	4413      	add	r3, r2
 80170fc:	881b      	ldrh	r3, [r3, #0]
 80170fe:	b29b      	uxth	r3, r3
 8017100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017108:	81fb      	strh	r3, [r7, #14]
 801710a:	89fb      	ldrh	r3, [r7, #14]
 801710c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8017110:	81fb      	strh	r3, [r7, #14]
 8017112:	687a      	ldr	r2, [r7, #4]
 8017114:	683b      	ldr	r3, [r7, #0]
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	009b      	lsls	r3, r3, #2
 801711a:	441a      	add	r2, r3
 801711c:	89fb      	ldrh	r3, [r7, #14]
 801711e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801712a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801712e:	b29b      	uxth	r3, r3
 8017130:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8017132:	2300      	movs	r3, #0
}
 8017134:	4618      	mov	r0, r3
 8017136:	3714      	adds	r7, #20
 8017138:	46bd      	mov	sp, r7
 801713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713e:	4770      	bx	lr

08017140 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017140:	b480      	push	{r7}
 8017142:	b087      	sub	sp, #28
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
 8017148:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801714a:	683b      	ldr	r3, [r7, #0]
 801714c:	7b1b      	ldrb	r3, [r3, #12]
 801714e:	2b00      	cmp	r3, #0
 8017150:	f040 809d 	bne.w	801728e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	785b      	ldrb	r3, [r3, #1]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d04c      	beq.n	80171f6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801715c:	687a      	ldr	r2, [r7, #4]
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	009b      	lsls	r3, r3, #2
 8017164:	4413      	add	r3, r2
 8017166:	881b      	ldrh	r3, [r3, #0]
 8017168:	823b      	strh	r3, [r7, #16]
 801716a:	8a3b      	ldrh	r3, [r7, #16]
 801716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017170:	2b00      	cmp	r3, #0
 8017172:	d01b      	beq.n	80171ac <USB_EPClearStall+0x6c>
 8017174:	687a      	ldr	r2, [r7, #4]
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	781b      	ldrb	r3, [r3, #0]
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	4413      	add	r3, r2
 801717e:	881b      	ldrh	r3, [r3, #0]
 8017180:	b29b      	uxth	r3, r3
 8017182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801718a:	81fb      	strh	r3, [r7, #14]
 801718c:	687a      	ldr	r2, [r7, #4]
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	009b      	lsls	r3, r3, #2
 8017194:	441a      	add	r2, r3
 8017196:	89fb      	ldrh	r3, [r7, #14]
 8017198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801719c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80171a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80171a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80171a8:	b29b      	uxth	r3, r3
 80171aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	78db      	ldrb	r3, [r3, #3]
 80171b0:	2b01      	cmp	r3, #1
 80171b2:	d06c      	beq.n	801728e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80171b4:	687a      	ldr	r2, [r7, #4]
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	781b      	ldrb	r3, [r3, #0]
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	4413      	add	r3, r2
 80171be:	881b      	ldrh	r3, [r3, #0]
 80171c0:	b29b      	uxth	r3, r3
 80171c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80171c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80171ca:	81bb      	strh	r3, [r7, #12]
 80171cc:	89bb      	ldrh	r3, [r7, #12]
 80171ce:	f083 0320 	eor.w	r3, r3, #32
 80171d2:	81bb      	strh	r3, [r7, #12]
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	009b      	lsls	r3, r3, #2
 80171dc:	441a      	add	r2, r3
 80171de:	89bb      	ldrh	r3, [r7, #12]
 80171e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80171e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80171e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80171ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171f0:	b29b      	uxth	r3, r3
 80171f2:	8013      	strh	r3, [r2, #0]
 80171f4:	e04b      	b.n	801728e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80171f6:	687a      	ldr	r2, [r7, #4]
 80171f8:	683b      	ldr	r3, [r7, #0]
 80171fa:	781b      	ldrb	r3, [r3, #0]
 80171fc:	009b      	lsls	r3, r3, #2
 80171fe:	4413      	add	r3, r2
 8017200:	881b      	ldrh	r3, [r3, #0]
 8017202:	82fb      	strh	r3, [r7, #22]
 8017204:	8afb      	ldrh	r3, [r7, #22]
 8017206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801720a:	2b00      	cmp	r3, #0
 801720c:	d01b      	beq.n	8017246 <USB_EPClearStall+0x106>
 801720e:	687a      	ldr	r2, [r7, #4]
 8017210:	683b      	ldr	r3, [r7, #0]
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	009b      	lsls	r3, r3, #2
 8017216:	4413      	add	r3, r2
 8017218:	881b      	ldrh	r3, [r3, #0]
 801721a:	b29b      	uxth	r3, r3
 801721c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017224:	82bb      	strh	r3, [r7, #20]
 8017226:	687a      	ldr	r2, [r7, #4]
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	009b      	lsls	r3, r3, #2
 801722e:	441a      	add	r2, r3
 8017230:	8abb      	ldrh	r3, [r7, #20]
 8017232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801723a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017242:	b29b      	uxth	r3, r3
 8017244:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8017246:	687a      	ldr	r2, [r7, #4]
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	009b      	lsls	r3, r3, #2
 801724e:	4413      	add	r3, r2
 8017250:	881b      	ldrh	r3, [r3, #0]
 8017252:	b29b      	uxth	r3, r3
 8017254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801725c:	827b      	strh	r3, [r7, #18]
 801725e:	8a7b      	ldrh	r3, [r7, #18]
 8017260:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8017264:	827b      	strh	r3, [r7, #18]
 8017266:	8a7b      	ldrh	r3, [r7, #18]
 8017268:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801726c:	827b      	strh	r3, [r7, #18]
 801726e:	687a      	ldr	r2, [r7, #4]
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	781b      	ldrb	r3, [r3, #0]
 8017274:	009b      	lsls	r3, r3, #2
 8017276:	441a      	add	r2, r3
 8017278:	8a7b      	ldrh	r3, [r7, #18]
 801727a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801727e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801728a:	b29b      	uxth	r3, r3
 801728c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801728e:	2300      	movs	r3, #0
}
 8017290:	4618      	mov	r0, r3
 8017292:	371c      	adds	r7, #28
 8017294:	46bd      	mov	sp, r7
 8017296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729a:	4770      	bx	lr

0801729c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801729c:	b480      	push	{r7}
 801729e:	b083      	sub	sp, #12
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	6078      	str	r0, [r7, #4]
 80172a4:	460b      	mov	r3, r1
 80172a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80172a8:	78fb      	ldrb	r3, [r7, #3]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d103      	bne.n	80172b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	2280      	movs	r2, #128	; 0x80
 80172b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80172b6:	2300      	movs	r3, #0
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	370c      	adds	r7, #12
 80172bc:	46bd      	mov	sp, r7
 80172be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c2:	4770      	bx	lr

080172c4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80172c4:	b480      	push	{r7}
 80172c6:	b083      	sub	sp, #12
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80172d2:	b29b      	uxth	r3, r3
 80172d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80172d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80172dc:	b29a      	uxth	r2, r3
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80172e4:	2300      	movs	r3, #0
}
 80172e6:	4618      	mov	r0, r3
 80172e8:	370c      	adds	r7, #12
 80172ea:	46bd      	mov	sp, r7
 80172ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f0:	4770      	bx	lr

080172f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80172f2:	b480      	push	{r7}
 80172f4:	b083      	sub	sp, #12
 80172f6:	af00      	add	r7, sp, #0
 80172f8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8017300:	b29b      	uxth	r3, r3
 8017302:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017306:	b29a      	uxth	r2, r3
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801730e:	2300      	movs	r3, #0
}
 8017310:	4618      	mov	r0, r3
 8017312:	370c      	adds	r7, #12
 8017314:	46bd      	mov	sp, r7
 8017316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731a:	4770      	bx	lr

0801731c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801731c:	b480      	push	{r7}
 801731e:	b085      	sub	sp, #20
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801732a:	b29b      	uxth	r3, r3
 801732c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801732e:	68fb      	ldr	r3, [r7, #12]
}
 8017330:	4618      	mov	r0, r3
 8017332:	3714      	adds	r7, #20
 8017334:	46bd      	mov	sp, r7
 8017336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801733a:	4770      	bx	lr

0801733c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 801733c:	b480      	push	{r7}
 801733e:	b083      	sub	sp, #12
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
 8017344:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8017346:	2300      	movs	r3, #0
}
 8017348:	4618      	mov	r0, r3
 801734a:	370c      	adds	r7, #12
 801734c:	46bd      	mov	sp, r7
 801734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017352:	4770      	bx	lr

08017354 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8017354:	b480      	push	{r7}
 8017356:	b08b      	sub	sp, #44	; 0x2c
 8017358:	af00      	add	r7, sp, #0
 801735a:	60f8      	str	r0, [r7, #12]
 801735c:	60b9      	str	r1, [r7, #8]
 801735e:	4611      	mov	r1, r2
 8017360:	461a      	mov	r2, r3
 8017362:	460b      	mov	r3, r1
 8017364:	80fb      	strh	r3, [r7, #6]
 8017366:	4613      	mov	r3, r2
 8017368:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801736a:	88bb      	ldrh	r3, [r7, #4]
 801736c:	3301      	adds	r3, #1
 801736e:	085b      	lsrs	r3, r3, #1
 8017370:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801737a:	88fa      	ldrh	r2, [r7, #6]
 801737c:	697b      	ldr	r3, [r7, #20]
 801737e:	4413      	add	r3, r2
 8017380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017384:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8017386:	69bb      	ldr	r3, [r7, #24]
 8017388:	627b      	str	r3, [r7, #36]	; 0x24
 801738a:	e01b      	b.n	80173c4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 801738c:	69fb      	ldr	r3, [r7, #28]
 801738e:	781b      	ldrb	r3, [r3, #0]
 8017390:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8017392:	69fb      	ldr	r3, [r7, #28]
 8017394:	3301      	adds	r3, #1
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	021b      	lsls	r3, r3, #8
 801739a:	b21a      	sxth	r2, r3
 801739c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80173a0:	4313      	orrs	r3, r2
 80173a2:	b21b      	sxth	r3, r3
 80173a4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80173a6:	6a3b      	ldr	r3, [r7, #32]
 80173a8:	8a7a      	ldrh	r2, [r7, #18]
 80173aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80173ac:	6a3b      	ldr	r3, [r7, #32]
 80173ae:	3302      	adds	r3, #2
 80173b0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80173b2:	69fb      	ldr	r3, [r7, #28]
 80173b4:	3301      	adds	r3, #1
 80173b6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80173b8:	69fb      	ldr	r3, [r7, #28]
 80173ba:	3301      	adds	r3, #1
 80173bc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80173be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c0:	3b01      	subs	r3, #1
 80173c2:	627b      	str	r3, [r7, #36]	; 0x24
 80173c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d1e0      	bne.n	801738c <USB_WritePMA+0x38>
  }
}
 80173ca:	bf00      	nop
 80173cc:	bf00      	nop
 80173ce:	372c      	adds	r7, #44	; 0x2c
 80173d0:	46bd      	mov	sp, r7
 80173d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d6:	4770      	bx	lr

080173d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80173d8:	b480      	push	{r7}
 80173da:	b08b      	sub	sp, #44	; 0x2c
 80173dc:	af00      	add	r7, sp, #0
 80173de:	60f8      	str	r0, [r7, #12]
 80173e0:	60b9      	str	r1, [r7, #8]
 80173e2:	4611      	mov	r1, r2
 80173e4:	461a      	mov	r2, r3
 80173e6:	460b      	mov	r3, r1
 80173e8:	80fb      	strh	r3, [r7, #6]
 80173ea:	4613      	mov	r3, r2
 80173ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80173ee:	88bb      	ldrh	r3, [r7, #4]
 80173f0:	085b      	lsrs	r3, r3, #1
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80173fe:	88fa      	ldrh	r2, [r7, #6]
 8017400:	697b      	ldr	r3, [r7, #20]
 8017402:	4413      	add	r3, r2
 8017404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017408:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801740a:	69bb      	ldr	r3, [r7, #24]
 801740c:	627b      	str	r3, [r7, #36]	; 0x24
 801740e:	e018      	b.n	8017442 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8017410:	6a3b      	ldr	r3, [r7, #32]
 8017412:	881b      	ldrh	r3, [r3, #0]
 8017414:	b29b      	uxth	r3, r3
 8017416:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8017418:	6a3b      	ldr	r3, [r7, #32]
 801741a:	3302      	adds	r3, #2
 801741c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801741e:	693b      	ldr	r3, [r7, #16]
 8017420:	b2da      	uxtb	r2, r3
 8017422:	69fb      	ldr	r3, [r7, #28]
 8017424:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8017426:	69fb      	ldr	r3, [r7, #28]
 8017428:	3301      	adds	r3, #1
 801742a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801742c:	693b      	ldr	r3, [r7, #16]
 801742e:	0a1b      	lsrs	r3, r3, #8
 8017430:	b2da      	uxtb	r2, r3
 8017432:	69fb      	ldr	r3, [r7, #28]
 8017434:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8017436:	69fb      	ldr	r3, [r7, #28]
 8017438:	3301      	adds	r3, #1
 801743a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801743e:	3b01      	subs	r3, #1
 8017440:	627b      	str	r3, [r7, #36]	; 0x24
 8017442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017444:	2b00      	cmp	r3, #0
 8017446:	d1e3      	bne.n	8017410 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8017448:	88bb      	ldrh	r3, [r7, #4]
 801744a:	f003 0301 	and.w	r3, r3, #1
 801744e:	b29b      	uxth	r3, r3
 8017450:	2b00      	cmp	r3, #0
 8017452:	d007      	beq.n	8017464 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8017454:	6a3b      	ldr	r3, [r7, #32]
 8017456:	881b      	ldrh	r3, [r3, #0]
 8017458:	b29b      	uxth	r3, r3
 801745a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801745c:	693b      	ldr	r3, [r7, #16]
 801745e:	b2da      	uxtb	r2, r3
 8017460:	69fb      	ldr	r3, [r7, #28]
 8017462:	701a      	strb	r2, [r3, #0]
  }
}
 8017464:	bf00      	nop
 8017466:	372c      	adds	r7, #44	; 0x2c
 8017468:	46bd      	mov	sp, r7
 801746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746e:	4770      	bx	lr

08017470 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b084      	sub	sp, #16
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
 8017478:	460b      	mov	r3, r1
 801747a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801747c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8017480:	f002 f976 	bl	8019770 <USBD_static_malloc>
 8017484:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d105      	bne.n	8017498 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	2200      	movs	r2, #0
 8017490:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8017494:	2302      	movs	r3, #2
 8017496:	e066      	b.n	8017566 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	68fa      	ldr	r2, [r7, #12]
 801749c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	7c1b      	ldrb	r3, [r3, #16]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d119      	bne.n	80174dc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80174a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80174ac:	2202      	movs	r2, #2
 80174ae:	2181      	movs	r1, #129	; 0x81
 80174b0:	6878      	ldr	r0, [r7, #4]
 80174b2:	f001 ff5f 	bl	8019374 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	2201      	movs	r2, #1
 80174ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80174bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80174c0:	2202      	movs	r2, #2
 80174c2:	2101      	movs	r1, #1
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f001 ff55 	bl	8019374 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	2201      	movs	r2, #1
 80174ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	2210      	movs	r2, #16
 80174d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80174da:	e016      	b.n	801750a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80174dc:	2340      	movs	r3, #64	; 0x40
 80174de:	2202      	movs	r2, #2
 80174e0:	2181      	movs	r1, #129	; 0x81
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f001 ff46 	bl	8019374 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2201      	movs	r2, #1
 80174ec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80174ee:	2340      	movs	r3, #64	; 0x40
 80174f0:	2202      	movs	r2, #2
 80174f2:	2101      	movs	r1, #1
 80174f4:	6878      	ldr	r0, [r7, #4]
 80174f6:	f001 ff3d 	bl	8019374 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	2201      	movs	r2, #1
 80174fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	2210      	movs	r2, #16
 8017506:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801750a:	2308      	movs	r3, #8
 801750c:	2203      	movs	r2, #3
 801750e:	2182      	movs	r1, #130	; 0x82
 8017510:	6878      	ldr	r0, [r7, #4]
 8017512:	f001 ff2f 	bl	8019374 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	2201      	movs	r2, #1
 801751a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	2200      	movs	r2, #0
 801752c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	2200      	movs	r2, #0
 8017534:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	7c1b      	ldrb	r3, [r3, #16]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d109      	bne.n	8017554 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017546:	f44f 7300 	mov.w	r3, #512	; 0x200
 801754a:	2101      	movs	r1, #1
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	f002 f88d 	bl	801966c <USBD_LL_PrepareReceive>
 8017552:	e007      	b.n	8017564 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801755a:	2340      	movs	r3, #64	; 0x40
 801755c:	2101      	movs	r1, #1
 801755e:	6878      	ldr	r0, [r7, #4]
 8017560:	f002 f884 	bl	801966c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017564:	2300      	movs	r3, #0
}
 8017566:	4618      	mov	r0, r3
 8017568:	3710      	adds	r7, #16
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}

0801756e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801756e:	b580      	push	{r7, lr}
 8017570:	b082      	sub	sp, #8
 8017572:	af00      	add	r7, sp, #0
 8017574:	6078      	str	r0, [r7, #4]
 8017576:	460b      	mov	r3, r1
 8017578:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801757a:	2181      	movs	r1, #129	; 0x81
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	f001 ff37 	bl	80193f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	2200      	movs	r2, #0
 8017586:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8017588:	2101      	movs	r1, #1
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f001 ff30 	bl	80193f0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	2200      	movs	r2, #0
 8017594:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8017598:	2182      	movs	r1, #130	; 0x82
 801759a:	6878      	ldr	r0, [r7, #4]
 801759c:	f001 ff28 	bl	80193f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	2200      	movs	r2, #0
 80175a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	2200      	movs	r2, #0
 80175ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d00e      	beq.n	80175d8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80175c0:	685b      	ldr	r3, [r3, #4]
 80175c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80175ca:	4618      	mov	r0, r3
 80175cc:	f002 f8de 	bl	801978c <USBD_static_free>
    pdev->pClassData = NULL;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	2200      	movs	r2, #0
 80175d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80175d8:	2300      	movs	r3, #0
}
 80175da:	4618      	mov	r0, r3
 80175dc:	3708      	adds	r7, #8
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}
	...

080175e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b086      	sub	sp, #24
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
 80175ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80175f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80175f6:	2300      	movs	r3, #0
 80175f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80175fa:	2300      	movs	r3, #0
 80175fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80175fe:	2300      	movs	r3, #0
 8017600:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8017602:	693b      	ldr	r3, [r7, #16]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d101      	bne.n	801760c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8017608:	2303      	movs	r3, #3
 801760a:	e0af      	b.n	801776c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017614:	2b00      	cmp	r3, #0
 8017616:	d03f      	beq.n	8017698 <USBD_CDC_Setup+0xb4>
 8017618:	2b20      	cmp	r3, #32
 801761a:	f040 809f 	bne.w	801775c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801761e:	683b      	ldr	r3, [r7, #0]
 8017620:	88db      	ldrh	r3, [r3, #6]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d02e      	beq.n	8017684 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8017626:	683b      	ldr	r3, [r7, #0]
 8017628:	781b      	ldrb	r3, [r3, #0]
 801762a:	b25b      	sxtb	r3, r3
 801762c:	2b00      	cmp	r3, #0
 801762e:	da16      	bge.n	801765e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017636:	689b      	ldr	r3, [r3, #8]
 8017638:	683a      	ldr	r2, [r7, #0]
 801763a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801763c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801763e:	683a      	ldr	r2, [r7, #0]
 8017640:	88d2      	ldrh	r2, [r2, #6]
 8017642:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8017644:	683b      	ldr	r3, [r7, #0]
 8017646:	88db      	ldrh	r3, [r3, #6]
 8017648:	2b07      	cmp	r3, #7
 801764a:	bf28      	it	cs
 801764c:	2307      	movcs	r3, #7
 801764e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8017650:	693b      	ldr	r3, [r7, #16]
 8017652:	89fa      	ldrh	r2, [r7, #14]
 8017654:	4619      	mov	r1, r3
 8017656:	6878      	ldr	r0, [r7, #4]
 8017658:	f001 fa9f 	bl	8018b9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801765c:	e085      	b.n	801776a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801765e:	683b      	ldr	r3, [r7, #0]
 8017660:	785a      	ldrb	r2, [r3, #1]
 8017662:	693b      	ldr	r3, [r7, #16]
 8017664:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	88db      	ldrh	r3, [r3, #6]
 801766c:	b2da      	uxtb	r2, r3
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8017674:	6939      	ldr	r1, [r7, #16]
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	88db      	ldrh	r3, [r3, #6]
 801767a:	461a      	mov	r2, r3
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	f001 fab8 	bl	8018bf2 <USBD_CtlPrepareRx>
      break;
 8017682:	e072      	b.n	801776a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801768a:	689b      	ldr	r3, [r3, #8]
 801768c:	683a      	ldr	r2, [r7, #0]
 801768e:	7850      	ldrb	r0, [r2, #1]
 8017690:	2200      	movs	r2, #0
 8017692:	6839      	ldr	r1, [r7, #0]
 8017694:	4798      	blx	r3
      break;
 8017696:	e068      	b.n	801776a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017698:	683b      	ldr	r3, [r7, #0]
 801769a:	785b      	ldrb	r3, [r3, #1]
 801769c:	2b0b      	cmp	r3, #11
 801769e:	d852      	bhi.n	8017746 <USBD_CDC_Setup+0x162>
 80176a0:	a201      	add	r2, pc, #4	; (adr r2, 80176a8 <USBD_CDC_Setup+0xc4>)
 80176a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176a6:	bf00      	nop
 80176a8:	080176d9 	.word	0x080176d9
 80176ac:	08017755 	.word	0x08017755
 80176b0:	08017747 	.word	0x08017747
 80176b4:	08017747 	.word	0x08017747
 80176b8:	08017747 	.word	0x08017747
 80176bc:	08017747 	.word	0x08017747
 80176c0:	08017747 	.word	0x08017747
 80176c4:	08017747 	.word	0x08017747
 80176c8:	08017747 	.word	0x08017747
 80176cc:	08017747 	.word	0x08017747
 80176d0:	08017703 	.word	0x08017703
 80176d4:	0801772d 	.word	0x0801772d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80176de:	b2db      	uxtb	r3, r3
 80176e0:	2b03      	cmp	r3, #3
 80176e2:	d107      	bne.n	80176f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80176e4:	f107 030a 	add.w	r3, r7, #10
 80176e8:	2202      	movs	r2, #2
 80176ea:	4619      	mov	r1, r3
 80176ec:	6878      	ldr	r0, [r7, #4]
 80176ee:	f001 fa54 	bl	8018b9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80176f2:	e032      	b.n	801775a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80176f4:	6839      	ldr	r1, [r7, #0]
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f001 f9de 	bl	8018ab8 <USBD_CtlError>
            ret = USBD_FAIL;
 80176fc:	2303      	movs	r3, #3
 80176fe:	75fb      	strb	r3, [r7, #23]
          break;
 8017700:	e02b      	b.n	801775a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017708:	b2db      	uxtb	r3, r3
 801770a:	2b03      	cmp	r3, #3
 801770c:	d107      	bne.n	801771e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801770e:	f107 030d 	add.w	r3, r7, #13
 8017712:	2201      	movs	r2, #1
 8017714:	4619      	mov	r1, r3
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f001 fa3f 	bl	8018b9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801771c:	e01d      	b.n	801775a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801771e:	6839      	ldr	r1, [r7, #0]
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f001 f9c9 	bl	8018ab8 <USBD_CtlError>
            ret = USBD_FAIL;
 8017726:	2303      	movs	r3, #3
 8017728:	75fb      	strb	r3, [r7, #23]
          break;
 801772a:	e016      	b.n	801775a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017732:	b2db      	uxtb	r3, r3
 8017734:	2b03      	cmp	r3, #3
 8017736:	d00f      	beq.n	8017758 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8017738:	6839      	ldr	r1, [r7, #0]
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f001 f9bc 	bl	8018ab8 <USBD_CtlError>
            ret = USBD_FAIL;
 8017740:	2303      	movs	r3, #3
 8017742:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8017744:	e008      	b.n	8017758 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8017746:	6839      	ldr	r1, [r7, #0]
 8017748:	6878      	ldr	r0, [r7, #4]
 801774a:	f001 f9b5 	bl	8018ab8 <USBD_CtlError>
          ret = USBD_FAIL;
 801774e:	2303      	movs	r3, #3
 8017750:	75fb      	strb	r3, [r7, #23]
          break;
 8017752:	e002      	b.n	801775a <USBD_CDC_Setup+0x176>
          break;
 8017754:	bf00      	nop
 8017756:	e008      	b.n	801776a <USBD_CDC_Setup+0x186>
          break;
 8017758:	bf00      	nop
      }
      break;
 801775a:	e006      	b.n	801776a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801775c:	6839      	ldr	r1, [r7, #0]
 801775e:	6878      	ldr	r0, [r7, #4]
 8017760:	f001 f9aa 	bl	8018ab8 <USBD_CtlError>
      ret = USBD_FAIL;
 8017764:	2303      	movs	r3, #3
 8017766:	75fb      	strb	r3, [r7, #23]
      break;
 8017768:	bf00      	nop
  }

  return (uint8_t)ret;
 801776a:	7dfb      	ldrb	r3, [r7, #23]
}
 801776c:	4618      	mov	r0, r3
 801776e:	3718      	adds	r7, #24
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}

08017774 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b084      	sub	sp, #16
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
 801777c:	460b      	mov	r3, r1
 801777e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017786:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801778e:	2b00      	cmp	r3, #0
 8017790:	d101      	bne.n	8017796 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017792:	2303      	movs	r3, #3
 8017794:	e04f      	b.n	8017836 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801779c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801779e:	78fa      	ldrb	r2, [r7, #3]
 80177a0:	6879      	ldr	r1, [r7, #4]
 80177a2:	4613      	mov	r3, r2
 80177a4:	009b      	lsls	r3, r3, #2
 80177a6:	4413      	add	r3, r2
 80177a8:	009b      	lsls	r3, r3, #2
 80177aa:	440b      	add	r3, r1
 80177ac:	3318      	adds	r3, #24
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d029      	beq.n	8017808 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80177b4:	78fa      	ldrb	r2, [r7, #3]
 80177b6:	6879      	ldr	r1, [r7, #4]
 80177b8:	4613      	mov	r3, r2
 80177ba:	009b      	lsls	r3, r3, #2
 80177bc:	4413      	add	r3, r2
 80177be:	009b      	lsls	r3, r3, #2
 80177c0:	440b      	add	r3, r1
 80177c2:	3318      	adds	r3, #24
 80177c4:	681a      	ldr	r2, [r3, #0]
 80177c6:	78f9      	ldrb	r1, [r7, #3]
 80177c8:	68f8      	ldr	r0, [r7, #12]
 80177ca:	460b      	mov	r3, r1
 80177cc:	009b      	lsls	r3, r3, #2
 80177ce:	440b      	add	r3, r1
 80177d0:	00db      	lsls	r3, r3, #3
 80177d2:	4403      	add	r3, r0
 80177d4:	333c      	adds	r3, #60	; 0x3c
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80177dc:	fb01 f303 	mul.w	r3, r1, r3
 80177e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d110      	bne.n	8017808 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80177e6:	78fa      	ldrb	r2, [r7, #3]
 80177e8:	6879      	ldr	r1, [r7, #4]
 80177ea:	4613      	mov	r3, r2
 80177ec:	009b      	lsls	r3, r3, #2
 80177ee:	4413      	add	r3, r2
 80177f0:	009b      	lsls	r3, r3, #2
 80177f2:	440b      	add	r3, r1
 80177f4:	3318      	adds	r3, #24
 80177f6:	2200      	movs	r2, #0
 80177f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80177fa:	78f9      	ldrb	r1, [r7, #3]
 80177fc:	2300      	movs	r3, #0
 80177fe:	2200      	movs	r2, #0
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	f001 fefb 	bl	80195fc <USBD_LL_Transmit>
 8017806:	e015      	b.n	8017834 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8017808:	68bb      	ldr	r3, [r7, #8]
 801780a:	2200      	movs	r2, #0
 801780c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017816:	691b      	ldr	r3, [r3, #16]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d00b      	beq.n	8017834 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017822:	691b      	ldr	r3, [r3, #16]
 8017824:	68ba      	ldr	r2, [r7, #8]
 8017826:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801782a:	68ba      	ldr	r2, [r7, #8]
 801782c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8017830:	78fa      	ldrb	r2, [r7, #3]
 8017832:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8017834:	2300      	movs	r3, #0
}
 8017836:	4618      	mov	r0, r3
 8017838:	3710      	adds	r7, #16
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}

0801783e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801783e:	b580      	push	{r7, lr}
 8017840:	b084      	sub	sp, #16
 8017842:	af00      	add	r7, sp, #0
 8017844:	6078      	str	r0, [r7, #4]
 8017846:	460b      	mov	r3, r1
 8017848:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017850:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017858:	2b00      	cmp	r3, #0
 801785a:	d101      	bne.n	8017860 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801785c:	2303      	movs	r3, #3
 801785e:	e015      	b.n	801788c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017860:	78fb      	ldrb	r3, [r7, #3]
 8017862:	4619      	mov	r1, r3
 8017864:	6878      	ldr	r0, [r7, #4]
 8017866:	f001 ff39 	bl	80196dc <USBD_LL_GetRxDataSize>
 801786a:	4602      	mov	r2, r0
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017878:	68db      	ldr	r3, [r3, #12]
 801787a:	68fa      	ldr	r2, [r7, #12]
 801787c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8017880:	68fa      	ldr	r2, [r7, #12]
 8017882:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8017886:	4611      	mov	r1, r2
 8017888:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801788a:	2300      	movs	r3, #0
}
 801788c:	4618      	mov	r0, r3
 801788e:	3710      	adds	r7, #16
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}

08017894 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b084      	sub	sp, #16
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80178a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d101      	bne.n	80178ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80178aa:	2303      	movs	r3, #3
 80178ac:	e01b      	b.n	80178e6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d015      	beq.n	80178e4 <USBD_CDC_EP0_RxReady+0x50>
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80178be:	2bff      	cmp	r3, #255	; 0xff
 80178c0:	d010      	beq.n	80178e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80178c8:	689b      	ldr	r3, [r3, #8]
 80178ca:	68fa      	ldr	r2, [r7, #12]
 80178cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80178d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80178d2:	68fa      	ldr	r2, [r7, #12]
 80178d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80178d8:	b292      	uxth	r2, r2
 80178da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	22ff      	movs	r2, #255	; 0xff
 80178e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80178e4:	2300      	movs	r3, #0
}
 80178e6:	4618      	mov	r0, r3
 80178e8:	3710      	adds	r7, #16
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}
	...

080178f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80178f0:	b480      	push	{r7}
 80178f2:	b083      	sub	sp, #12
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2243      	movs	r2, #67	; 0x43
 80178fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80178fe:	4b03      	ldr	r3, [pc, #12]	; (801790c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8017900:	4618      	mov	r0, r3
 8017902:	370c      	adds	r7, #12
 8017904:	46bd      	mov	sp, r7
 8017906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790a:	4770      	bx	lr
 801790c:	20000094 	.word	0x20000094

08017910 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	2243      	movs	r2, #67	; 0x43
 801791c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801791e:	4b03      	ldr	r3, [pc, #12]	; (801792c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8017920:	4618      	mov	r0, r3
 8017922:	370c      	adds	r7, #12
 8017924:	46bd      	mov	sp, r7
 8017926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792a:	4770      	bx	lr
 801792c:	20000050 	.word	0x20000050

08017930 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017930:	b480      	push	{r7}
 8017932:	b083      	sub	sp, #12
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2243      	movs	r2, #67	; 0x43
 801793c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801793e:	4b03      	ldr	r3, [pc, #12]	; (801794c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8017940:	4618      	mov	r0, r3
 8017942:	370c      	adds	r7, #12
 8017944:	46bd      	mov	sp, r7
 8017946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794a:	4770      	bx	lr
 801794c:	200000d8 	.word	0x200000d8

08017950 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8017950:	b480      	push	{r7}
 8017952:	b083      	sub	sp, #12
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	220a      	movs	r2, #10
 801795c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801795e:	4b03      	ldr	r3, [pc, #12]	; (801796c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8017960:	4618      	mov	r0, r3
 8017962:	370c      	adds	r7, #12
 8017964:	46bd      	mov	sp, r7
 8017966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796a:	4770      	bx	lr
 801796c:	2000000c 	.word	0x2000000c

08017970 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8017970:	b480      	push	{r7}
 8017972:	b083      	sub	sp, #12
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
 8017978:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801797a:	683b      	ldr	r3, [r7, #0]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d101      	bne.n	8017984 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8017980:	2303      	movs	r3, #3
 8017982:	e004      	b.n	801798e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	683a      	ldr	r2, [r7, #0]
 8017988:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801798c:	2300      	movs	r3, #0
}
 801798e:	4618      	mov	r0, r3
 8017990:	370c      	adds	r7, #12
 8017992:	46bd      	mov	sp, r7
 8017994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017998:	4770      	bx	lr

0801799a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801799a:	b480      	push	{r7}
 801799c:	b087      	sub	sp, #28
 801799e:	af00      	add	r7, sp, #0
 80179a0:	60f8      	str	r0, [r7, #12]
 80179a2:	60b9      	str	r1, [r7, #8]
 80179a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80179ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d101      	bne.n	80179b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80179b4:	2303      	movs	r3, #3
 80179b6:	e008      	b.n	80179ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80179b8:	697b      	ldr	r3, [r7, #20]
 80179ba:	68ba      	ldr	r2, [r7, #8]
 80179bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80179c0:	697b      	ldr	r3, [r7, #20]
 80179c2:	687a      	ldr	r2, [r7, #4]
 80179c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80179c8:	2300      	movs	r3, #0
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	371c      	adds	r7, #28
 80179ce:	46bd      	mov	sp, r7
 80179d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d4:	4770      	bx	lr

080179d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80179d6:	b480      	push	{r7}
 80179d8:	b085      	sub	sp, #20
 80179da:	af00      	add	r7, sp, #0
 80179dc:	6078      	str	r0, [r7, #4]
 80179de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80179e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d101      	bne.n	80179f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80179ee:	2303      	movs	r3, #3
 80179f0:	e004      	b.n	80179fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	683a      	ldr	r2, [r7, #0]
 80179f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80179fa:	2300      	movs	r3, #0
}
 80179fc:	4618      	mov	r0, r3
 80179fe:	3714      	adds	r7, #20
 8017a00:	46bd      	mov	sp, r7
 8017a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a06:	4770      	bx	lr

08017a08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017a16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d101      	bne.n	8017a26 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8017a22:	2303      	movs	r3, #3
 8017a24:	e016      	b.n	8017a54 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	7c1b      	ldrb	r3, [r3, #16]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d109      	bne.n	8017a42 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017a38:	2101      	movs	r1, #1
 8017a3a:	6878      	ldr	r0, [r7, #4]
 8017a3c:	f001 fe16 	bl	801966c <USBD_LL_PrepareReceive>
 8017a40:	e007      	b.n	8017a52 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017a48:	2340      	movs	r3, #64	; 0x40
 8017a4a:	2101      	movs	r1, #1
 8017a4c:	6878      	ldr	r0, [r7, #4]
 8017a4e:	f001 fe0d 	bl	801966c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017a52:	2300      	movs	r3, #0
}
 8017a54:	4618      	mov	r0, r3
 8017a56:	3710      	adds	r7, #16
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}

08017a5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b086      	sub	sp, #24
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	60f8      	str	r0, [r7, #12]
 8017a64:	60b9      	str	r1, [r7, #8]
 8017a66:	4613      	mov	r3, r2
 8017a68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d101      	bne.n	8017a74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8017a70:	2303      	movs	r3, #3
 8017a72:	e01f      	b.n	8017ab4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	2200      	movs	r2, #0
 8017a78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	2200      	movs	r2, #0
 8017a80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	2200      	movs	r2, #0
 8017a88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017a8c:	68bb      	ldr	r3, [r7, #8]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d003      	beq.n	8017a9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	68ba      	ldr	r2, [r7, #8]
 8017a96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	2201      	movs	r2, #1
 8017a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	79fa      	ldrb	r2, [r7, #7]
 8017aa6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017aa8:	68f8      	ldr	r0, [r7, #12]
 8017aaa:	f001 fbcf 	bl	801924c <USBD_LL_Init>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	3718      	adds	r7, #24
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	bd80      	pop	{r7, pc}

08017abc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b084      	sub	sp, #16
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017aca:	683b      	ldr	r3, [r7, #0]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d101      	bne.n	8017ad4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8017ad0:	2303      	movs	r3, #3
 8017ad2:	e016      	b.n	8017b02 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	683a      	ldr	r2, [r7, #0]
 8017ad8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d00b      	beq.n	8017b00 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017af0:	f107 020e 	add.w	r2, r7, #14
 8017af4:	4610      	mov	r0, r2
 8017af6:	4798      	blx	r3
 8017af8:	4602      	mov	r2, r0
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8017b00:	2300      	movs	r3, #0
}
 8017b02:	4618      	mov	r0, r3
 8017b04:	3710      	adds	r7, #16
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}

08017b0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017b0a:	b580      	push	{r7, lr}
 8017b0c:	b082      	sub	sp, #8
 8017b0e:	af00      	add	r7, sp, #0
 8017b10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017b12:	6878      	ldr	r0, [r7, #4]
 8017b14:	f001 fbfc 	bl	8019310 <USBD_LL_Start>
 8017b18:	4603      	mov	r3, r0
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	3708      	adds	r7, #8
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}

08017b22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8017b22:	b480      	push	{r7}
 8017b24:	b083      	sub	sp, #12
 8017b26:	af00      	add	r7, sp, #0
 8017b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017b2a:	2300      	movs	r3, #0
}
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	370c      	adds	r7, #12
 8017b30:	46bd      	mov	sp, r7
 8017b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b36:	4770      	bx	lr

08017b38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b084      	sub	sp, #16
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
 8017b40:	460b      	mov	r3, r1
 8017b42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8017b44:	2303      	movs	r3, #3
 8017b46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d009      	beq.n	8017b66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	78fa      	ldrb	r2, [r7, #3]
 8017b5c:	4611      	mov	r1, r2
 8017b5e:	6878      	ldr	r0, [r7, #4]
 8017b60:	4798      	blx	r3
 8017b62:	4603      	mov	r3, r0
 8017b64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8017b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b68:	4618      	mov	r0, r3
 8017b6a:	3710      	adds	r7, #16
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}

08017b70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
 8017b78:	460b      	mov	r3, r1
 8017b7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d007      	beq.n	8017b96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b8c:	685b      	ldr	r3, [r3, #4]
 8017b8e:	78fa      	ldrb	r2, [r7, #3]
 8017b90:	4611      	mov	r1, r2
 8017b92:	6878      	ldr	r0, [r7, #4]
 8017b94:	4798      	blx	r3
  }

  return USBD_OK;
 8017b96:	2300      	movs	r3, #0
}
 8017b98:	4618      	mov	r0, r3
 8017b9a:	3708      	adds	r7, #8
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}

08017ba0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
 8017ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017bb0:	6839      	ldr	r1, [r7, #0]
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f000 ff46 	bl	8018a44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	2201      	movs	r2, #1
 8017bbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8017bc6:	461a      	mov	r2, r3
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017bd4:	f003 031f 	and.w	r3, r3, #31
 8017bd8:	2b02      	cmp	r3, #2
 8017bda:	d01a      	beq.n	8017c12 <USBD_LL_SetupStage+0x72>
 8017bdc:	2b02      	cmp	r3, #2
 8017bde:	d822      	bhi.n	8017c26 <USBD_LL_SetupStage+0x86>
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d002      	beq.n	8017bea <USBD_LL_SetupStage+0x4a>
 8017be4:	2b01      	cmp	r3, #1
 8017be6:	d00a      	beq.n	8017bfe <USBD_LL_SetupStage+0x5e>
 8017be8:	e01d      	b.n	8017c26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	6878      	ldr	r0, [r7, #4]
 8017bf4:	f000 f9ee 	bl	8017fd4 <USBD_StdDevReq>
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8017bfc:	e020      	b.n	8017c40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017c04:	4619      	mov	r1, r3
 8017c06:	6878      	ldr	r0, [r7, #4]
 8017c08:	f000 fa52 	bl	80180b0 <USBD_StdItfReq>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8017c10:	e016      	b.n	8017c40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017c18:	4619      	mov	r1, r3
 8017c1a:	6878      	ldr	r0, [r7, #4]
 8017c1c:	f000 fa91 	bl	8018142 <USBD_StdEPReq>
 8017c20:	4603      	mov	r3, r0
 8017c22:	73fb      	strb	r3, [r7, #15]
      break;
 8017c24:	e00c      	b.n	8017c40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017c2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017c30:	b2db      	uxtb	r3, r3
 8017c32:	4619      	mov	r1, r3
 8017c34:	6878      	ldr	r0, [r7, #4]
 8017c36:	f001 fc11 	bl	801945c <USBD_LL_StallEP>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8017c3e:	bf00      	nop
  }

  return ret;
 8017c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c42:	4618      	mov	r0, r3
 8017c44:	3710      	adds	r7, #16
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd80      	pop	{r7, pc}

08017c4a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017c4a:	b580      	push	{r7, lr}
 8017c4c:	b086      	sub	sp, #24
 8017c4e:	af00      	add	r7, sp, #0
 8017c50:	60f8      	str	r0, [r7, #12]
 8017c52:	460b      	mov	r3, r1
 8017c54:	607a      	str	r2, [r7, #4]
 8017c56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017c58:	7afb      	ldrb	r3, [r7, #11]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d138      	bne.n	8017cd0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017c64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017c6c:	2b03      	cmp	r3, #3
 8017c6e:	d14a      	bne.n	8017d06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8017c70:	693b      	ldr	r3, [r7, #16]
 8017c72:	689a      	ldr	r2, [r3, #8]
 8017c74:	693b      	ldr	r3, [r7, #16]
 8017c76:	68db      	ldr	r3, [r3, #12]
 8017c78:	429a      	cmp	r2, r3
 8017c7a:	d913      	bls.n	8017ca4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017c7c:	693b      	ldr	r3, [r7, #16]
 8017c7e:	689a      	ldr	r2, [r3, #8]
 8017c80:	693b      	ldr	r3, [r7, #16]
 8017c82:	68db      	ldr	r3, [r3, #12]
 8017c84:	1ad2      	subs	r2, r2, r3
 8017c86:	693b      	ldr	r3, [r7, #16]
 8017c88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017c8a:	693b      	ldr	r3, [r7, #16]
 8017c8c:	68da      	ldr	r2, [r3, #12]
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	689b      	ldr	r3, [r3, #8]
 8017c92:	4293      	cmp	r3, r2
 8017c94:	bf28      	it	cs
 8017c96:	4613      	movcs	r3, r2
 8017c98:	461a      	mov	r2, r3
 8017c9a:	6879      	ldr	r1, [r7, #4]
 8017c9c:	68f8      	ldr	r0, [r7, #12]
 8017c9e:	f000 ffc5 	bl	8018c2c <USBD_CtlContinueRx>
 8017ca2:	e030      	b.n	8017d06 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017caa:	b2db      	uxtb	r3, r3
 8017cac:	2b03      	cmp	r3, #3
 8017cae:	d10b      	bne.n	8017cc8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017cb6:	691b      	ldr	r3, [r3, #16]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d005      	beq.n	8017cc8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017cc2:	691b      	ldr	r3, [r3, #16]
 8017cc4:	68f8      	ldr	r0, [r7, #12]
 8017cc6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017cc8:	68f8      	ldr	r0, [r7, #12]
 8017cca:	f000 ffc0 	bl	8018c4e <USBD_CtlSendStatus>
 8017cce:	e01a      	b.n	8017d06 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017cd6:	b2db      	uxtb	r3, r3
 8017cd8:	2b03      	cmp	r3, #3
 8017cda:	d114      	bne.n	8017d06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ce2:	699b      	ldr	r3, [r3, #24]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d00e      	beq.n	8017d06 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017cee:	699b      	ldr	r3, [r3, #24]
 8017cf0:	7afa      	ldrb	r2, [r7, #11]
 8017cf2:	4611      	mov	r1, r2
 8017cf4:	68f8      	ldr	r0, [r7, #12]
 8017cf6:	4798      	blx	r3
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8017cfc:	7dfb      	ldrb	r3, [r7, #23]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d001      	beq.n	8017d06 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8017d02:	7dfb      	ldrb	r3, [r7, #23]
 8017d04:	e000      	b.n	8017d08 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8017d06:	2300      	movs	r3, #0
}
 8017d08:	4618      	mov	r0, r3
 8017d0a:	3718      	adds	r7, #24
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd80      	pop	{r7, pc}

08017d10 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b086      	sub	sp, #24
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	60f8      	str	r0, [r7, #12]
 8017d18:	460b      	mov	r3, r1
 8017d1a:	607a      	str	r2, [r7, #4]
 8017d1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017d1e:	7afb      	ldrb	r3, [r7, #11]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d16b      	bne.n	8017dfc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	3314      	adds	r3, #20
 8017d28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017d30:	2b02      	cmp	r3, #2
 8017d32:	d156      	bne.n	8017de2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8017d34:	693b      	ldr	r3, [r7, #16]
 8017d36:	689a      	ldr	r2, [r3, #8]
 8017d38:	693b      	ldr	r3, [r7, #16]
 8017d3a:	68db      	ldr	r3, [r3, #12]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d914      	bls.n	8017d6a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017d40:	693b      	ldr	r3, [r7, #16]
 8017d42:	689a      	ldr	r2, [r3, #8]
 8017d44:	693b      	ldr	r3, [r7, #16]
 8017d46:	68db      	ldr	r3, [r3, #12]
 8017d48:	1ad2      	subs	r2, r2, r3
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	689b      	ldr	r3, [r3, #8]
 8017d52:	461a      	mov	r2, r3
 8017d54:	6879      	ldr	r1, [r7, #4]
 8017d56:	68f8      	ldr	r0, [r7, #12]
 8017d58:	f000 ff3a 	bl	8018bd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	2200      	movs	r2, #0
 8017d60:	2100      	movs	r1, #0
 8017d62:	68f8      	ldr	r0, [r7, #12]
 8017d64:	f001 fc82 	bl	801966c <USBD_LL_PrepareReceive>
 8017d68:	e03b      	b.n	8017de2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017d6a:	693b      	ldr	r3, [r7, #16]
 8017d6c:	68da      	ldr	r2, [r3, #12]
 8017d6e:	693b      	ldr	r3, [r7, #16]
 8017d70:	689b      	ldr	r3, [r3, #8]
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d11c      	bne.n	8017db0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017d76:	693b      	ldr	r3, [r7, #16]
 8017d78:	685a      	ldr	r2, [r3, #4]
 8017d7a:	693b      	ldr	r3, [r7, #16]
 8017d7c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017d7e:	429a      	cmp	r2, r3
 8017d80:	d316      	bcc.n	8017db0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017d82:	693b      	ldr	r3, [r7, #16]
 8017d84:	685a      	ldr	r2, [r3, #4]
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017d8c:	429a      	cmp	r2, r3
 8017d8e:	d20f      	bcs.n	8017db0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017d90:	2200      	movs	r2, #0
 8017d92:	2100      	movs	r1, #0
 8017d94:	68f8      	ldr	r0, [r7, #12]
 8017d96:	f000 ff1b 	bl	8018bd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017da2:	2300      	movs	r3, #0
 8017da4:	2200      	movs	r2, #0
 8017da6:	2100      	movs	r1, #0
 8017da8:	68f8      	ldr	r0, [r7, #12]
 8017daa:	f001 fc5f 	bl	801966c <USBD_LL_PrepareReceive>
 8017dae:	e018      	b.n	8017de2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017db6:	b2db      	uxtb	r3, r3
 8017db8:	2b03      	cmp	r3, #3
 8017dba:	d10b      	bne.n	8017dd4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017dc2:	68db      	ldr	r3, [r3, #12]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d005      	beq.n	8017dd4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017dce:	68db      	ldr	r3, [r3, #12]
 8017dd0:	68f8      	ldr	r0, [r7, #12]
 8017dd2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017dd4:	2180      	movs	r1, #128	; 0x80
 8017dd6:	68f8      	ldr	r0, [r7, #12]
 8017dd8:	f001 fb40 	bl	801945c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017ddc:	68f8      	ldr	r0, [r7, #12]
 8017dde:	f000 ff49 	bl	8018c74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8017de8:	2b01      	cmp	r3, #1
 8017dea:	d122      	bne.n	8017e32 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8017dec:	68f8      	ldr	r0, [r7, #12]
 8017dee:	f7ff fe98 	bl	8017b22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	2200      	movs	r2, #0
 8017df6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8017dfa:	e01a      	b.n	8017e32 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	2b03      	cmp	r3, #3
 8017e06:	d114      	bne.n	8017e32 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e0e:	695b      	ldr	r3, [r3, #20]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d00e      	beq.n	8017e32 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e1a:	695b      	ldr	r3, [r3, #20]
 8017e1c:	7afa      	ldrb	r2, [r7, #11]
 8017e1e:	4611      	mov	r1, r2
 8017e20:	68f8      	ldr	r0, [r7, #12]
 8017e22:	4798      	blx	r3
 8017e24:	4603      	mov	r3, r0
 8017e26:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8017e28:	7dfb      	ldrb	r3, [r7, #23]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d001      	beq.n	8017e32 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8017e2e:	7dfb      	ldrb	r3, [r7, #23]
 8017e30:	e000      	b.n	8017e34 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8017e32:	2300      	movs	r3, #0
}
 8017e34:	4618      	mov	r0, r3
 8017e36:	3718      	adds	r7, #24
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	bd80      	pop	{r7, pc}

08017e3c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b082      	sub	sp, #8
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	2201      	movs	r2, #1
 8017e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	2200      	movs	r2, #0
 8017e50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	2200      	movs	r2, #0
 8017e58:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d101      	bne.n	8017e70 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8017e6c:	2303      	movs	r3, #3
 8017e6e:	e02f      	b.n	8017ed0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d00f      	beq.n	8017e9a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e80:	685b      	ldr	r3, [r3, #4]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d009      	beq.n	8017e9a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e8c:	685b      	ldr	r3, [r3, #4]
 8017e8e:	687a      	ldr	r2, [r7, #4]
 8017e90:	6852      	ldr	r2, [r2, #4]
 8017e92:	b2d2      	uxtb	r2, r2
 8017e94:	4611      	mov	r1, r2
 8017e96:	6878      	ldr	r0, [r7, #4]
 8017e98:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017e9a:	2340      	movs	r3, #64	; 0x40
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	2100      	movs	r1, #0
 8017ea0:	6878      	ldr	r0, [r7, #4]
 8017ea2:	f001 fa67 	bl	8019374 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	2201      	movs	r2, #1
 8017eaa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2240      	movs	r2, #64	; 0x40
 8017eb2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017eb6:	2340      	movs	r3, #64	; 0x40
 8017eb8:	2200      	movs	r2, #0
 8017eba:	2180      	movs	r1, #128	; 0x80
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f001 fa59 	bl	8019374 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2201      	movs	r2, #1
 8017ec6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	2240      	movs	r2, #64	; 0x40
 8017ecc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8017ece:	2300      	movs	r3, #0
}
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	3708      	adds	r7, #8
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}

08017ed8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8017ed8:	b480      	push	{r7}
 8017eda:	b083      	sub	sp, #12
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
 8017ee0:	460b      	mov	r3, r1
 8017ee2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	78fa      	ldrb	r2, [r7, #3]
 8017ee8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017eea:	2300      	movs	r3, #0
}
 8017eec:	4618      	mov	r0, r3
 8017eee:	370c      	adds	r7, #12
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef6:	4770      	bx	lr

08017ef8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8017ef8:	b480      	push	{r7}
 8017efa:	b083      	sub	sp, #12
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017f06:	b2da      	uxtb	r2, r3
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	2204      	movs	r2, #4
 8017f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8017f16:	2300      	movs	r3, #0
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	370c      	adds	r7, #12
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f22:	4770      	bx	lr

08017f24 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017f24:	b480      	push	{r7}
 8017f26:	b083      	sub	sp, #12
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017f32:	b2db      	uxtb	r3, r3
 8017f34:	2b04      	cmp	r3, #4
 8017f36:	d106      	bne.n	8017f46 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8017f3e:	b2da      	uxtb	r2, r3
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8017f46:	2300      	movs	r3, #0
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	370c      	adds	r7, #12
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f52:	4770      	bx	lr

08017f54 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b082      	sub	sp, #8
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d101      	bne.n	8017f6a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8017f66:	2303      	movs	r3, #3
 8017f68:	e012      	b.n	8017f90 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017f70:	b2db      	uxtb	r3, r3
 8017f72:	2b03      	cmp	r3, #3
 8017f74:	d10b      	bne.n	8017f8e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017f7c:	69db      	ldr	r3, [r3, #28]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d005      	beq.n	8017f8e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017f88:	69db      	ldr	r3, [r3, #28]
 8017f8a:	6878      	ldr	r0, [r7, #4]
 8017f8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017f8e:	2300      	movs	r3, #0
}
 8017f90:	4618      	mov	r0, r3
 8017f92:	3708      	adds	r7, #8
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}

08017f98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017f98:	b480      	push	{r7}
 8017f9a:	b087      	sub	sp, #28
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017fa4:	697b      	ldr	r3, [r7, #20]
 8017fa6:	781b      	ldrb	r3, [r3, #0]
 8017fa8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017faa:	697b      	ldr	r3, [r7, #20]
 8017fac:	3301      	adds	r3, #1
 8017fae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017fb0:	697b      	ldr	r3, [r7, #20]
 8017fb2:	781b      	ldrb	r3, [r3, #0]
 8017fb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017fb6:	8a3b      	ldrh	r3, [r7, #16]
 8017fb8:	021b      	lsls	r3, r3, #8
 8017fba:	b21a      	sxth	r2, r3
 8017fbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017fc0:	4313      	orrs	r3, r2
 8017fc2:	b21b      	sxth	r3, r3
 8017fc4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017fc6:	89fb      	ldrh	r3, [r7, #14]
}
 8017fc8:	4618      	mov	r0, r3
 8017fca:	371c      	adds	r7, #28
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd2:	4770      	bx	lr

08017fd4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b084      	sub	sp, #16
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
 8017fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017fde:	2300      	movs	r3, #0
 8017fe0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017fe2:	683b      	ldr	r3, [r7, #0]
 8017fe4:	781b      	ldrb	r3, [r3, #0]
 8017fe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017fea:	2b40      	cmp	r3, #64	; 0x40
 8017fec:	d005      	beq.n	8017ffa <USBD_StdDevReq+0x26>
 8017fee:	2b40      	cmp	r3, #64	; 0x40
 8017ff0:	d853      	bhi.n	801809a <USBD_StdDevReq+0xc6>
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d00b      	beq.n	801800e <USBD_StdDevReq+0x3a>
 8017ff6:	2b20      	cmp	r3, #32
 8017ff8:	d14f      	bne.n	801809a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018000:	689b      	ldr	r3, [r3, #8]
 8018002:	6839      	ldr	r1, [r7, #0]
 8018004:	6878      	ldr	r0, [r7, #4]
 8018006:	4798      	blx	r3
 8018008:	4603      	mov	r3, r0
 801800a:	73fb      	strb	r3, [r7, #15]
      break;
 801800c:	e04a      	b.n	80180a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	785b      	ldrb	r3, [r3, #1]
 8018012:	2b09      	cmp	r3, #9
 8018014:	d83b      	bhi.n	801808e <USBD_StdDevReq+0xba>
 8018016:	a201      	add	r2, pc, #4	; (adr r2, 801801c <USBD_StdDevReq+0x48>)
 8018018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801801c:	08018071 	.word	0x08018071
 8018020:	08018085 	.word	0x08018085
 8018024:	0801808f 	.word	0x0801808f
 8018028:	0801807b 	.word	0x0801807b
 801802c:	0801808f 	.word	0x0801808f
 8018030:	0801804f 	.word	0x0801804f
 8018034:	08018045 	.word	0x08018045
 8018038:	0801808f 	.word	0x0801808f
 801803c:	08018067 	.word	0x08018067
 8018040:	08018059 	.word	0x08018059
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018044:	6839      	ldr	r1, [r7, #0]
 8018046:	6878      	ldr	r0, [r7, #4]
 8018048:	f000 f9de 	bl	8018408 <USBD_GetDescriptor>
          break;
 801804c:	e024      	b.n	8018098 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801804e:	6839      	ldr	r1, [r7, #0]
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f000 fb6d 	bl	8018730 <USBD_SetAddress>
          break;
 8018056:	e01f      	b.n	8018098 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018058:	6839      	ldr	r1, [r7, #0]
 801805a:	6878      	ldr	r0, [r7, #4]
 801805c:	f000 fbac 	bl	80187b8 <USBD_SetConfig>
 8018060:	4603      	mov	r3, r0
 8018062:	73fb      	strb	r3, [r7, #15]
          break;
 8018064:	e018      	b.n	8018098 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018066:	6839      	ldr	r1, [r7, #0]
 8018068:	6878      	ldr	r0, [r7, #4]
 801806a:	f000 fc4b 	bl	8018904 <USBD_GetConfig>
          break;
 801806e:	e013      	b.n	8018098 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018070:	6839      	ldr	r1, [r7, #0]
 8018072:	6878      	ldr	r0, [r7, #4]
 8018074:	f000 fc7c 	bl	8018970 <USBD_GetStatus>
          break;
 8018078:	e00e      	b.n	8018098 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801807a:	6839      	ldr	r1, [r7, #0]
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f000 fcab 	bl	80189d8 <USBD_SetFeature>
          break;
 8018082:	e009      	b.n	8018098 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018084:	6839      	ldr	r1, [r7, #0]
 8018086:	6878      	ldr	r0, [r7, #4]
 8018088:	f000 fcba 	bl	8018a00 <USBD_ClrFeature>
          break;
 801808c:	e004      	b.n	8018098 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801808e:	6839      	ldr	r1, [r7, #0]
 8018090:	6878      	ldr	r0, [r7, #4]
 8018092:	f000 fd11 	bl	8018ab8 <USBD_CtlError>
          break;
 8018096:	bf00      	nop
      }
      break;
 8018098:	e004      	b.n	80180a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801809a:	6839      	ldr	r1, [r7, #0]
 801809c:	6878      	ldr	r0, [r7, #4]
 801809e:	f000 fd0b 	bl	8018ab8 <USBD_CtlError>
      break;
 80180a2:	bf00      	nop
  }

  return ret;
 80180a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80180a6:	4618      	mov	r0, r3
 80180a8:	3710      	adds	r7, #16
 80180aa:	46bd      	mov	sp, r7
 80180ac:	bd80      	pop	{r7, pc}
 80180ae:	bf00      	nop

080180b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b084      	sub	sp, #16
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
 80180b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80180ba:	2300      	movs	r3, #0
 80180bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80180be:	683b      	ldr	r3, [r7, #0]
 80180c0:	781b      	ldrb	r3, [r3, #0]
 80180c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80180c6:	2b40      	cmp	r3, #64	; 0x40
 80180c8:	d005      	beq.n	80180d6 <USBD_StdItfReq+0x26>
 80180ca:	2b40      	cmp	r3, #64	; 0x40
 80180cc:	d82f      	bhi.n	801812e <USBD_StdItfReq+0x7e>
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d001      	beq.n	80180d6 <USBD_StdItfReq+0x26>
 80180d2:	2b20      	cmp	r3, #32
 80180d4:	d12b      	bne.n	801812e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80180dc:	b2db      	uxtb	r3, r3
 80180de:	3b01      	subs	r3, #1
 80180e0:	2b02      	cmp	r3, #2
 80180e2:	d81d      	bhi.n	8018120 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	889b      	ldrh	r3, [r3, #4]
 80180e8:	b2db      	uxtb	r3, r3
 80180ea:	2b01      	cmp	r3, #1
 80180ec:	d813      	bhi.n	8018116 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80180f4:	689b      	ldr	r3, [r3, #8]
 80180f6:	6839      	ldr	r1, [r7, #0]
 80180f8:	6878      	ldr	r0, [r7, #4]
 80180fa:	4798      	blx	r3
 80180fc:	4603      	mov	r3, r0
 80180fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	88db      	ldrh	r3, [r3, #6]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d110      	bne.n	801812a <USBD_StdItfReq+0x7a>
 8018108:	7bfb      	ldrb	r3, [r7, #15]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d10d      	bne.n	801812a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801810e:	6878      	ldr	r0, [r7, #4]
 8018110:	f000 fd9d 	bl	8018c4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018114:	e009      	b.n	801812a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8018116:	6839      	ldr	r1, [r7, #0]
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	f000 fccd 	bl	8018ab8 <USBD_CtlError>
          break;
 801811e:	e004      	b.n	801812a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8018120:	6839      	ldr	r1, [r7, #0]
 8018122:	6878      	ldr	r0, [r7, #4]
 8018124:	f000 fcc8 	bl	8018ab8 <USBD_CtlError>
          break;
 8018128:	e000      	b.n	801812c <USBD_StdItfReq+0x7c>
          break;
 801812a:	bf00      	nop
      }
      break;
 801812c:	e004      	b.n	8018138 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801812e:	6839      	ldr	r1, [r7, #0]
 8018130:	6878      	ldr	r0, [r7, #4]
 8018132:	f000 fcc1 	bl	8018ab8 <USBD_CtlError>
      break;
 8018136:	bf00      	nop
  }

  return ret;
 8018138:	7bfb      	ldrb	r3, [r7, #15]
}
 801813a:	4618      	mov	r0, r3
 801813c:	3710      	adds	r7, #16
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}

08018142 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018142:	b580      	push	{r7, lr}
 8018144:	b084      	sub	sp, #16
 8018146:	af00      	add	r7, sp, #0
 8018148:	6078      	str	r0, [r7, #4]
 801814a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801814c:	2300      	movs	r3, #0
 801814e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8018150:	683b      	ldr	r3, [r7, #0]
 8018152:	889b      	ldrh	r3, [r3, #4]
 8018154:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018156:	683b      	ldr	r3, [r7, #0]
 8018158:	781b      	ldrb	r3, [r3, #0]
 801815a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801815e:	2b40      	cmp	r3, #64	; 0x40
 8018160:	d007      	beq.n	8018172 <USBD_StdEPReq+0x30>
 8018162:	2b40      	cmp	r3, #64	; 0x40
 8018164:	f200 8145 	bhi.w	80183f2 <USBD_StdEPReq+0x2b0>
 8018168:	2b00      	cmp	r3, #0
 801816a:	d00c      	beq.n	8018186 <USBD_StdEPReq+0x44>
 801816c:	2b20      	cmp	r3, #32
 801816e:	f040 8140 	bne.w	80183f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018178:	689b      	ldr	r3, [r3, #8]
 801817a:	6839      	ldr	r1, [r7, #0]
 801817c:	6878      	ldr	r0, [r7, #4]
 801817e:	4798      	blx	r3
 8018180:	4603      	mov	r3, r0
 8018182:	73fb      	strb	r3, [r7, #15]
      break;
 8018184:	e13a      	b.n	80183fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018186:	683b      	ldr	r3, [r7, #0]
 8018188:	785b      	ldrb	r3, [r3, #1]
 801818a:	2b03      	cmp	r3, #3
 801818c:	d007      	beq.n	801819e <USBD_StdEPReq+0x5c>
 801818e:	2b03      	cmp	r3, #3
 8018190:	f300 8129 	bgt.w	80183e6 <USBD_StdEPReq+0x2a4>
 8018194:	2b00      	cmp	r3, #0
 8018196:	d07f      	beq.n	8018298 <USBD_StdEPReq+0x156>
 8018198:	2b01      	cmp	r3, #1
 801819a:	d03c      	beq.n	8018216 <USBD_StdEPReq+0xd4>
 801819c:	e123      	b.n	80183e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80181a4:	b2db      	uxtb	r3, r3
 80181a6:	2b02      	cmp	r3, #2
 80181a8:	d002      	beq.n	80181b0 <USBD_StdEPReq+0x6e>
 80181aa:	2b03      	cmp	r3, #3
 80181ac:	d016      	beq.n	80181dc <USBD_StdEPReq+0x9a>
 80181ae:	e02c      	b.n	801820a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80181b0:	7bbb      	ldrb	r3, [r7, #14]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d00d      	beq.n	80181d2 <USBD_StdEPReq+0x90>
 80181b6:	7bbb      	ldrb	r3, [r7, #14]
 80181b8:	2b80      	cmp	r3, #128	; 0x80
 80181ba:	d00a      	beq.n	80181d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80181bc:	7bbb      	ldrb	r3, [r7, #14]
 80181be:	4619      	mov	r1, r3
 80181c0:	6878      	ldr	r0, [r7, #4]
 80181c2:	f001 f94b 	bl	801945c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80181c6:	2180      	movs	r1, #128	; 0x80
 80181c8:	6878      	ldr	r0, [r7, #4]
 80181ca:	f001 f947 	bl	801945c <USBD_LL_StallEP>
 80181ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80181d0:	e020      	b.n	8018214 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80181d2:	6839      	ldr	r1, [r7, #0]
 80181d4:	6878      	ldr	r0, [r7, #4]
 80181d6:	f000 fc6f 	bl	8018ab8 <USBD_CtlError>
              break;
 80181da:	e01b      	b.n	8018214 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80181dc:	683b      	ldr	r3, [r7, #0]
 80181de:	885b      	ldrh	r3, [r3, #2]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d10e      	bne.n	8018202 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80181e4:	7bbb      	ldrb	r3, [r7, #14]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d00b      	beq.n	8018202 <USBD_StdEPReq+0xc0>
 80181ea:	7bbb      	ldrb	r3, [r7, #14]
 80181ec:	2b80      	cmp	r3, #128	; 0x80
 80181ee:	d008      	beq.n	8018202 <USBD_StdEPReq+0xc0>
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	88db      	ldrh	r3, [r3, #6]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d104      	bne.n	8018202 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80181f8:	7bbb      	ldrb	r3, [r7, #14]
 80181fa:	4619      	mov	r1, r3
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	f001 f92d 	bl	801945c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8018202:	6878      	ldr	r0, [r7, #4]
 8018204:	f000 fd23 	bl	8018c4e <USBD_CtlSendStatus>

              break;
 8018208:	e004      	b.n	8018214 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801820a:	6839      	ldr	r1, [r7, #0]
 801820c:	6878      	ldr	r0, [r7, #4]
 801820e:	f000 fc53 	bl	8018ab8 <USBD_CtlError>
              break;
 8018212:	bf00      	nop
          }
          break;
 8018214:	e0ec      	b.n	80183f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801821c:	b2db      	uxtb	r3, r3
 801821e:	2b02      	cmp	r3, #2
 8018220:	d002      	beq.n	8018228 <USBD_StdEPReq+0xe6>
 8018222:	2b03      	cmp	r3, #3
 8018224:	d016      	beq.n	8018254 <USBD_StdEPReq+0x112>
 8018226:	e030      	b.n	801828a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018228:	7bbb      	ldrb	r3, [r7, #14]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d00d      	beq.n	801824a <USBD_StdEPReq+0x108>
 801822e:	7bbb      	ldrb	r3, [r7, #14]
 8018230:	2b80      	cmp	r3, #128	; 0x80
 8018232:	d00a      	beq.n	801824a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018234:	7bbb      	ldrb	r3, [r7, #14]
 8018236:	4619      	mov	r1, r3
 8018238:	6878      	ldr	r0, [r7, #4]
 801823a:	f001 f90f 	bl	801945c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801823e:	2180      	movs	r1, #128	; 0x80
 8018240:	6878      	ldr	r0, [r7, #4]
 8018242:	f001 f90b 	bl	801945c <USBD_LL_StallEP>
 8018246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018248:	e025      	b.n	8018296 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801824a:	6839      	ldr	r1, [r7, #0]
 801824c:	6878      	ldr	r0, [r7, #4]
 801824e:	f000 fc33 	bl	8018ab8 <USBD_CtlError>
              break;
 8018252:	e020      	b.n	8018296 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018254:	683b      	ldr	r3, [r7, #0]
 8018256:	885b      	ldrh	r3, [r3, #2]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d11b      	bne.n	8018294 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801825c:	7bbb      	ldrb	r3, [r7, #14]
 801825e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018262:	2b00      	cmp	r3, #0
 8018264:	d004      	beq.n	8018270 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018266:	7bbb      	ldrb	r3, [r7, #14]
 8018268:	4619      	mov	r1, r3
 801826a:	6878      	ldr	r0, [r7, #4]
 801826c:	f001 f92c 	bl	80194c8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018270:	6878      	ldr	r0, [r7, #4]
 8018272:	f000 fcec 	bl	8018c4e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801827c:	689b      	ldr	r3, [r3, #8]
 801827e:	6839      	ldr	r1, [r7, #0]
 8018280:	6878      	ldr	r0, [r7, #4]
 8018282:	4798      	blx	r3
 8018284:	4603      	mov	r3, r0
 8018286:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8018288:	e004      	b.n	8018294 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801828a:	6839      	ldr	r1, [r7, #0]
 801828c:	6878      	ldr	r0, [r7, #4]
 801828e:	f000 fc13 	bl	8018ab8 <USBD_CtlError>
              break;
 8018292:	e000      	b.n	8018296 <USBD_StdEPReq+0x154>
              break;
 8018294:	bf00      	nop
          }
          break;
 8018296:	e0ab      	b.n	80183f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801829e:	b2db      	uxtb	r3, r3
 80182a0:	2b02      	cmp	r3, #2
 80182a2:	d002      	beq.n	80182aa <USBD_StdEPReq+0x168>
 80182a4:	2b03      	cmp	r3, #3
 80182a6:	d032      	beq.n	801830e <USBD_StdEPReq+0x1cc>
 80182a8:	e097      	b.n	80183da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80182aa:	7bbb      	ldrb	r3, [r7, #14]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d007      	beq.n	80182c0 <USBD_StdEPReq+0x17e>
 80182b0:	7bbb      	ldrb	r3, [r7, #14]
 80182b2:	2b80      	cmp	r3, #128	; 0x80
 80182b4:	d004      	beq.n	80182c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80182b6:	6839      	ldr	r1, [r7, #0]
 80182b8:	6878      	ldr	r0, [r7, #4]
 80182ba:	f000 fbfd 	bl	8018ab8 <USBD_CtlError>
                break;
 80182be:	e091      	b.n	80183e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80182c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	da0b      	bge.n	80182e0 <USBD_StdEPReq+0x19e>
 80182c8:	7bbb      	ldrb	r3, [r7, #14]
 80182ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80182ce:	4613      	mov	r3, r2
 80182d0:	009b      	lsls	r3, r3, #2
 80182d2:	4413      	add	r3, r2
 80182d4:	009b      	lsls	r3, r3, #2
 80182d6:	3310      	adds	r3, #16
 80182d8:	687a      	ldr	r2, [r7, #4]
 80182da:	4413      	add	r3, r2
 80182dc:	3304      	adds	r3, #4
 80182de:	e00b      	b.n	80182f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80182e0:	7bbb      	ldrb	r3, [r7, #14]
 80182e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80182e6:	4613      	mov	r3, r2
 80182e8:	009b      	lsls	r3, r3, #2
 80182ea:	4413      	add	r3, r2
 80182ec:	009b      	lsls	r3, r3, #2
 80182ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	4413      	add	r3, r2
 80182f6:	3304      	adds	r3, #4
 80182f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80182fa:	68bb      	ldr	r3, [r7, #8]
 80182fc:	2200      	movs	r2, #0
 80182fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018300:	68bb      	ldr	r3, [r7, #8]
 8018302:	2202      	movs	r2, #2
 8018304:	4619      	mov	r1, r3
 8018306:	6878      	ldr	r0, [r7, #4]
 8018308:	f000 fc47 	bl	8018b9a <USBD_CtlSendData>
              break;
 801830c:	e06a      	b.n	80183e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801830e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018312:	2b00      	cmp	r3, #0
 8018314:	da11      	bge.n	801833a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018316:	7bbb      	ldrb	r3, [r7, #14]
 8018318:	f003 020f 	and.w	r2, r3, #15
 801831c:	6879      	ldr	r1, [r7, #4]
 801831e:	4613      	mov	r3, r2
 8018320:	009b      	lsls	r3, r3, #2
 8018322:	4413      	add	r3, r2
 8018324:	009b      	lsls	r3, r3, #2
 8018326:	440b      	add	r3, r1
 8018328:	3324      	adds	r3, #36	; 0x24
 801832a:	881b      	ldrh	r3, [r3, #0]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d117      	bne.n	8018360 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018330:	6839      	ldr	r1, [r7, #0]
 8018332:	6878      	ldr	r0, [r7, #4]
 8018334:	f000 fbc0 	bl	8018ab8 <USBD_CtlError>
                  break;
 8018338:	e054      	b.n	80183e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801833a:	7bbb      	ldrb	r3, [r7, #14]
 801833c:	f003 020f 	and.w	r2, r3, #15
 8018340:	6879      	ldr	r1, [r7, #4]
 8018342:	4613      	mov	r3, r2
 8018344:	009b      	lsls	r3, r3, #2
 8018346:	4413      	add	r3, r2
 8018348:	009b      	lsls	r3, r3, #2
 801834a:	440b      	add	r3, r1
 801834c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018350:	881b      	ldrh	r3, [r3, #0]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d104      	bne.n	8018360 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018356:	6839      	ldr	r1, [r7, #0]
 8018358:	6878      	ldr	r0, [r7, #4]
 801835a:	f000 fbad 	bl	8018ab8 <USBD_CtlError>
                  break;
 801835e:	e041      	b.n	80183e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018364:	2b00      	cmp	r3, #0
 8018366:	da0b      	bge.n	8018380 <USBD_StdEPReq+0x23e>
 8018368:	7bbb      	ldrb	r3, [r7, #14]
 801836a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801836e:	4613      	mov	r3, r2
 8018370:	009b      	lsls	r3, r3, #2
 8018372:	4413      	add	r3, r2
 8018374:	009b      	lsls	r3, r3, #2
 8018376:	3310      	adds	r3, #16
 8018378:	687a      	ldr	r2, [r7, #4]
 801837a:	4413      	add	r3, r2
 801837c:	3304      	adds	r3, #4
 801837e:	e00b      	b.n	8018398 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018380:	7bbb      	ldrb	r3, [r7, #14]
 8018382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018386:	4613      	mov	r3, r2
 8018388:	009b      	lsls	r3, r3, #2
 801838a:	4413      	add	r3, r2
 801838c:	009b      	lsls	r3, r3, #2
 801838e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018392:	687a      	ldr	r2, [r7, #4]
 8018394:	4413      	add	r3, r2
 8018396:	3304      	adds	r3, #4
 8018398:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801839a:	7bbb      	ldrb	r3, [r7, #14]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d002      	beq.n	80183a6 <USBD_StdEPReq+0x264>
 80183a0:	7bbb      	ldrb	r3, [r7, #14]
 80183a2:	2b80      	cmp	r3, #128	; 0x80
 80183a4:	d103      	bne.n	80183ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80183a6:	68bb      	ldr	r3, [r7, #8]
 80183a8:	2200      	movs	r2, #0
 80183aa:	601a      	str	r2, [r3, #0]
 80183ac:	e00e      	b.n	80183cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80183ae:	7bbb      	ldrb	r3, [r7, #14]
 80183b0:	4619      	mov	r1, r3
 80183b2:	6878      	ldr	r0, [r7, #4]
 80183b4:	f001 f8be 	bl	8019534 <USBD_LL_IsStallEP>
 80183b8:	4603      	mov	r3, r0
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d003      	beq.n	80183c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	2201      	movs	r2, #1
 80183c2:	601a      	str	r2, [r3, #0]
 80183c4:	e002      	b.n	80183cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80183c6:	68bb      	ldr	r3, [r7, #8]
 80183c8:	2200      	movs	r2, #0
 80183ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80183cc:	68bb      	ldr	r3, [r7, #8]
 80183ce:	2202      	movs	r2, #2
 80183d0:	4619      	mov	r1, r3
 80183d2:	6878      	ldr	r0, [r7, #4]
 80183d4:	f000 fbe1 	bl	8018b9a <USBD_CtlSendData>
              break;
 80183d8:	e004      	b.n	80183e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80183da:	6839      	ldr	r1, [r7, #0]
 80183dc:	6878      	ldr	r0, [r7, #4]
 80183de:	f000 fb6b 	bl	8018ab8 <USBD_CtlError>
              break;
 80183e2:	bf00      	nop
          }
          break;
 80183e4:	e004      	b.n	80183f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80183e6:	6839      	ldr	r1, [r7, #0]
 80183e8:	6878      	ldr	r0, [r7, #4]
 80183ea:	f000 fb65 	bl	8018ab8 <USBD_CtlError>
          break;
 80183ee:	bf00      	nop
      }
      break;
 80183f0:	e004      	b.n	80183fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80183f2:	6839      	ldr	r1, [r7, #0]
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f000 fb5f 	bl	8018ab8 <USBD_CtlError>
      break;
 80183fa:	bf00      	nop
  }

  return ret;
 80183fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80183fe:	4618      	mov	r0, r3
 8018400:	3710      	adds	r7, #16
 8018402:	46bd      	mov	sp, r7
 8018404:	bd80      	pop	{r7, pc}
	...

08018408 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018408:	b580      	push	{r7, lr}
 801840a:	b084      	sub	sp, #16
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
 8018410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018412:	2300      	movs	r3, #0
 8018414:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018416:	2300      	movs	r3, #0
 8018418:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801841a:	2300      	movs	r3, #0
 801841c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801841e:	683b      	ldr	r3, [r7, #0]
 8018420:	885b      	ldrh	r3, [r3, #2]
 8018422:	0a1b      	lsrs	r3, r3, #8
 8018424:	b29b      	uxth	r3, r3
 8018426:	3b01      	subs	r3, #1
 8018428:	2b0e      	cmp	r3, #14
 801842a:	f200 8152 	bhi.w	80186d2 <USBD_GetDescriptor+0x2ca>
 801842e:	a201      	add	r2, pc, #4	; (adr r2, 8018434 <USBD_GetDescriptor+0x2c>)
 8018430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018434:	080184a5 	.word	0x080184a5
 8018438:	080184bd 	.word	0x080184bd
 801843c:	080184fd 	.word	0x080184fd
 8018440:	080186d3 	.word	0x080186d3
 8018444:	080186d3 	.word	0x080186d3
 8018448:	08018673 	.word	0x08018673
 801844c:	0801869f 	.word	0x0801869f
 8018450:	080186d3 	.word	0x080186d3
 8018454:	080186d3 	.word	0x080186d3
 8018458:	080186d3 	.word	0x080186d3
 801845c:	080186d3 	.word	0x080186d3
 8018460:	080186d3 	.word	0x080186d3
 8018464:	080186d3 	.word	0x080186d3
 8018468:	080186d3 	.word	0x080186d3
 801846c:	08018471 	.word	0x08018471
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018476:	69db      	ldr	r3, [r3, #28]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d00b      	beq.n	8018494 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018482:	69db      	ldr	r3, [r3, #28]
 8018484:	687a      	ldr	r2, [r7, #4]
 8018486:	7c12      	ldrb	r2, [r2, #16]
 8018488:	f107 0108 	add.w	r1, r7, #8
 801848c:	4610      	mov	r0, r2
 801848e:	4798      	blx	r3
 8018490:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018492:	e126      	b.n	80186e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018494:	6839      	ldr	r1, [r7, #0]
 8018496:	6878      	ldr	r0, [r7, #4]
 8018498:	f000 fb0e 	bl	8018ab8 <USBD_CtlError>
        err++;
 801849c:	7afb      	ldrb	r3, [r7, #11]
 801849e:	3301      	adds	r3, #1
 80184a0:	72fb      	strb	r3, [r7, #11]
      break;
 80184a2:	e11e      	b.n	80186e2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	687a      	ldr	r2, [r7, #4]
 80184ae:	7c12      	ldrb	r2, [r2, #16]
 80184b0:	f107 0108 	add.w	r1, r7, #8
 80184b4:	4610      	mov	r0, r2
 80184b6:	4798      	blx	r3
 80184b8:	60f8      	str	r0, [r7, #12]
      break;
 80184ba:	e112      	b.n	80186e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	7c1b      	ldrb	r3, [r3, #16]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d10d      	bne.n	80184e0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80184ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184cc:	f107 0208 	add.w	r2, r7, #8
 80184d0:	4610      	mov	r0, r2
 80184d2:	4798      	blx	r3
 80184d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	3301      	adds	r3, #1
 80184da:	2202      	movs	r2, #2
 80184dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80184de:	e100      	b.n	80186e2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80184e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184e8:	f107 0208 	add.w	r2, r7, #8
 80184ec:	4610      	mov	r0, r2
 80184ee:	4798      	blx	r3
 80184f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	3301      	adds	r3, #1
 80184f6:	2202      	movs	r2, #2
 80184f8:	701a      	strb	r2, [r3, #0]
      break;
 80184fa:	e0f2      	b.n	80186e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	885b      	ldrh	r3, [r3, #2]
 8018500:	b2db      	uxtb	r3, r3
 8018502:	2b05      	cmp	r3, #5
 8018504:	f200 80ac 	bhi.w	8018660 <USBD_GetDescriptor+0x258>
 8018508:	a201      	add	r2, pc, #4	; (adr r2, 8018510 <USBD_GetDescriptor+0x108>)
 801850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801850e:	bf00      	nop
 8018510:	08018529 	.word	0x08018529
 8018514:	0801855d 	.word	0x0801855d
 8018518:	08018591 	.word	0x08018591
 801851c:	080185c5 	.word	0x080185c5
 8018520:	080185f9 	.word	0x080185f9
 8018524:	0801862d 	.word	0x0801862d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801852e:	685b      	ldr	r3, [r3, #4]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d00b      	beq.n	801854c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801853a:	685b      	ldr	r3, [r3, #4]
 801853c:	687a      	ldr	r2, [r7, #4]
 801853e:	7c12      	ldrb	r2, [r2, #16]
 8018540:	f107 0108 	add.w	r1, r7, #8
 8018544:	4610      	mov	r0, r2
 8018546:	4798      	blx	r3
 8018548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801854a:	e091      	b.n	8018670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801854c:	6839      	ldr	r1, [r7, #0]
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f000 fab2 	bl	8018ab8 <USBD_CtlError>
            err++;
 8018554:	7afb      	ldrb	r3, [r7, #11]
 8018556:	3301      	adds	r3, #1
 8018558:	72fb      	strb	r3, [r7, #11]
          break;
 801855a:	e089      	b.n	8018670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018562:	689b      	ldr	r3, [r3, #8]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d00b      	beq.n	8018580 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801856e:	689b      	ldr	r3, [r3, #8]
 8018570:	687a      	ldr	r2, [r7, #4]
 8018572:	7c12      	ldrb	r2, [r2, #16]
 8018574:	f107 0108 	add.w	r1, r7, #8
 8018578:	4610      	mov	r0, r2
 801857a:	4798      	blx	r3
 801857c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801857e:	e077      	b.n	8018670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018580:	6839      	ldr	r1, [r7, #0]
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f000 fa98 	bl	8018ab8 <USBD_CtlError>
            err++;
 8018588:	7afb      	ldrb	r3, [r7, #11]
 801858a:	3301      	adds	r3, #1
 801858c:	72fb      	strb	r3, [r7, #11]
          break;
 801858e:	e06f      	b.n	8018670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018596:	68db      	ldr	r3, [r3, #12]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d00b      	beq.n	80185b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80185a2:	68db      	ldr	r3, [r3, #12]
 80185a4:	687a      	ldr	r2, [r7, #4]
 80185a6:	7c12      	ldrb	r2, [r2, #16]
 80185a8:	f107 0108 	add.w	r1, r7, #8
 80185ac:	4610      	mov	r0, r2
 80185ae:	4798      	blx	r3
 80185b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80185b2:	e05d      	b.n	8018670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80185b4:	6839      	ldr	r1, [r7, #0]
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f000 fa7e 	bl	8018ab8 <USBD_CtlError>
            err++;
 80185bc:	7afb      	ldrb	r3, [r7, #11]
 80185be:	3301      	adds	r3, #1
 80185c0:	72fb      	strb	r3, [r7, #11]
          break;
 80185c2:	e055      	b.n	8018670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80185ca:	691b      	ldr	r3, [r3, #16]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d00b      	beq.n	80185e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80185d6:	691b      	ldr	r3, [r3, #16]
 80185d8:	687a      	ldr	r2, [r7, #4]
 80185da:	7c12      	ldrb	r2, [r2, #16]
 80185dc:	f107 0108 	add.w	r1, r7, #8
 80185e0:	4610      	mov	r0, r2
 80185e2:	4798      	blx	r3
 80185e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80185e6:	e043      	b.n	8018670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80185e8:	6839      	ldr	r1, [r7, #0]
 80185ea:	6878      	ldr	r0, [r7, #4]
 80185ec:	f000 fa64 	bl	8018ab8 <USBD_CtlError>
            err++;
 80185f0:	7afb      	ldrb	r3, [r7, #11]
 80185f2:	3301      	adds	r3, #1
 80185f4:	72fb      	strb	r3, [r7, #11]
          break;
 80185f6:	e03b      	b.n	8018670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80185fe:	695b      	ldr	r3, [r3, #20]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d00b      	beq.n	801861c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801860a:	695b      	ldr	r3, [r3, #20]
 801860c:	687a      	ldr	r2, [r7, #4]
 801860e:	7c12      	ldrb	r2, [r2, #16]
 8018610:	f107 0108 	add.w	r1, r7, #8
 8018614:	4610      	mov	r0, r2
 8018616:	4798      	blx	r3
 8018618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801861a:	e029      	b.n	8018670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801861c:	6839      	ldr	r1, [r7, #0]
 801861e:	6878      	ldr	r0, [r7, #4]
 8018620:	f000 fa4a 	bl	8018ab8 <USBD_CtlError>
            err++;
 8018624:	7afb      	ldrb	r3, [r7, #11]
 8018626:	3301      	adds	r3, #1
 8018628:	72fb      	strb	r3, [r7, #11]
          break;
 801862a:	e021      	b.n	8018670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018632:	699b      	ldr	r3, [r3, #24]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d00b      	beq.n	8018650 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801863e:	699b      	ldr	r3, [r3, #24]
 8018640:	687a      	ldr	r2, [r7, #4]
 8018642:	7c12      	ldrb	r2, [r2, #16]
 8018644:	f107 0108 	add.w	r1, r7, #8
 8018648:	4610      	mov	r0, r2
 801864a:	4798      	blx	r3
 801864c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801864e:	e00f      	b.n	8018670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018650:	6839      	ldr	r1, [r7, #0]
 8018652:	6878      	ldr	r0, [r7, #4]
 8018654:	f000 fa30 	bl	8018ab8 <USBD_CtlError>
            err++;
 8018658:	7afb      	ldrb	r3, [r7, #11]
 801865a:	3301      	adds	r3, #1
 801865c:	72fb      	strb	r3, [r7, #11]
          break;
 801865e:	e007      	b.n	8018670 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018660:	6839      	ldr	r1, [r7, #0]
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	f000 fa28 	bl	8018ab8 <USBD_CtlError>
          err++;
 8018668:	7afb      	ldrb	r3, [r7, #11]
 801866a:	3301      	adds	r3, #1
 801866c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801866e:	bf00      	nop
      }
      break;
 8018670:	e037      	b.n	80186e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	7c1b      	ldrb	r3, [r3, #16]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d109      	bne.n	801868e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018682:	f107 0208 	add.w	r2, r7, #8
 8018686:	4610      	mov	r0, r2
 8018688:	4798      	blx	r3
 801868a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801868c:	e029      	b.n	80186e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801868e:	6839      	ldr	r1, [r7, #0]
 8018690:	6878      	ldr	r0, [r7, #4]
 8018692:	f000 fa11 	bl	8018ab8 <USBD_CtlError>
        err++;
 8018696:	7afb      	ldrb	r3, [r7, #11]
 8018698:	3301      	adds	r3, #1
 801869a:	72fb      	strb	r3, [r7, #11]
      break;
 801869c:	e021      	b.n	80186e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	7c1b      	ldrb	r3, [r3, #16]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d10d      	bne.n	80186c2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186ae:	f107 0208 	add.w	r2, r7, #8
 80186b2:	4610      	mov	r0, r2
 80186b4:	4798      	blx	r3
 80186b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	3301      	adds	r3, #1
 80186bc:	2207      	movs	r2, #7
 80186be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80186c0:	e00f      	b.n	80186e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80186c2:	6839      	ldr	r1, [r7, #0]
 80186c4:	6878      	ldr	r0, [r7, #4]
 80186c6:	f000 f9f7 	bl	8018ab8 <USBD_CtlError>
        err++;
 80186ca:	7afb      	ldrb	r3, [r7, #11]
 80186cc:	3301      	adds	r3, #1
 80186ce:	72fb      	strb	r3, [r7, #11]
      break;
 80186d0:	e007      	b.n	80186e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80186d2:	6839      	ldr	r1, [r7, #0]
 80186d4:	6878      	ldr	r0, [r7, #4]
 80186d6:	f000 f9ef 	bl	8018ab8 <USBD_CtlError>
      err++;
 80186da:	7afb      	ldrb	r3, [r7, #11]
 80186dc:	3301      	adds	r3, #1
 80186de:	72fb      	strb	r3, [r7, #11]
      break;
 80186e0:	bf00      	nop
  }

  if (err != 0U)
 80186e2:	7afb      	ldrb	r3, [r7, #11]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d11e      	bne.n	8018726 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80186e8:	683b      	ldr	r3, [r7, #0]
 80186ea:	88db      	ldrh	r3, [r3, #6]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d016      	beq.n	801871e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80186f0:	893b      	ldrh	r3, [r7, #8]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d00e      	beq.n	8018714 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80186f6:	683b      	ldr	r3, [r7, #0]
 80186f8:	88da      	ldrh	r2, [r3, #6]
 80186fa:	893b      	ldrh	r3, [r7, #8]
 80186fc:	4293      	cmp	r3, r2
 80186fe:	bf28      	it	cs
 8018700:	4613      	movcs	r3, r2
 8018702:	b29b      	uxth	r3, r3
 8018704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018706:	893b      	ldrh	r3, [r7, #8]
 8018708:	461a      	mov	r2, r3
 801870a:	68f9      	ldr	r1, [r7, #12]
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f000 fa44 	bl	8018b9a <USBD_CtlSendData>
 8018712:	e009      	b.n	8018728 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018714:	6839      	ldr	r1, [r7, #0]
 8018716:	6878      	ldr	r0, [r7, #4]
 8018718:	f000 f9ce 	bl	8018ab8 <USBD_CtlError>
 801871c:	e004      	b.n	8018728 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801871e:	6878      	ldr	r0, [r7, #4]
 8018720:	f000 fa95 	bl	8018c4e <USBD_CtlSendStatus>
 8018724:	e000      	b.n	8018728 <USBD_GetDescriptor+0x320>
    return;
 8018726:	bf00      	nop
  }
}
 8018728:	3710      	adds	r7, #16
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}
 801872e:	bf00      	nop

08018730 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b084      	sub	sp, #16
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
 8018738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801873a:	683b      	ldr	r3, [r7, #0]
 801873c:	889b      	ldrh	r3, [r3, #4]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d131      	bne.n	80187a6 <USBD_SetAddress+0x76>
 8018742:	683b      	ldr	r3, [r7, #0]
 8018744:	88db      	ldrh	r3, [r3, #6]
 8018746:	2b00      	cmp	r3, #0
 8018748:	d12d      	bne.n	80187a6 <USBD_SetAddress+0x76>
 801874a:	683b      	ldr	r3, [r7, #0]
 801874c:	885b      	ldrh	r3, [r3, #2]
 801874e:	2b7f      	cmp	r3, #127	; 0x7f
 8018750:	d829      	bhi.n	80187a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	885b      	ldrh	r3, [r3, #2]
 8018756:	b2db      	uxtb	r3, r3
 8018758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801875c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018764:	b2db      	uxtb	r3, r3
 8018766:	2b03      	cmp	r3, #3
 8018768:	d104      	bne.n	8018774 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801876a:	6839      	ldr	r1, [r7, #0]
 801876c:	6878      	ldr	r0, [r7, #4]
 801876e:	f000 f9a3 	bl	8018ab8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018772:	e01d      	b.n	80187b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	7bfa      	ldrb	r2, [r7, #15]
 8018778:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801877c:	7bfb      	ldrb	r3, [r7, #15]
 801877e:	4619      	mov	r1, r3
 8018780:	6878      	ldr	r0, [r7, #4]
 8018782:	f000 ff05 	bl	8019590 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f000 fa61 	bl	8018c4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801878c:	7bfb      	ldrb	r3, [r7, #15]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d004      	beq.n	801879c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	2202      	movs	r2, #2
 8018796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801879a:	e009      	b.n	80187b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2201      	movs	r2, #1
 80187a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80187a4:	e004      	b.n	80187b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80187a6:	6839      	ldr	r1, [r7, #0]
 80187a8:	6878      	ldr	r0, [r7, #4]
 80187aa:	f000 f985 	bl	8018ab8 <USBD_CtlError>
  }
}
 80187ae:	bf00      	nop
 80187b0:	bf00      	nop
 80187b2:	3710      	adds	r7, #16
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd80      	pop	{r7, pc}

080187b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b084      	sub	sp, #16
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80187c2:	2300      	movs	r3, #0
 80187c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80187c6:	683b      	ldr	r3, [r7, #0]
 80187c8:	885b      	ldrh	r3, [r3, #2]
 80187ca:	b2da      	uxtb	r2, r3
 80187cc:	4b4c      	ldr	r3, [pc, #304]	; (8018900 <USBD_SetConfig+0x148>)
 80187ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80187d0:	4b4b      	ldr	r3, [pc, #300]	; (8018900 <USBD_SetConfig+0x148>)
 80187d2:	781b      	ldrb	r3, [r3, #0]
 80187d4:	2b01      	cmp	r3, #1
 80187d6:	d905      	bls.n	80187e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80187d8:	6839      	ldr	r1, [r7, #0]
 80187da:	6878      	ldr	r0, [r7, #4]
 80187dc:	f000 f96c 	bl	8018ab8 <USBD_CtlError>
    return USBD_FAIL;
 80187e0:	2303      	movs	r3, #3
 80187e2:	e088      	b.n	80188f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80187ea:	b2db      	uxtb	r3, r3
 80187ec:	2b02      	cmp	r3, #2
 80187ee:	d002      	beq.n	80187f6 <USBD_SetConfig+0x3e>
 80187f0:	2b03      	cmp	r3, #3
 80187f2:	d025      	beq.n	8018840 <USBD_SetConfig+0x88>
 80187f4:	e071      	b.n	80188da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80187f6:	4b42      	ldr	r3, [pc, #264]	; (8018900 <USBD_SetConfig+0x148>)
 80187f8:	781b      	ldrb	r3, [r3, #0]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d01c      	beq.n	8018838 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80187fe:	4b40      	ldr	r3, [pc, #256]	; (8018900 <USBD_SetConfig+0x148>)
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	461a      	mov	r2, r3
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018808:	4b3d      	ldr	r3, [pc, #244]	; (8018900 <USBD_SetConfig+0x148>)
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	4619      	mov	r1, r3
 801880e:	6878      	ldr	r0, [r7, #4]
 8018810:	f7ff f992 	bl	8017b38 <USBD_SetClassConfig>
 8018814:	4603      	mov	r3, r0
 8018816:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018818:	7bfb      	ldrb	r3, [r7, #15]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d004      	beq.n	8018828 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801881e:	6839      	ldr	r1, [r7, #0]
 8018820:	6878      	ldr	r0, [r7, #4]
 8018822:	f000 f949 	bl	8018ab8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018826:	e065      	b.n	80188f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8018828:	6878      	ldr	r0, [r7, #4]
 801882a:	f000 fa10 	bl	8018c4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	2203      	movs	r2, #3
 8018832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8018836:	e05d      	b.n	80188f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f000 fa08 	bl	8018c4e <USBD_CtlSendStatus>
      break;
 801883e:	e059      	b.n	80188f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018840:	4b2f      	ldr	r3, [pc, #188]	; (8018900 <USBD_SetConfig+0x148>)
 8018842:	781b      	ldrb	r3, [r3, #0]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d112      	bne.n	801886e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2202      	movs	r2, #2
 801884c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8018850:	4b2b      	ldr	r3, [pc, #172]	; (8018900 <USBD_SetConfig+0x148>)
 8018852:	781b      	ldrb	r3, [r3, #0]
 8018854:	461a      	mov	r2, r3
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801885a:	4b29      	ldr	r3, [pc, #164]	; (8018900 <USBD_SetConfig+0x148>)
 801885c:	781b      	ldrb	r3, [r3, #0]
 801885e:	4619      	mov	r1, r3
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f7ff f985 	bl	8017b70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018866:	6878      	ldr	r0, [r7, #4]
 8018868:	f000 f9f1 	bl	8018c4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801886c:	e042      	b.n	80188f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801886e:	4b24      	ldr	r3, [pc, #144]	; (8018900 <USBD_SetConfig+0x148>)
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	461a      	mov	r2, r3
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	685b      	ldr	r3, [r3, #4]
 8018878:	429a      	cmp	r2, r3
 801887a:	d02a      	beq.n	80188d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	685b      	ldr	r3, [r3, #4]
 8018880:	b2db      	uxtb	r3, r3
 8018882:	4619      	mov	r1, r3
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	f7ff f973 	bl	8017b70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801888a:	4b1d      	ldr	r3, [pc, #116]	; (8018900 <USBD_SetConfig+0x148>)
 801888c:	781b      	ldrb	r3, [r3, #0]
 801888e:	461a      	mov	r2, r3
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018894:	4b1a      	ldr	r3, [pc, #104]	; (8018900 <USBD_SetConfig+0x148>)
 8018896:	781b      	ldrb	r3, [r3, #0]
 8018898:	4619      	mov	r1, r3
 801889a:	6878      	ldr	r0, [r7, #4]
 801889c:	f7ff f94c 	bl	8017b38 <USBD_SetClassConfig>
 80188a0:	4603      	mov	r3, r0
 80188a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80188a4:	7bfb      	ldrb	r3, [r7, #15]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d00f      	beq.n	80188ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80188aa:	6839      	ldr	r1, [r7, #0]
 80188ac:	6878      	ldr	r0, [r7, #4]
 80188ae:	f000 f903 	bl	8018ab8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	685b      	ldr	r3, [r3, #4]
 80188b6:	b2db      	uxtb	r3, r3
 80188b8:	4619      	mov	r1, r3
 80188ba:	6878      	ldr	r0, [r7, #4]
 80188bc:	f7ff f958 	bl	8017b70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	2202      	movs	r2, #2
 80188c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80188c8:	e014      	b.n	80188f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80188ca:	6878      	ldr	r0, [r7, #4]
 80188cc:	f000 f9bf 	bl	8018c4e <USBD_CtlSendStatus>
      break;
 80188d0:	e010      	b.n	80188f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80188d2:	6878      	ldr	r0, [r7, #4]
 80188d4:	f000 f9bb 	bl	8018c4e <USBD_CtlSendStatus>
      break;
 80188d8:	e00c      	b.n	80188f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80188da:	6839      	ldr	r1, [r7, #0]
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f000 f8eb 	bl	8018ab8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80188e2:	4b07      	ldr	r3, [pc, #28]	; (8018900 <USBD_SetConfig+0x148>)
 80188e4:	781b      	ldrb	r3, [r3, #0]
 80188e6:	4619      	mov	r1, r3
 80188e8:	6878      	ldr	r0, [r7, #4]
 80188ea:	f7ff f941 	bl	8017b70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80188ee:	2303      	movs	r3, #3
 80188f0:	73fb      	strb	r3, [r7, #15]
      break;
 80188f2:	bf00      	nop
  }

  return ret;
 80188f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80188f6:	4618      	mov	r0, r3
 80188f8:	3710      	adds	r7, #16
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bd80      	pop	{r7, pc}
 80188fe:	bf00      	nop
 8018900:	200003b8 	.word	0x200003b8

08018904 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b082      	sub	sp, #8
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
 801890c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	88db      	ldrh	r3, [r3, #6]
 8018912:	2b01      	cmp	r3, #1
 8018914:	d004      	beq.n	8018920 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018916:	6839      	ldr	r1, [r7, #0]
 8018918:	6878      	ldr	r0, [r7, #4]
 801891a:	f000 f8cd 	bl	8018ab8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801891e:	e023      	b.n	8018968 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018926:	b2db      	uxtb	r3, r3
 8018928:	2b02      	cmp	r3, #2
 801892a:	dc02      	bgt.n	8018932 <USBD_GetConfig+0x2e>
 801892c:	2b00      	cmp	r3, #0
 801892e:	dc03      	bgt.n	8018938 <USBD_GetConfig+0x34>
 8018930:	e015      	b.n	801895e <USBD_GetConfig+0x5a>
 8018932:	2b03      	cmp	r3, #3
 8018934:	d00b      	beq.n	801894e <USBD_GetConfig+0x4a>
 8018936:	e012      	b.n	801895e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	2200      	movs	r2, #0
 801893c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	3308      	adds	r3, #8
 8018942:	2201      	movs	r2, #1
 8018944:	4619      	mov	r1, r3
 8018946:	6878      	ldr	r0, [r7, #4]
 8018948:	f000 f927 	bl	8018b9a <USBD_CtlSendData>
        break;
 801894c:	e00c      	b.n	8018968 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	3304      	adds	r3, #4
 8018952:	2201      	movs	r2, #1
 8018954:	4619      	mov	r1, r3
 8018956:	6878      	ldr	r0, [r7, #4]
 8018958:	f000 f91f 	bl	8018b9a <USBD_CtlSendData>
        break;
 801895c:	e004      	b.n	8018968 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801895e:	6839      	ldr	r1, [r7, #0]
 8018960:	6878      	ldr	r0, [r7, #4]
 8018962:	f000 f8a9 	bl	8018ab8 <USBD_CtlError>
        break;
 8018966:	bf00      	nop
}
 8018968:	bf00      	nop
 801896a:	3708      	adds	r7, #8
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}

08018970 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b082      	sub	sp, #8
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
 8018978:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018980:	b2db      	uxtb	r3, r3
 8018982:	3b01      	subs	r3, #1
 8018984:	2b02      	cmp	r3, #2
 8018986:	d81e      	bhi.n	80189c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018988:	683b      	ldr	r3, [r7, #0]
 801898a:	88db      	ldrh	r3, [r3, #6]
 801898c:	2b02      	cmp	r3, #2
 801898e:	d004      	beq.n	801899a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018990:	6839      	ldr	r1, [r7, #0]
 8018992:	6878      	ldr	r0, [r7, #4]
 8018994:	f000 f890 	bl	8018ab8 <USBD_CtlError>
        break;
 8018998:	e01a      	b.n	80189d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	2201      	movs	r2, #1
 801899e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d005      	beq.n	80189b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	68db      	ldr	r3, [r3, #12]
 80189ae:	f043 0202 	orr.w	r2, r3, #2
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	330c      	adds	r3, #12
 80189ba:	2202      	movs	r2, #2
 80189bc:	4619      	mov	r1, r3
 80189be:	6878      	ldr	r0, [r7, #4]
 80189c0:	f000 f8eb 	bl	8018b9a <USBD_CtlSendData>
      break;
 80189c4:	e004      	b.n	80189d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80189c6:	6839      	ldr	r1, [r7, #0]
 80189c8:	6878      	ldr	r0, [r7, #4]
 80189ca:	f000 f875 	bl	8018ab8 <USBD_CtlError>
      break;
 80189ce:	bf00      	nop
  }
}
 80189d0:	bf00      	nop
 80189d2:	3708      	adds	r7, #8
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd80      	pop	{r7, pc}

080189d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b082      	sub	sp, #8
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
 80189e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80189e2:	683b      	ldr	r3, [r7, #0]
 80189e4:	885b      	ldrh	r3, [r3, #2]
 80189e6:	2b01      	cmp	r3, #1
 80189e8:	d106      	bne.n	80189f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	2201      	movs	r2, #1
 80189ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80189f2:	6878      	ldr	r0, [r7, #4]
 80189f4:	f000 f92b 	bl	8018c4e <USBD_CtlSendStatus>
  }
}
 80189f8:	bf00      	nop
 80189fa:	3708      	adds	r7, #8
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}

08018a00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b082      	sub	sp, #8
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
 8018a08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a10:	b2db      	uxtb	r3, r3
 8018a12:	3b01      	subs	r3, #1
 8018a14:	2b02      	cmp	r3, #2
 8018a16:	d80b      	bhi.n	8018a30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	885b      	ldrh	r3, [r3, #2]
 8018a1c:	2b01      	cmp	r3, #1
 8018a1e:	d10c      	bne.n	8018a3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	2200      	movs	r2, #0
 8018a24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f000 f910 	bl	8018c4e <USBD_CtlSendStatus>
      }
      break;
 8018a2e:	e004      	b.n	8018a3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018a30:	6839      	ldr	r1, [r7, #0]
 8018a32:	6878      	ldr	r0, [r7, #4]
 8018a34:	f000 f840 	bl	8018ab8 <USBD_CtlError>
      break;
 8018a38:	e000      	b.n	8018a3c <USBD_ClrFeature+0x3c>
      break;
 8018a3a:	bf00      	nop
  }
}
 8018a3c:	bf00      	nop
 8018a3e:	3708      	adds	r7, #8
 8018a40:	46bd      	mov	sp, r7
 8018a42:	bd80      	pop	{r7, pc}

08018a44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b084      	sub	sp, #16
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	781a      	ldrb	r2, [r3, #0]
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	3301      	adds	r3, #1
 8018a5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	781a      	ldrb	r2, [r3, #0]
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	3301      	adds	r3, #1
 8018a6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018a6e:	68f8      	ldr	r0, [r7, #12]
 8018a70:	f7ff fa92 	bl	8017f98 <SWAPBYTE>
 8018a74:	4603      	mov	r3, r0
 8018a76:	461a      	mov	r2, r3
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	3301      	adds	r3, #1
 8018a80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	3301      	adds	r3, #1
 8018a86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018a88:	68f8      	ldr	r0, [r7, #12]
 8018a8a:	f7ff fa85 	bl	8017f98 <SWAPBYTE>
 8018a8e:	4603      	mov	r3, r0
 8018a90:	461a      	mov	r2, r3
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	3301      	adds	r3, #1
 8018a9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	3301      	adds	r3, #1
 8018aa0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018aa2:	68f8      	ldr	r0, [r7, #12]
 8018aa4:	f7ff fa78 	bl	8017f98 <SWAPBYTE>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	461a      	mov	r2, r3
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	80da      	strh	r2, [r3, #6]
}
 8018ab0:	bf00      	nop
 8018ab2:	3710      	adds	r7, #16
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}

08018ab8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b082      	sub	sp, #8
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
 8018ac0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018ac2:	2180      	movs	r1, #128	; 0x80
 8018ac4:	6878      	ldr	r0, [r7, #4]
 8018ac6:	f000 fcc9 	bl	801945c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018aca:	2100      	movs	r1, #0
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	f000 fcc5 	bl	801945c <USBD_LL_StallEP>
}
 8018ad2:	bf00      	nop
 8018ad4:	3708      	adds	r7, #8
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bd80      	pop	{r7, pc}

08018ada <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018ada:	b580      	push	{r7, lr}
 8018adc:	b086      	sub	sp, #24
 8018ade:	af00      	add	r7, sp, #0
 8018ae0:	60f8      	str	r0, [r7, #12]
 8018ae2:	60b9      	str	r1, [r7, #8]
 8018ae4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d036      	beq.n	8018b5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018af4:	6938      	ldr	r0, [r7, #16]
 8018af6:	f000 f836 	bl	8018b66 <USBD_GetLen>
 8018afa:	4603      	mov	r3, r0
 8018afc:	3301      	adds	r3, #1
 8018afe:	b29b      	uxth	r3, r3
 8018b00:	005b      	lsls	r3, r3, #1
 8018b02:	b29a      	uxth	r2, r3
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018b08:	7dfb      	ldrb	r3, [r7, #23]
 8018b0a:	68ba      	ldr	r2, [r7, #8]
 8018b0c:	4413      	add	r3, r2
 8018b0e:	687a      	ldr	r2, [r7, #4]
 8018b10:	7812      	ldrb	r2, [r2, #0]
 8018b12:	701a      	strb	r2, [r3, #0]
  idx++;
 8018b14:	7dfb      	ldrb	r3, [r7, #23]
 8018b16:	3301      	adds	r3, #1
 8018b18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018b1a:	7dfb      	ldrb	r3, [r7, #23]
 8018b1c:	68ba      	ldr	r2, [r7, #8]
 8018b1e:	4413      	add	r3, r2
 8018b20:	2203      	movs	r2, #3
 8018b22:	701a      	strb	r2, [r3, #0]
  idx++;
 8018b24:	7dfb      	ldrb	r3, [r7, #23]
 8018b26:	3301      	adds	r3, #1
 8018b28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8018b2a:	e013      	b.n	8018b54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8018b2c:	7dfb      	ldrb	r3, [r7, #23]
 8018b2e:	68ba      	ldr	r2, [r7, #8]
 8018b30:	4413      	add	r3, r2
 8018b32:	693a      	ldr	r2, [r7, #16]
 8018b34:	7812      	ldrb	r2, [r2, #0]
 8018b36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018b38:	693b      	ldr	r3, [r7, #16]
 8018b3a:	3301      	adds	r3, #1
 8018b3c:	613b      	str	r3, [r7, #16]
    idx++;
 8018b3e:	7dfb      	ldrb	r3, [r7, #23]
 8018b40:	3301      	adds	r3, #1
 8018b42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8018b44:	7dfb      	ldrb	r3, [r7, #23]
 8018b46:	68ba      	ldr	r2, [r7, #8]
 8018b48:	4413      	add	r3, r2
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8018b4e:	7dfb      	ldrb	r3, [r7, #23]
 8018b50:	3301      	adds	r3, #1
 8018b52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8018b54:	693b      	ldr	r3, [r7, #16]
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d1e7      	bne.n	8018b2c <USBD_GetString+0x52>
 8018b5c:	e000      	b.n	8018b60 <USBD_GetString+0x86>
    return;
 8018b5e:	bf00      	nop
  }
}
 8018b60:	3718      	adds	r7, #24
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}

08018b66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018b66:	b480      	push	{r7}
 8018b68:	b085      	sub	sp, #20
 8018b6a:	af00      	add	r7, sp, #0
 8018b6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8018b76:	e005      	b.n	8018b84 <USBD_GetLen+0x1e>
  {
    len++;
 8018b78:	7bfb      	ldrb	r3, [r7, #15]
 8018b7a:	3301      	adds	r3, #1
 8018b7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018b7e:	68bb      	ldr	r3, [r7, #8]
 8018b80:	3301      	adds	r3, #1
 8018b82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018b84:	68bb      	ldr	r3, [r7, #8]
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d1f5      	bne.n	8018b78 <USBD_GetLen+0x12>
  }

  return len;
 8018b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b8e:	4618      	mov	r0, r3
 8018b90:	3714      	adds	r7, #20
 8018b92:	46bd      	mov	sp, r7
 8018b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b98:	4770      	bx	lr

08018b9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8018b9a:	b580      	push	{r7, lr}
 8018b9c:	b084      	sub	sp, #16
 8018b9e:	af00      	add	r7, sp, #0
 8018ba0:	60f8      	str	r0, [r7, #12]
 8018ba2:	60b9      	str	r1, [r7, #8]
 8018ba4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	2202      	movs	r2, #2
 8018baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	687a      	ldr	r2, [r7, #4]
 8018bb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	687a      	ldr	r2, [r7, #4]
 8018bb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	68ba      	ldr	r2, [r7, #8]
 8018bbe:	2100      	movs	r1, #0
 8018bc0:	68f8      	ldr	r0, [r7, #12]
 8018bc2:	f000 fd1b 	bl	80195fc <USBD_LL_Transmit>

  return USBD_OK;
 8018bc6:	2300      	movs	r3, #0
}
 8018bc8:	4618      	mov	r0, r3
 8018bca:	3710      	adds	r7, #16
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd80      	pop	{r7, pc}

08018bd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b084      	sub	sp, #16
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	60f8      	str	r0, [r7, #12]
 8018bd8:	60b9      	str	r1, [r7, #8]
 8018bda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	68ba      	ldr	r2, [r7, #8]
 8018be0:	2100      	movs	r1, #0
 8018be2:	68f8      	ldr	r0, [r7, #12]
 8018be4:	f000 fd0a 	bl	80195fc <USBD_LL_Transmit>

  return USBD_OK;
 8018be8:	2300      	movs	r3, #0
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3710      	adds	r7, #16
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}

08018bf2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018bf2:	b580      	push	{r7, lr}
 8018bf4:	b084      	sub	sp, #16
 8018bf6:	af00      	add	r7, sp, #0
 8018bf8:	60f8      	str	r0, [r7, #12]
 8018bfa:	60b9      	str	r1, [r7, #8]
 8018bfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	2203      	movs	r2, #3
 8018c02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	687a      	ldr	r2, [r7, #4]
 8018c0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	687a      	ldr	r2, [r7, #4]
 8018c12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	68ba      	ldr	r2, [r7, #8]
 8018c1a:	2100      	movs	r1, #0
 8018c1c:	68f8      	ldr	r0, [r7, #12]
 8018c1e:	f000 fd25 	bl	801966c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018c22:	2300      	movs	r3, #0
}
 8018c24:	4618      	mov	r0, r3
 8018c26:	3710      	adds	r7, #16
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}

08018c2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b084      	sub	sp, #16
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	60f8      	str	r0, [r7, #12]
 8018c34:	60b9      	str	r1, [r7, #8]
 8018c36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	68ba      	ldr	r2, [r7, #8]
 8018c3c:	2100      	movs	r1, #0
 8018c3e:	68f8      	ldr	r0, [r7, #12]
 8018c40:	f000 fd14 	bl	801966c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018c44:	2300      	movs	r3, #0
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3710      	adds	r7, #16
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}

08018c4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8018c4e:	b580      	push	{r7, lr}
 8018c50:	b082      	sub	sp, #8
 8018c52:	af00      	add	r7, sp, #0
 8018c54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	2204      	movs	r2, #4
 8018c5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8018c5e:	2300      	movs	r3, #0
 8018c60:	2200      	movs	r2, #0
 8018c62:	2100      	movs	r1, #0
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f000 fcc9 	bl	80195fc <USBD_LL_Transmit>

  return USBD_OK;
 8018c6a:	2300      	movs	r3, #0
}
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	3708      	adds	r7, #8
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}

08018c74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b082      	sub	sp, #8
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	2205      	movs	r2, #5
 8018c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018c84:	2300      	movs	r3, #0
 8018c86:	2200      	movs	r2, #0
 8018c88:	2100      	movs	r1, #0
 8018c8a:	6878      	ldr	r0, [r7, #4]
 8018c8c:	f000 fcee 	bl	801966c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018c90:	2300      	movs	r3, #0
}
 8018c92:	4618      	mov	r0, r3
 8018c94:	3708      	adds	r7, #8
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bd80      	pop	{r7, pc}
	...

08018c9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018ca0:	2200      	movs	r2, #0
 8018ca2:	4912      	ldr	r1, [pc, #72]	; (8018cec <MX_USB_DEVICE_Init+0x50>)
 8018ca4:	4812      	ldr	r0, [pc, #72]	; (8018cf0 <MX_USB_DEVICE_Init+0x54>)
 8018ca6:	f7fe fed9 	bl	8017a5c <USBD_Init>
 8018caa:	4603      	mov	r3, r0
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d001      	beq.n	8018cb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018cb0:	f7f8 f8f2 	bl	8010e98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018cb4:	490f      	ldr	r1, [pc, #60]	; (8018cf4 <MX_USB_DEVICE_Init+0x58>)
 8018cb6:	480e      	ldr	r0, [pc, #56]	; (8018cf0 <MX_USB_DEVICE_Init+0x54>)
 8018cb8:	f7fe ff00 	bl	8017abc <USBD_RegisterClass>
 8018cbc:	4603      	mov	r3, r0
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d001      	beq.n	8018cc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018cc2:	f7f8 f8e9 	bl	8010e98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018cc6:	490c      	ldr	r1, [pc, #48]	; (8018cf8 <MX_USB_DEVICE_Init+0x5c>)
 8018cc8:	4809      	ldr	r0, [pc, #36]	; (8018cf0 <MX_USB_DEVICE_Init+0x54>)
 8018cca:	f7fe fe51 	bl	8017970 <USBD_CDC_RegisterInterface>
 8018cce:	4603      	mov	r3, r0
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d001      	beq.n	8018cd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018cd4:	f7f8 f8e0 	bl	8010e98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018cd8:	4805      	ldr	r0, [pc, #20]	; (8018cf0 <MX_USB_DEVICE_Init+0x54>)
 8018cda:	f7fe ff16 	bl	8017b0a <USBD_Start>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d001      	beq.n	8018ce8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018ce4:	f7f8 f8d8 	bl	8010e98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018ce8:	bf00      	nop
 8018cea:	bd80      	pop	{r7, pc}
 8018cec:	20000130 	.word	0x20000130
 8018cf0:	200003bc 	.word	0x200003bc
 8018cf4:	20000018 	.word	0x20000018
 8018cf8:	2000011c 	.word	0x2000011c

08018cfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018d00:	2200      	movs	r2, #0
 8018d02:	4905      	ldr	r1, [pc, #20]	; (8018d18 <CDC_Init_FS+0x1c>)
 8018d04:	4805      	ldr	r0, [pc, #20]	; (8018d1c <CDC_Init_FS+0x20>)
 8018d06:	f7fe fe48 	bl	801799a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018d0a:	4905      	ldr	r1, [pc, #20]	; (8018d20 <CDC_Init_FS+0x24>)
 8018d0c:	4803      	ldr	r0, [pc, #12]	; (8018d1c <CDC_Init_FS+0x20>)
 8018d0e:	f7fe fe62 	bl	80179d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018d12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018d14:	4618      	mov	r0, r3
 8018d16:	bd80      	pop	{r7, pc}
 8018d18:	20000a74 	.word	0x20000a74
 8018d1c:	200003bc 	.word	0x200003bc
 8018d20:	2000068c 	.word	0x2000068c

08018d24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018d24:	b480      	push	{r7}
 8018d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018d28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d32:	4770      	bx	lr

08018d34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018d34:	b480      	push	{r7}
 8018d36:	b083      	sub	sp, #12
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	6039      	str	r1, [r7, #0]
 8018d3e:	71fb      	strb	r3, [r7, #7]
 8018d40:	4613      	mov	r3, r2
 8018d42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018d44:	79fb      	ldrb	r3, [r7, #7]
 8018d46:	2b23      	cmp	r3, #35	; 0x23
 8018d48:	d84a      	bhi.n	8018de0 <CDC_Control_FS+0xac>
 8018d4a:	a201      	add	r2, pc, #4	; (adr r2, 8018d50 <CDC_Control_FS+0x1c>)
 8018d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d50:	08018de1 	.word	0x08018de1
 8018d54:	08018de1 	.word	0x08018de1
 8018d58:	08018de1 	.word	0x08018de1
 8018d5c:	08018de1 	.word	0x08018de1
 8018d60:	08018de1 	.word	0x08018de1
 8018d64:	08018de1 	.word	0x08018de1
 8018d68:	08018de1 	.word	0x08018de1
 8018d6c:	08018de1 	.word	0x08018de1
 8018d70:	08018de1 	.word	0x08018de1
 8018d74:	08018de1 	.word	0x08018de1
 8018d78:	08018de1 	.word	0x08018de1
 8018d7c:	08018de1 	.word	0x08018de1
 8018d80:	08018de1 	.word	0x08018de1
 8018d84:	08018de1 	.word	0x08018de1
 8018d88:	08018de1 	.word	0x08018de1
 8018d8c:	08018de1 	.word	0x08018de1
 8018d90:	08018de1 	.word	0x08018de1
 8018d94:	08018de1 	.word	0x08018de1
 8018d98:	08018de1 	.word	0x08018de1
 8018d9c:	08018de1 	.word	0x08018de1
 8018da0:	08018de1 	.word	0x08018de1
 8018da4:	08018de1 	.word	0x08018de1
 8018da8:	08018de1 	.word	0x08018de1
 8018dac:	08018de1 	.word	0x08018de1
 8018db0:	08018de1 	.word	0x08018de1
 8018db4:	08018de1 	.word	0x08018de1
 8018db8:	08018de1 	.word	0x08018de1
 8018dbc:	08018de1 	.word	0x08018de1
 8018dc0:	08018de1 	.word	0x08018de1
 8018dc4:	08018de1 	.word	0x08018de1
 8018dc8:	08018de1 	.word	0x08018de1
 8018dcc:	08018de1 	.word	0x08018de1
 8018dd0:	08018de1 	.word	0x08018de1
 8018dd4:	08018de1 	.word	0x08018de1
 8018dd8:	08018de1 	.word	0x08018de1
 8018ddc:	08018de1 	.word	0x08018de1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018de0:	bf00      	nop
  }

  return (USBD_OK);
 8018de2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	370c      	adds	r7, #12
 8018de8:	46bd      	mov	sp, r7
 8018dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dee:	4770      	bx	lr

08018df0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b082      	sub	sp, #8
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018dfa:	6879      	ldr	r1, [r7, #4]
 8018dfc:	4805      	ldr	r0, [pc, #20]	; (8018e14 <CDC_Receive_FS+0x24>)
 8018dfe:	f7fe fdea 	bl	80179d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018e02:	4804      	ldr	r0, [pc, #16]	; (8018e14 <CDC_Receive_FS+0x24>)
 8018e04:	f7fe fe00 	bl	8017a08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018e08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	3708      	adds	r7, #8
 8018e0e:	46bd      	mov	sp, r7
 8018e10:	bd80      	pop	{r7, pc}
 8018e12:	bf00      	nop
 8018e14:	200003bc 	.word	0x200003bc

08018e18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018e18:	b480      	push	{r7}
 8018e1a:	b087      	sub	sp, #28
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	60f8      	str	r0, [r7, #12]
 8018e20:	60b9      	str	r1, [r7, #8]
 8018e22:	4613      	mov	r3, r2
 8018e24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018e26:	2300      	movs	r3, #0
 8018e28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018e2e:	4618      	mov	r0, r3
 8018e30:	371c      	adds	r7, #28
 8018e32:	46bd      	mov	sp, r7
 8018e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e38:	4770      	bx	lr
	...

08018e3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018e3c:	b480      	push	{r7}
 8018e3e:	b083      	sub	sp, #12
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	4603      	mov	r3, r0
 8018e44:	6039      	str	r1, [r7, #0]
 8018e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018e48:	683b      	ldr	r3, [r7, #0]
 8018e4a:	2212      	movs	r2, #18
 8018e4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018e4e:	4b03      	ldr	r3, [pc, #12]	; (8018e5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018e50:	4618      	mov	r0, r3
 8018e52:	370c      	adds	r7, #12
 8018e54:	46bd      	mov	sp, r7
 8018e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5a:	4770      	bx	lr
 8018e5c:	20000150 	.word	0x20000150

08018e60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018e60:	b480      	push	{r7}
 8018e62:	b083      	sub	sp, #12
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	4603      	mov	r3, r0
 8018e68:	6039      	str	r1, [r7, #0]
 8018e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	2204      	movs	r2, #4
 8018e70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018e72:	4b03      	ldr	r3, [pc, #12]	; (8018e80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	370c      	adds	r7, #12
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7e:	4770      	bx	lr
 8018e80:	20000170 	.word	0x20000170

08018e84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b082      	sub	sp, #8
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	6039      	str	r1, [r7, #0]
 8018e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018e90:	79fb      	ldrb	r3, [r7, #7]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d105      	bne.n	8018ea2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018e96:	683a      	ldr	r2, [r7, #0]
 8018e98:	4907      	ldr	r1, [pc, #28]	; (8018eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8018e9a:	4808      	ldr	r0, [pc, #32]	; (8018ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8018e9c:	f7ff fe1d 	bl	8018ada <USBD_GetString>
 8018ea0:	e004      	b.n	8018eac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018ea2:	683a      	ldr	r2, [r7, #0]
 8018ea4:	4904      	ldr	r1, [pc, #16]	; (8018eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8018ea6:	4805      	ldr	r0, [pc, #20]	; (8018ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8018ea8:	f7ff fe17 	bl	8018ada <USBD_GetString>
  }
  return USBD_StrDesc;
 8018eac:	4b02      	ldr	r3, [pc, #8]	; (8018eb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018eae:	4618      	mov	r0, r3
 8018eb0:	3708      	adds	r7, #8
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	bd80      	pop	{r7, pc}
 8018eb6:	bf00      	nop
 8018eb8:	20000e5c 	.word	0x20000e5c
 8018ebc:	0801c258 	.word	0x0801c258

08018ec0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b082      	sub	sp, #8
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	6039      	str	r1, [r7, #0]
 8018eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018ecc:	683a      	ldr	r2, [r7, #0]
 8018ece:	4904      	ldr	r1, [pc, #16]	; (8018ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018ed0:	4804      	ldr	r0, [pc, #16]	; (8018ee4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018ed2:	f7ff fe02 	bl	8018ada <USBD_GetString>
  return USBD_StrDesc;
 8018ed6:	4b02      	ldr	r3, [pc, #8]	; (8018ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3708      	adds	r7, #8
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	20000e5c 	.word	0x20000e5c
 8018ee4:	0801c270 	.word	0x0801c270

08018ee8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b082      	sub	sp, #8
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	4603      	mov	r3, r0
 8018ef0:	6039      	str	r1, [r7, #0]
 8018ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	221a      	movs	r2, #26
 8018ef8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018efa:	f000 f855 	bl	8018fa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018efe:	4b02      	ldr	r3, [pc, #8]	; (8018f08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018f00:	4618      	mov	r0, r3
 8018f02:	3708      	adds	r7, #8
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}
 8018f08:	20000174 	.word	0x20000174

08018f0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b082      	sub	sp, #8
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	4603      	mov	r3, r0
 8018f14:	6039      	str	r1, [r7, #0]
 8018f16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018f18:	79fb      	ldrb	r3, [r7, #7]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d105      	bne.n	8018f2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018f1e:	683a      	ldr	r2, [r7, #0]
 8018f20:	4907      	ldr	r1, [pc, #28]	; (8018f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018f22:	4808      	ldr	r0, [pc, #32]	; (8018f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018f24:	f7ff fdd9 	bl	8018ada <USBD_GetString>
 8018f28:	e004      	b.n	8018f34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018f2a:	683a      	ldr	r2, [r7, #0]
 8018f2c:	4904      	ldr	r1, [pc, #16]	; (8018f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018f2e:	4805      	ldr	r0, [pc, #20]	; (8018f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018f30:	f7ff fdd3 	bl	8018ada <USBD_GetString>
  }
  return USBD_StrDesc;
 8018f34:	4b02      	ldr	r3, [pc, #8]	; (8018f40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018f36:	4618      	mov	r0, r3
 8018f38:	3708      	adds	r7, #8
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}
 8018f3e:	bf00      	nop
 8018f40:	20000e5c 	.word	0x20000e5c
 8018f44:	0801c284 	.word	0x0801c284

08018f48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	4603      	mov	r3, r0
 8018f50:	6039      	str	r1, [r7, #0]
 8018f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018f54:	79fb      	ldrb	r3, [r7, #7]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d105      	bne.n	8018f66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018f5a:	683a      	ldr	r2, [r7, #0]
 8018f5c:	4907      	ldr	r1, [pc, #28]	; (8018f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018f5e:	4808      	ldr	r0, [pc, #32]	; (8018f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018f60:	f7ff fdbb 	bl	8018ada <USBD_GetString>
 8018f64:	e004      	b.n	8018f70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018f66:	683a      	ldr	r2, [r7, #0]
 8018f68:	4904      	ldr	r1, [pc, #16]	; (8018f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018f6a:	4805      	ldr	r0, [pc, #20]	; (8018f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018f6c:	f7ff fdb5 	bl	8018ada <USBD_GetString>
  }
  return USBD_StrDesc;
 8018f70:	4b02      	ldr	r3, [pc, #8]	; (8018f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018f72:	4618      	mov	r0, r3
 8018f74:	3708      	adds	r7, #8
 8018f76:	46bd      	mov	sp, r7
 8018f78:	bd80      	pop	{r7, pc}
 8018f7a:	bf00      	nop
 8018f7c:	20000e5c 	.word	0x20000e5c
 8018f80:	0801c290 	.word	0x0801c290

08018f84 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f84:	b480      	push	{r7}
 8018f86:	b083      	sub	sp, #12
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	6039      	str	r1, [r7, #0]
 8018f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8018f90:	683b      	ldr	r3, [r7, #0]
 8018f92:	220c      	movs	r2, #12
 8018f94:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8018f96:	4b03      	ldr	r3, [pc, #12]	; (8018fa4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8018f98:	4618      	mov	r0, r3
 8018f9a:	370c      	adds	r7, #12
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa2:	4770      	bx	lr
 8018fa4:	20000164 	.word	0x20000164

08018fa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b084      	sub	sp, #16
 8018fac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018fae:	4b0f      	ldr	r3, [pc, #60]	; (8018fec <Get_SerialNum+0x44>)
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018fb4:	4b0e      	ldr	r3, [pc, #56]	; (8018ff0 <Get_SerialNum+0x48>)
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018fba:	4b0e      	ldr	r3, [pc, #56]	; (8018ff4 <Get_SerialNum+0x4c>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018fc0:	68fa      	ldr	r2, [r7, #12]
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	4413      	add	r3, r2
 8018fc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d009      	beq.n	8018fe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018fce:	2208      	movs	r2, #8
 8018fd0:	4909      	ldr	r1, [pc, #36]	; (8018ff8 <Get_SerialNum+0x50>)
 8018fd2:	68f8      	ldr	r0, [r7, #12]
 8018fd4:	f000 f814 	bl	8019000 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018fd8:	2204      	movs	r2, #4
 8018fda:	4908      	ldr	r1, [pc, #32]	; (8018ffc <Get_SerialNum+0x54>)
 8018fdc:	68b8      	ldr	r0, [r7, #8]
 8018fde:	f000 f80f 	bl	8019000 <IntToUnicode>
  }
}
 8018fe2:	bf00      	nop
 8018fe4:	3710      	adds	r7, #16
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bd80      	pop	{r7, pc}
 8018fea:	bf00      	nop
 8018fec:	1fff7590 	.word	0x1fff7590
 8018ff0:	1fff7594 	.word	0x1fff7594
 8018ff4:	1fff7598 	.word	0x1fff7598
 8018ff8:	20000176 	.word	0x20000176
 8018ffc:	20000186 	.word	0x20000186

08019000 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019000:	b480      	push	{r7}
 8019002:	b087      	sub	sp, #28
 8019004:	af00      	add	r7, sp, #0
 8019006:	60f8      	str	r0, [r7, #12]
 8019008:	60b9      	str	r1, [r7, #8]
 801900a:	4613      	mov	r3, r2
 801900c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801900e:	2300      	movs	r3, #0
 8019010:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019012:	2300      	movs	r3, #0
 8019014:	75fb      	strb	r3, [r7, #23]
 8019016:	e027      	b.n	8019068 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	0f1b      	lsrs	r3, r3, #28
 801901c:	2b09      	cmp	r3, #9
 801901e:	d80b      	bhi.n	8019038 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	0f1b      	lsrs	r3, r3, #28
 8019024:	b2da      	uxtb	r2, r3
 8019026:	7dfb      	ldrb	r3, [r7, #23]
 8019028:	005b      	lsls	r3, r3, #1
 801902a:	4619      	mov	r1, r3
 801902c:	68bb      	ldr	r3, [r7, #8]
 801902e:	440b      	add	r3, r1
 8019030:	3230      	adds	r2, #48	; 0x30
 8019032:	b2d2      	uxtb	r2, r2
 8019034:	701a      	strb	r2, [r3, #0]
 8019036:	e00a      	b.n	801904e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	0f1b      	lsrs	r3, r3, #28
 801903c:	b2da      	uxtb	r2, r3
 801903e:	7dfb      	ldrb	r3, [r7, #23]
 8019040:	005b      	lsls	r3, r3, #1
 8019042:	4619      	mov	r1, r3
 8019044:	68bb      	ldr	r3, [r7, #8]
 8019046:	440b      	add	r3, r1
 8019048:	3237      	adds	r2, #55	; 0x37
 801904a:	b2d2      	uxtb	r2, r2
 801904c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	011b      	lsls	r3, r3, #4
 8019052:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019054:	7dfb      	ldrb	r3, [r7, #23]
 8019056:	005b      	lsls	r3, r3, #1
 8019058:	3301      	adds	r3, #1
 801905a:	68ba      	ldr	r2, [r7, #8]
 801905c:	4413      	add	r3, r2
 801905e:	2200      	movs	r2, #0
 8019060:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019062:	7dfb      	ldrb	r3, [r7, #23]
 8019064:	3301      	adds	r3, #1
 8019066:	75fb      	strb	r3, [r7, #23]
 8019068:	7dfa      	ldrb	r2, [r7, #23]
 801906a:	79fb      	ldrb	r3, [r7, #7]
 801906c:	429a      	cmp	r2, r3
 801906e:	d3d3      	bcc.n	8019018 <IntToUnicode+0x18>
  }
}
 8019070:	bf00      	nop
 8019072:	bf00      	nop
 8019074:	371c      	adds	r7, #28
 8019076:	46bd      	mov	sp, r7
 8019078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907c:	4770      	bx	lr
	...

08019080 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b098      	sub	sp, #96	; 0x60
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019088:	f107 030c 	add.w	r3, r7, #12
 801908c:	2254      	movs	r2, #84	; 0x54
 801908e:	2100      	movs	r1, #0
 8019090:	4618      	mov	r0, r3
 8019092:	f000 fbb5 	bl	8019800 <memset>
  if(pcdHandle->Instance==USB)
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	4a15      	ldr	r2, [pc, #84]	; (80190f0 <HAL_PCD_MspInit+0x70>)
 801909c:	4293      	cmp	r3, r2
 801909e:	d122      	bne.n	80190e6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80190a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80190a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80190a6:	2300      	movs	r3, #0
 80190a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80190aa:	f107 030c 	add.w	r3, r7, #12
 80190ae:	4618      	mov	r0, r3
 80190b0:	f7fb f83c 	bl	801412c <HAL_RCCEx_PeriphCLKConfig>
 80190b4:	4603      	mov	r3, r0
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d001      	beq.n	80190be <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80190ba:	f7f7 feed 	bl	8010e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80190be:	4b0d      	ldr	r3, [pc, #52]	; (80190f4 <HAL_PCD_MspInit+0x74>)
 80190c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80190c2:	4a0c      	ldr	r2, [pc, #48]	; (80190f4 <HAL_PCD_MspInit+0x74>)
 80190c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80190c8:	6593      	str	r3, [r2, #88]	; 0x58
 80190ca:	4b0a      	ldr	r3, [pc, #40]	; (80190f4 <HAL_PCD_MspInit+0x74>)
 80190cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80190ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80190d2:	60bb      	str	r3, [r7, #8]
 80190d4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80190d6:	2200      	movs	r2, #0
 80190d8:	2100      	movs	r1, #0
 80190da:	2043      	movs	r0, #67	; 0x43
 80190dc:	f7f8 fa29 	bl	8011532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80190e0:	2043      	movs	r0, #67	; 0x43
 80190e2:	f7f8 fa42 	bl	801156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80190e6:	bf00      	nop
 80190e8:	3760      	adds	r7, #96	; 0x60
 80190ea:	46bd      	mov	sp, r7
 80190ec:	bd80      	pop	{r7, pc}
 80190ee:	bf00      	nop
 80190f0:	40006800 	.word	0x40006800
 80190f4:	40021000 	.word	0x40021000

080190f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b082      	sub	sp, #8
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 801910c:	4619      	mov	r1, r3
 801910e:	4610      	mov	r0, r2
 8019110:	f7fe fd46 	bl	8017ba0 <USBD_LL_SetupStage>
}
 8019114:	bf00      	nop
 8019116:	3708      	adds	r7, #8
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b082      	sub	sp, #8
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
 8019124:	460b      	mov	r3, r1
 8019126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 801912e:	78fa      	ldrb	r2, [r7, #3]
 8019130:	6879      	ldr	r1, [r7, #4]
 8019132:	4613      	mov	r3, r2
 8019134:	009b      	lsls	r3, r3, #2
 8019136:	4413      	add	r3, r2
 8019138:	00db      	lsls	r3, r3, #3
 801913a:	440b      	add	r3, r1
 801913c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8019140:	681a      	ldr	r2, [r3, #0]
 8019142:	78fb      	ldrb	r3, [r7, #3]
 8019144:	4619      	mov	r1, r3
 8019146:	f7fe fd80 	bl	8017c4a <USBD_LL_DataOutStage>
}
 801914a:	bf00      	nop
 801914c:	3708      	adds	r7, #8
 801914e:	46bd      	mov	sp, r7
 8019150:	bd80      	pop	{r7, pc}

08019152 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019152:	b580      	push	{r7, lr}
 8019154:	b082      	sub	sp, #8
 8019156:	af00      	add	r7, sp, #0
 8019158:	6078      	str	r0, [r7, #4]
 801915a:	460b      	mov	r3, r1
 801915c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8019164:	78fa      	ldrb	r2, [r7, #3]
 8019166:	6879      	ldr	r1, [r7, #4]
 8019168:	4613      	mov	r3, r2
 801916a:	009b      	lsls	r3, r3, #2
 801916c:	4413      	add	r3, r2
 801916e:	00db      	lsls	r3, r3, #3
 8019170:	440b      	add	r3, r1
 8019172:	3340      	adds	r3, #64	; 0x40
 8019174:	681a      	ldr	r2, [r3, #0]
 8019176:	78fb      	ldrb	r3, [r7, #3]
 8019178:	4619      	mov	r1, r3
 801917a:	f7fe fdc9 	bl	8017d10 <USBD_LL_DataInStage>
}
 801917e:	bf00      	nop
 8019180:	3708      	adds	r7, #8
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}

08019186 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019186:	b580      	push	{r7, lr}
 8019188:	b082      	sub	sp, #8
 801918a:	af00      	add	r7, sp, #0
 801918c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8019194:	4618      	mov	r0, r3
 8019196:	f7fe fedd 	bl	8017f54 <USBD_LL_SOF>
}
 801919a:	bf00      	nop
 801919c:	3708      	adds	r7, #8
 801919e:	46bd      	mov	sp, r7
 80191a0:	bd80      	pop	{r7, pc}

080191a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80191a2:	b580      	push	{r7, lr}
 80191a4:	b084      	sub	sp, #16
 80191a6:	af00      	add	r7, sp, #0
 80191a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80191aa:	2301      	movs	r3, #1
 80191ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	689b      	ldr	r3, [r3, #8]
 80191b2:	2b02      	cmp	r3, #2
 80191b4:	d001      	beq.n	80191ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80191b6:	f7f7 fe6f 	bl	8010e98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80191c0:	7bfa      	ldrb	r2, [r7, #15]
 80191c2:	4611      	mov	r1, r2
 80191c4:	4618      	mov	r0, r3
 80191c6:	f7fe fe87 	bl	8017ed8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80191d0:	4618      	mov	r0, r3
 80191d2:	f7fe fe33 	bl	8017e3c <USBD_LL_Reset>
}
 80191d6:	bf00      	nop
 80191d8:	3710      	adds	r7, #16
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd80      	pop	{r7, pc}
	...

080191e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b082      	sub	sp, #8
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80191ee:	4618      	mov	r0, r3
 80191f0:	f7fe fe82 	bl	8017ef8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	699b      	ldr	r3, [r3, #24]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d005      	beq.n	8019208 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80191fc:	4b04      	ldr	r3, [pc, #16]	; (8019210 <HAL_PCD_SuspendCallback+0x30>)
 80191fe:	691b      	ldr	r3, [r3, #16]
 8019200:	4a03      	ldr	r2, [pc, #12]	; (8019210 <HAL_PCD_SuspendCallback+0x30>)
 8019202:	f043 0306 	orr.w	r3, r3, #6
 8019206:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019208:	bf00      	nop
 801920a:	3708      	adds	r7, #8
 801920c:	46bd      	mov	sp, r7
 801920e:	bd80      	pop	{r7, pc}
 8019210:	e000ed00 	.word	0xe000ed00

08019214 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b082      	sub	sp, #8
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	699b      	ldr	r3, [r3, #24]
 8019220:	2b00      	cmp	r3, #0
 8019222:	d007      	beq.n	8019234 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019224:	4b08      	ldr	r3, [pc, #32]	; (8019248 <HAL_PCD_ResumeCallback+0x34>)
 8019226:	691b      	ldr	r3, [r3, #16]
 8019228:	4a07      	ldr	r2, [pc, #28]	; (8019248 <HAL_PCD_ResumeCallback+0x34>)
 801922a:	f023 0306 	bic.w	r3, r3, #6
 801922e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019230:	f000 fab6 	bl	80197a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801923a:	4618      	mov	r0, r3
 801923c:	f7fe fe72 	bl	8017f24 <USBD_LL_Resume>
}
 8019240:	bf00      	nop
 8019242:	3708      	adds	r7, #8
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}
 8019248:	e000ed00 	.word	0xe000ed00

0801924c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b082      	sub	sp, #8
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8019254:	f7fa f95a 	bl	801350c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8019258:	4a2b      	ldr	r2, [pc, #172]	; (8019308 <USBD_LL_Init+0xbc>)
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	4a29      	ldr	r2, [pc, #164]	; (8019308 <USBD_LL_Init+0xbc>)
 8019264:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8019268:	4b27      	ldr	r3, [pc, #156]	; (8019308 <USBD_LL_Init+0xbc>)
 801926a:	4a28      	ldr	r2, [pc, #160]	; (801930c <USBD_LL_Init+0xc0>)
 801926c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801926e:	4b26      	ldr	r3, [pc, #152]	; (8019308 <USBD_LL_Init+0xbc>)
 8019270:	2208      	movs	r2, #8
 8019272:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019274:	4b24      	ldr	r3, [pc, #144]	; (8019308 <USBD_LL_Init+0xbc>)
 8019276:	2202      	movs	r2, #2
 8019278:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801927a:	4b23      	ldr	r3, [pc, #140]	; (8019308 <USBD_LL_Init+0xbc>)
 801927c:	2202      	movs	r2, #2
 801927e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8019280:	4b21      	ldr	r3, [pc, #132]	; (8019308 <USBD_LL_Init+0xbc>)
 8019282:	2200      	movs	r2, #0
 8019284:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019286:	4b20      	ldr	r3, [pc, #128]	; (8019308 <USBD_LL_Init+0xbc>)
 8019288:	2200      	movs	r2, #0
 801928a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801928c:	4b1e      	ldr	r3, [pc, #120]	; (8019308 <USBD_LL_Init+0xbc>)
 801928e:	2200      	movs	r2, #0
 8019290:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8019292:	4b1d      	ldr	r3, [pc, #116]	; (8019308 <USBD_LL_Init+0xbc>)
 8019294:	2200      	movs	r2, #0
 8019296:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019298:	481b      	ldr	r0, [pc, #108]	; (8019308 <USBD_LL_Init+0xbc>)
 801929a:	f7f8 fb1d 	bl	80118d8 <HAL_PCD_Init>
 801929e:	4603      	mov	r3, r0
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d001      	beq.n	80192a8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80192a4:	f7f7 fdf8 	bl	8010e98 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80192ae:	2318      	movs	r3, #24
 80192b0:	2200      	movs	r2, #0
 80192b2:	2100      	movs	r1, #0
 80192b4:	f7fa f82d 	bl	8013312 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80192be:	2358      	movs	r3, #88	; 0x58
 80192c0:	2200      	movs	r2, #0
 80192c2:	2180      	movs	r1, #128	; 0x80
 80192c4:	f7fa f825 	bl	8013312 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80192ce:	23c0      	movs	r3, #192	; 0xc0
 80192d0:	2200      	movs	r2, #0
 80192d2:	2181      	movs	r1, #129	; 0x81
 80192d4:	f7fa f81d 	bl	8013312 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80192de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80192e2:	2200      	movs	r2, #0
 80192e4:	2101      	movs	r1, #1
 80192e6:	f7fa f814 	bl	8013312 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80192f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80192f4:	2200      	movs	r2, #0
 80192f6:	2182      	movs	r1, #130	; 0x82
 80192f8:	f7fa f80b 	bl	8013312 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80192fc:	2300      	movs	r3, #0
}
 80192fe:	4618      	mov	r0, r3
 8019300:	3708      	adds	r7, #8
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}
 8019306:	bf00      	nop
 8019308:	2000105c 	.word	0x2000105c
 801930c:	40006800 	.word	0x40006800

08019310 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b084      	sub	sp, #16
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019318:	2300      	movs	r3, #0
 801931a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801931c:	2300      	movs	r3, #0
 801931e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019326:	4618      	mov	r0, r3
 8019328:	f7f8 fbed 	bl	8011b06 <HAL_PCD_Start>
 801932c:	4603      	mov	r3, r0
 801932e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019330:	7bbb      	ldrb	r3, [r7, #14]
 8019332:	2b03      	cmp	r3, #3
 8019334:	d816      	bhi.n	8019364 <USBD_LL_Start+0x54>
 8019336:	a201      	add	r2, pc, #4	; (adr r2, 801933c <USBD_LL_Start+0x2c>)
 8019338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801933c:	0801934d 	.word	0x0801934d
 8019340:	08019353 	.word	0x08019353
 8019344:	08019359 	.word	0x08019359
 8019348:	0801935f 	.word	0x0801935f
    case HAL_OK :
      usb_status = USBD_OK;
 801934c:	2300      	movs	r3, #0
 801934e:	73fb      	strb	r3, [r7, #15]
    break;
 8019350:	e00b      	b.n	801936a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019352:	2303      	movs	r3, #3
 8019354:	73fb      	strb	r3, [r7, #15]
    break;
 8019356:	e008      	b.n	801936a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019358:	2301      	movs	r3, #1
 801935a:	73fb      	strb	r3, [r7, #15]
    break;
 801935c:	e005      	b.n	801936a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801935e:	2303      	movs	r3, #3
 8019360:	73fb      	strb	r3, [r7, #15]
    break;
 8019362:	e002      	b.n	801936a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8019364:	2303      	movs	r3, #3
 8019366:	73fb      	strb	r3, [r7, #15]
    break;
 8019368:	bf00      	nop
  }
  return usb_status;
 801936a:	7bfb      	ldrb	r3, [r7, #15]
}
 801936c:	4618      	mov	r0, r3
 801936e:	3710      	adds	r7, #16
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}

08019374 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b084      	sub	sp, #16
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	4608      	mov	r0, r1
 801937e:	4611      	mov	r1, r2
 8019380:	461a      	mov	r2, r3
 8019382:	4603      	mov	r3, r0
 8019384:	70fb      	strb	r3, [r7, #3]
 8019386:	460b      	mov	r3, r1
 8019388:	70bb      	strb	r3, [r7, #2]
 801938a:	4613      	mov	r3, r2
 801938c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801938e:	2300      	movs	r3, #0
 8019390:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019392:	2300      	movs	r3, #0
 8019394:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801939c:	78bb      	ldrb	r3, [r7, #2]
 801939e:	883a      	ldrh	r2, [r7, #0]
 80193a0:	78f9      	ldrb	r1, [r7, #3]
 80193a2:	f7f8 fd1e 	bl	8011de2 <HAL_PCD_EP_Open>
 80193a6:	4603      	mov	r3, r0
 80193a8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80193aa:	7bbb      	ldrb	r3, [r7, #14]
 80193ac:	2b03      	cmp	r3, #3
 80193ae:	d817      	bhi.n	80193e0 <USBD_LL_OpenEP+0x6c>
 80193b0:	a201      	add	r2, pc, #4	; (adr r2, 80193b8 <USBD_LL_OpenEP+0x44>)
 80193b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193b6:	bf00      	nop
 80193b8:	080193c9 	.word	0x080193c9
 80193bc:	080193cf 	.word	0x080193cf
 80193c0:	080193d5 	.word	0x080193d5
 80193c4:	080193db 	.word	0x080193db
    case HAL_OK :
      usb_status = USBD_OK;
 80193c8:	2300      	movs	r3, #0
 80193ca:	73fb      	strb	r3, [r7, #15]
    break;
 80193cc:	e00b      	b.n	80193e6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80193ce:	2303      	movs	r3, #3
 80193d0:	73fb      	strb	r3, [r7, #15]
    break;
 80193d2:	e008      	b.n	80193e6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80193d4:	2301      	movs	r3, #1
 80193d6:	73fb      	strb	r3, [r7, #15]
    break;
 80193d8:	e005      	b.n	80193e6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80193da:	2303      	movs	r3, #3
 80193dc:	73fb      	strb	r3, [r7, #15]
    break;
 80193de:	e002      	b.n	80193e6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80193e0:	2303      	movs	r3, #3
 80193e2:	73fb      	strb	r3, [r7, #15]
    break;
 80193e4:	bf00      	nop
  }
  return usb_status;
 80193e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80193e8:	4618      	mov	r0, r3
 80193ea:	3710      	adds	r7, #16
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}

080193f0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b084      	sub	sp, #16
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	6078      	str	r0, [r7, #4]
 80193f8:	460b      	mov	r3, r1
 80193fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193fc:	2300      	movs	r3, #0
 80193fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019400:	2300      	movs	r3, #0
 8019402:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801940a:	78fa      	ldrb	r2, [r7, #3]
 801940c:	4611      	mov	r1, r2
 801940e:	4618      	mov	r0, r3
 8019410:	f7f8 fd4f 	bl	8011eb2 <HAL_PCD_EP_Close>
 8019414:	4603      	mov	r3, r0
 8019416:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019418:	7bbb      	ldrb	r3, [r7, #14]
 801941a:	2b03      	cmp	r3, #3
 801941c:	d816      	bhi.n	801944c <USBD_LL_CloseEP+0x5c>
 801941e:	a201      	add	r2, pc, #4	; (adr r2, 8019424 <USBD_LL_CloseEP+0x34>)
 8019420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019424:	08019435 	.word	0x08019435
 8019428:	0801943b 	.word	0x0801943b
 801942c:	08019441 	.word	0x08019441
 8019430:	08019447 	.word	0x08019447
    case HAL_OK :
      usb_status = USBD_OK;
 8019434:	2300      	movs	r3, #0
 8019436:	73fb      	strb	r3, [r7, #15]
    break;
 8019438:	e00b      	b.n	8019452 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801943a:	2303      	movs	r3, #3
 801943c:	73fb      	strb	r3, [r7, #15]
    break;
 801943e:	e008      	b.n	8019452 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019440:	2301      	movs	r3, #1
 8019442:	73fb      	strb	r3, [r7, #15]
    break;
 8019444:	e005      	b.n	8019452 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019446:	2303      	movs	r3, #3
 8019448:	73fb      	strb	r3, [r7, #15]
    break;
 801944a:	e002      	b.n	8019452 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801944c:	2303      	movs	r3, #3
 801944e:	73fb      	strb	r3, [r7, #15]
    break;
 8019450:	bf00      	nop
  }
  return usb_status;
 8019452:	7bfb      	ldrb	r3, [r7, #15]
}
 8019454:	4618      	mov	r0, r3
 8019456:	3710      	adds	r7, #16
 8019458:	46bd      	mov	sp, r7
 801945a:	bd80      	pop	{r7, pc}

0801945c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b084      	sub	sp, #16
 8019460:	af00      	add	r7, sp, #0
 8019462:	6078      	str	r0, [r7, #4]
 8019464:	460b      	mov	r3, r1
 8019466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019468:	2300      	movs	r3, #0
 801946a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801946c:	2300      	movs	r3, #0
 801946e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019476:	78fa      	ldrb	r2, [r7, #3]
 8019478:	4611      	mov	r1, r2
 801947a:	4618      	mov	r0, r3
 801947c:	f7f8 fdfd 	bl	801207a <HAL_PCD_EP_SetStall>
 8019480:	4603      	mov	r3, r0
 8019482:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019484:	7bbb      	ldrb	r3, [r7, #14]
 8019486:	2b03      	cmp	r3, #3
 8019488:	d816      	bhi.n	80194b8 <USBD_LL_StallEP+0x5c>
 801948a:	a201      	add	r2, pc, #4	; (adr r2, 8019490 <USBD_LL_StallEP+0x34>)
 801948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019490:	080194a1 	.word	0x080194a1
 8019494:	080194a7 	.word	0x080194a7
 8019498:	080194ad 	.word	0x080194ad
 801949c:	080194b3 	.word	0x080194b3
    case HAL_OK :
      usb_status = USBD_OK;
 80194a0:	2300      	movs	r3, #0
 80194a2:	73fb      	strb	r3, [r7, #15]
    break;
 80194a4:	e00b      	b.n	80194be <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80194a6:	2303      	movs	r3, #3
 80194a8:	73fb      	strb	r3, [r7, #15]
    break;
 80194aa:	e008      	b.n	80194be <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80194ac:	2301      	movs	r3, #1
 80194ae:	73fb      	strb	r3, [r7, #15]
    break;
 80194b0:	e005      	b.n	80194be <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80194b2:	2303      	movs	r3, #3
 80194b4:	73fb      	strb	r3, [r7, #15]
    break;
 80194b6:	e002      	b.n	80194be <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80194b8:	2303      	movs	r3, #3
 80194ba:	73fb      	strb	r3, [r7, #15]
    break;
 80194bc:	bf00      	nop
  }
  return usb_status;
 80194be:	7bfb      	ldrb	r3, [r7, #15]
}
 80194c0:	4618      	mov	r0, r3
 80194c2:	3710      	adds	r7, #16
 80194c4:	46bd      	mov	sp, r7
 80194c6:	bd80      	pop	{r7, pc}

080194c8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b084      	sub	sp, #16
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	6078      	str	r0, [r7, #4]
 80194d0:	460b      	mov	r3, r1
 80194d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194d4:	2300      	movs	r3, #0
 80194d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194d8:	2300      	movs	r3, #0
 80194da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80194e2:	78fa      	ldrb	r2, [r7, #3]
 80194e4:	4611      	mov	r1, r2
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7f8 fe29 	bl	801213e <HAL_PCD_EP_ClrStall>
 80194ec:	4603      	mov	r3, r0
 80194ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80194f0:	7bbb      	ldrb	r3, [r7, #14]
 80194f2:	2b03      	cmp	r3, #3
 80194f4:	d816      	bhi.n	8019524 <USBD_LL_ClearStallEP+0x5c>
 80194f6:	a201      	add	r2, pc, #4	; (adr r2, 80194fc <USBD_LL_ClearStallEP+0x34>)
 80194f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194fc:	0801950d 	.word	0x0801950d
 8019500:	08019513 	.word	0x08019513
 8019504:	08019519 	.word	0x08019519
 8019508:	0801951f 	.word	0x0801951f
    case HAL_OK :
      usb_status = USBD_OK;
 801950c:	2300      	movs	r3, #0
 801950e:	73fb      	strb	r3, [r7, #15]
    break;
 8019510:	e00b      	b.n	801952a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019512:	2303      	movs	r3, #3
 8019514:	73fb      	strb	r3, [r7, #15]
    break;
 8019516:	e008      	b.n	801952a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019518:	2301      	movs	r3, #1
 801951a:	73fb      	strb	r3, [r7, #15]
    break;
 801951c:	e005      	b.n	801952a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801951e:	2303      	movs	r3, #3
 8019520:	73fb      	strb	r3, [r7, #15]
    break;
 8019522:	e002      	b.n	801952a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019524:	2303      	movs	r3, #3
 8019526:	73fb      	strb	r3, [r7, #15]
    break;
 8019528:	bf00      	nop
  }
  return usb_status;
 801952a:	7bfb      	ldrb	r3, [r7, #15]
}
 801952c:	4618      	mov	r0, r3
 801952e:	3710      	adds	r7, #16
 8019530:	46bd      	mov	sp, r7
 8019532:	bd80      	pop	{r7, pc}

08019534 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019534:	b480      	push	{r7}
 8019536:	b085      	sub	sp, #20
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
 801953c:	460b      	mov	r3, r1
 801953e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019546:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801954c:	2b00      	cmp	r3, #0
 801954e:	da0c      	bge.n	801956a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019550:	78fb      	ldrb	r3, [r7, #3]
 8019552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019556:	68f9      	ldr	r1, [r7, #12]
 8019558:	1c5a      	adds	r2, r3, #1
 801955a:	4613      	mov	r3, r2
 801955c:	009b      	lsls	r3, r3, #2
 801955e:	4413      	add	r3, r2
 8019560:	00db      	lsls	r3, r3, #3
 8019562:	440b      	add	r3, r1
 8019564:	3306      	adds	r3, #6
 8019566:	781b      	ldrb	r3, [r3, #0]
 8019568:	e00b      	b.n	8019582 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801956a:	78fb      	ldrb	r3, [r7, #3]
 801956c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019570:	68f9      	ldr	r1, [r7, #12]
 8019572:	4613      	mov	r3, r2
 8019574:	009b      	lsls	r3, r3, #2
 8019576:	4413      	add	r3, r2
 8019578:	00db      	lsls	r3, r3, #3
 801957a:	440b      	add	r3, r1
 801957c:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8019580:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019582:	4618      	mov	r0, r3
 8019584:	3714      	adds	r7, #20
 8019586:	46bd      	mov	sp, r7
 8019588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958c:	4770      	bx	lr
	...

08019590 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019590:	b580      	push	{r7, lr}
 8019592:	b084      	sub	sp, #16
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
 8019598:	460b      	mov	r3, r1
 801959a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801959c:	2300      	movs	r3, #0
 801959e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80195a0:	2300      	movs	r3, #0
 80195a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80195aa:	78fa      	ldrb	r2, [r7, #3]
 80195ac:	4611      	mov	r1, r2
 80195ae:	4618      	mov	r0, r3
 80195b0:	f7f8 fbf2 	bl	8011d98 <HAL_PCD_SetAddress>
 80195b4:	4603      	mov	r3, r0
 80195b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80195b8:	7bbb      	ldrb	r3, [r7, #14]
 80195ba:	2b03      	cmp	r3, #3
 80195bc:	d816      	bhi.n	80195ec <USBD_LL_SetUSBAddress+0x5c>
 80195be:	a201      	add	r2, pc, #4	; (adr r2, 80195c4 <USBD_LL_SetUSBAddress+0x34>)
 80195c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195c4:	080195d5 	.word	0x080195d5
 80195c8:	080195db 	.word	0x080195db
 80195cc:	080195e1 	.word	0x080195e1
 80195d0:	080195e7 	.word	0x080195e7
    case HAL_OK :
      usb_status = USBD_OK;
 80195d4:	2300      	movs	r3, #0
 80195d6:	73fb      	strb	r3, [r7, #15]
    break;
 80195d8:	e00b      	b.n	80195f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80195da:	2303      	movs	r3, #3
 80195dc:	73fb      	strb	r3, [r7, #15]
    break;
 80195de:	e008      	b.n	80195f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80195e0:	2301      	movs	r3, #1
 80195e2:	73fb      	strb	r3, [r7, #15]
    break;
 80195e4:	e005      	b.n	80195f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80195e6:	2303      	movs	r3, #3
 80195e8:	73fb      	strb	r3, [r7, #15]
    break;
 80195ea:	e002      	b.n	80195f2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80195ec:	2303      	movs	r3, #3
 80195ee:	73fb      	strb	r3, [r7, #15]
    break;
 80195f0:	bf00      	nop
  }
  return usb_status;
 80195f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80195f4:	4618      	mov	r0, r3
 80195f6:	3710      	adds	r7, #16
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}

080195fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b086      	sub	sp, #24
 8019600:	af00      	add	r7, sp, #0
 8019602:	60f8      	str	r0, [r7, #12]
 8019604:	607a      	str	r2, [r7, #4]
 8019606:	603b      	str	r3, [r7, #0]
 8019608:	460b      	mov	r3, r1
 801960a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801960c:	2300      	movs	r3, #0
 801960e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019610:	2300      	movs	r3, #0
 8019612:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801961a:	7af9      	ldrb	r1, [r7, #11]
 801961c:	683b      	ldr	r3, [r7, #0]
 801961e:	687a      	ldr	r2, [r7, #4]
 8019620:	f7f8 fce7 	bl	8011ff2 <HAL_PCD_EP_Transmit>
 8019624:	4603      	mov	r3, r0
 8019626:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019628:	7dbb      	ldrb	r3, [r7, #22]
 801962a:	2b03      	cmp	r3, #3
 801962c:	d816      	bhi.n	801965c <USBD_LL_Transmit+0x60>
 801962e:	a201      	add	r2, pc, #4	; (adr r2, 8019634 <USBD_LL_Transmit+0x38>)
 8019630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019634:	08019645 	.word	0x08019645
 8019638:	0801964b 	.word	0x0801964b
 801963c:	08019651 	.word	0x08019651
 8019640:	08019657 	.word	0x08019657
    case HAL_OK :
      usb_status = USBD_OK;
 8019644:	2300      	movs	r3, #0
 8019646:	75fb      	strb	r3, [r7, #23]
    break;
 8019648:	e00b      	b.n	8019662 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801964a:	2303      	movs	r3, #3
 801964c:	75fb      	strb	r3, [r7, #23]
    break;
 801964e:	e008      	b.n	8019662 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019650:	2301      	movs	r3, #1
 8019652:	75fb      	strb	r3, [r7, #23]
    break;
 8019654:	e005      	b.n	8019662 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019656:	2303      	movs	r3, #3
 8019658:	75fb      	strb	r3, [r7, #23]
    break;
 801965a:	e002      	b.n	8019662 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801965c:	2303      	movs	r3, #3
 801965e:	75fb      	strb	r3, [r7, #23]
    break;
 8019660:	bf00      	nop
  }
  return usb_status;
 8019662:	7dfb      	ldrb	r3, [r7, #23]
}
 8019664:	4618      	mov	r0, r3
 8019666:	3718      	adds	r7, #24
 8019668:	46bd      	mov	sp, r7
 801966a:	bd80      	pop	{r7, pc}

0801966c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b086      	sub	sp, #24
 8019670:	af00      	add	r7, sp, #0
 8019672:	60f8      	str	r0, [r7, #12]
 8019674:	607a      	str	r2, [r7, #4]
 8019676:	603b      	str	r3, [r7, #0]
 8019678:	460b      	mov	r3, r1
 801967a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801967c:	2300      	movs	r3, #0
 801967e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019680:	2300      	movs	r3, #0
 8019682:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801968a:	7af9      	ldrb	r1, [r7, #11]
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	687a      	ldr	r2, [r7, #4]
 8019690:	f7f8 fc59 	bl	8011f46 <HAL_PCD_EP_Receive>
 8019694:	4603      	mov	r3, r0
 8019696:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019698:	7dbb      	ldrb	r3, [r7, #22]
 801969a:	2b03      	cmp	r3, #3
 801969c:	d816      	bhi.n	80196cc <USBD_LL_PrepareReceive+0x60>
 801969e:	a201      	add	r2, pc, #4	; (adr r2, 80196a4 <USBD_LL_PrepareReceive+0x38>)
 80196a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196a4:	080196b5 	.word	0x080196b5
 80196a8:	080196bb 	.word	0x080196bb
 80196ac:	080196c1 	.word	0x080196c1
 80196b0:	080196c7 	.word	0x080196c7
    case HAL_OK :
      usb_status = USBD_OK;
 80196b4:	2300      	movs	r3, #0
 80196b6:	75fb      	strb	r3, [r7, #23]
    break;
 80196b8:	e00b      	b.n	80196d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80196ba:	2303      	movs	r3, #3
 80196bc:	75fb      	strb	r3, [r7, #23]
    break;
 80196be:	e008      	b.n	80196d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80196c0:	2301      	movs	r3, #1
 80196c2:	75fb      	strb	r3, [r7, #23]
    break;
 80196c4:	e005      	b.n	80196d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80196c6:	2303      	movs	r3, #3
 80196c8:	75fb      	strb	r3, [r7, #23]
    break;
 80196ca:	e002      	b.n	80196d2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80196cc:	2303      	movs	r3, #3
 80196ce:	75fb      	strb	r3, [r7, #23]
    break;
 80196d0:	bf00      	nop
  }
  return usb_status;
 80196d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80196d4:	4618      	mov	r0, r3
 80196d6:	3718      	adds	r7, #24
 80196d8:	46bd      	mov	sp, r7
 80196da:	bd80      	pop	{r7, pc}

080196dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80196dc:	b580      	push	{r7, lr}
 80196de:	b082      	sub	sp, #8
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	6078      	str	r0, [r7, #4]
 80196e4:	460b      	mov	r3, r1
 80196e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80196ee:	78fa      	ldrb	r2, [r7, #3]
 80196f0:	4611      	mov	r1, r2
 80196f2:	4618      	mov	r0, r3
 80196f4:	f7f8 fc65 	bl	8011fc2 <HAL_PCD_EP_GetRxCount>
 80196f8:	4603      	mov	r3, r0
}
 80196fa:	4618      	mov	r0, r3
 80196fc:	3708      	adds	r7, #8
 80196fe:	46bd      	mov	sp, r7
 8019700:	bd80      	pop	{r7, pc}
	...

08019704 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019704:	b580      	push	{r7, lr}
 8019706:	b082      	sub	sp, #8
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
 801970c:	460b      	mov	r3, r1
 801970e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019710:	78fb      	ldrb	r3, [r7, #3]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d002      	beq.n	801971c <HAL_PCDEx_LPM_Callback+0x18>
 8019716:	2b01      	cmp	r3, #1
 8019718:	d013      	beq.n	8019742 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801971a:	e023      	b.n	8019764 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	699b      	ldr	r3, [r3, #24]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d007      	beq.n	8019734 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019724:	f000 f83c 	bl	80197a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019728:	4b10      	ldr	r3, [pc, #64]	; (801976c <HAL_PCDEx_LPM_Callback+0x68>)
 801972a:	691b      	ldr	r3, [r3, #16]
 801972c:	4a0f      	ldr	r2, [pc, #60]	; (801976c <HAL_PCDEx_LPM_Callback+0x68>)
 801972e:	f023 0306 	bic.w	r3, r3, #6
 8019732:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801973a:	4618      	mov	r0, r3
 801973c:	f7fe fbf2 	bl	8017f24 <USBD_LL_Resume>
    break;
 8019740:	e010      	b.n	8019764 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8019748:	4618      	mov	r0, r3
 801974a:	f7fe fbd5 	bl	8017ef8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	699b      	ldr	r3, [r3, #24]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d005      	beq.n	8019762 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019756:	4b05      	ldr	r3, [pc, #20]	; (801976c <HAL_PCDEx_LPM_Callback+0x68>)
 8019758:	691b      	ldr	r3, [r3, #16]
 801975a:	4a04      	ldr	r2, [pc, #16]	; (801976c <HAL_PCDEx_LPM_Callback+0x68>)
 801975c:	f043 0306 	orr.w	r3, r3, #6
 8019760:	6113      	str	r3, [r2, #16]
    break;
 8019762:	bf00      	nop
}
 8019764:	bf00      	nop
 8019766:	3708      	adds	r7, #8
 8019768:	46bd      	mov	sp, r7
 801976a:	bd80      	pop	{r7, pc}
 801976c:	e000ed00 	.word	0xe000ed00

08019770 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019770:	b480      	push	{r7}
 8019772:	b083      	sub	sp, #12
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019778:	4b03      	ldr	r3, [pc, #12]	; (8019788 <USBD_static_malloc+0x18>)
}
 801977a:	4618      	mov	r0, r3
 801977c:	370c      	adds	r7, #12
 801977e:	46bd      	mov	sp, r7
 8019780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019784:	4770      	bx	lr
 8019786:	bf00      	nop
 8019788:	20001358 	.word	0x20001358

0801978c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801978c:	b480      	push	{r7}
 801978e:	b083      	sub	sp, #12
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]

}
 8019794:	bf00      	nop
 8019796:	370c      	adds	r7, #12
 8019798:	46bd      	mov	sp, r7
 801979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979e:	4770      	bx	lr

080197a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80197a4:	f7f7 fa58 	bl	8010c58 <SystemClock_Config>
}
 80197a8:	bf00      	nop
 80197aa:	bd80      	pop	{r7, pc}

080197ac <__errno>:
 80197ac:	4b01      	ldr	r3, [pc, #4]	; (80197b4 <__errno+0x8>)
 80197ae:	6818      	ldr	r0, [r3, #0]
 80197b0:	4770      	bx	lr
 80197b2:	bf00      	nop
 80197b4:	20000190 	.word	0x20000190

080197b8 <__libc_init_array>:
 80197b8:	b570      	push	{r4, r5, r6, lr}
 80197ba:	4d0d      	ldr	r5, [pc, #52]	; (80197f0 <__libc_init_array+0x38>)
 80197bc:	4c0d      	ldr	r4, [pc, #52]	; (80197f4 <__libc_init_array+0x3c>)
 80197be:	1b64      	subs	r4, r4, r5
 80197c0:	10a4      	asrs	r4, r4, #2
 80197c2:	2600      	movs	r6, #0
 80197c4:	42a6      	cmp	r6, r4
 80197c6:	d109      	bne.n	80197dc <__libc_init_array+0x24>
 80197c8:	4d0b      	ldr	r5, [pc, #44]	; (80197f8 <__libc_init_array+0x40>)
 80197ca:	4c0c      	ldr	r4, [pc, #48]	; (80197fc <__libc_init_array+0x44>)
 80197cc:	f002 fd38 	bl	801c240 <_init>
 80197d0:	1b64      	subs	r4, r4, r5
 80197d2:	10a4      	asrs	r4, r4, #2
 80197d4:	2600      	movs	r6, #0
 80197d6:	42a6      	cmp	r6, r4
 80197d8:	d105      	bne.n	80197e6 <__libc_init_array+0x2e>
 80197da:	bd70      	pop	{r4, r5, r6, pc}
 80197dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80197e0:	4798      	blx	r3
 80197e2:	3601      	adds	r6, #1
 80197e4:	e7ee      	b.n	80197c4 <__libc_init_array+0xc>
 80197e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80197ea:	4798      	blx	r3
 80197ec:	3601      	adds	r6, #1
 80197ee:	e7f2      	b.n	80197d6 <__libc_init_array+0x1e>
 80197f0:	0801c6bc 	.word	0x0801c6bc
 80197f4:	0801c6bc 	.word	0x0801c6bc
 80197f8:	0801c6bc 	.word	0x0801c6bc
 80197fc:	0801c6c0 	.word	0x0801c6c0

08019800 <memset>:
 8019800:	4402      	add	r2, r0
 8019802:	4603      	mov	r3, r0
 8019804:	4293      	cmp	r3, r2
 8019806:	d100      	bne.n	801980a <memset+0xa>
 8019808:	4770      	bx	lr
 801980a:	f803 1b01 	strb.w	r1, [r3], #1
 801980e:	e7f9      	b.n	8019804 <memset+0x4>

08019810 <__cvt>:
 8019810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019814:	ec55 4b10 	vmov	r4, r5, d0
 8019818:	2d00      	cmp	r5, #0
 801981a:	460e      	mov	r6, r1
 801981c:	4619      	mov	r1, r3
 801981e:	462b      	mov	r3, r5
 8019820:	bfbb      	ittet	lt
 8019822:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019826:	461d      	movlt	r5, r3
 8019828:	2300      	movge	r3, #0
 801982a:	232d      	movlt	r3, #45	; 0x2d
 801982c:	700b      	strb	r3, [r1, #0]
 801982e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019830:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019834:	4691      	mov	r9, r2
 8019836:	f023 0820 	bic.w	r8, r3, #32
 801983a:	bfbc      	itt	lt
 801983c:	4622      	movlt	r2, r4
 801983e:	4614      	movlt	r4, r2
 8019840:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019844:	d005      	beq.n	8019852 <__cvt+0x42>
 8019846:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801984a:	d100      	bne.n	801984e <__cvt+0x3e>
 801984c:	3601      	adds	r6, #1
 801984e:	2102      	movs	r1, #2
 8019850:	e000      	b.n	8019854 <__cvt+0x44>
 8019852:	2103      	movs	r1, #3
 8019854:	ab03      	add	r3, sp, #12
 8019856:	9301      	str	r3, [sp, #4]
 8019858:	ab02      	add	r3, sp, #8
 801985a:	9300      	str	r3, [sp, #0]
 801985c:	ec45 4b10 	vmov	d0, r4, r5
 8019860:	4653      	mov	r3, sl
 8019862:	4632      	mov	r2, r6
 8019864:	f000 fccc 	bl	801a200 <_dtoa_r>
 8019868:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801986c:	4607      	mov	r7, r0
 801986e:	d102      	bne.n	8019876 <__cvt+0x66>
 8019870:	f019 0f01 	tst.w	r9, #1
 8019874:	d022      	beq.n	80198bc <__cvt+0xac>
 8019876:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801987a:	eb07 0906 	add.w	r9, r7, r6
 801987e:	d110      	bne.n	80198a2 <__cvt+0x92>
 8019880:	783b      	ldrb	r3, [r7, #0]
 8019882:	2b30      	cmp	r3, #48	; 0x30
 8019884:	d10a      	bne.n	801989c <__cvt+0x8c>
 8019886:	2200      	movs	r2, #0
 8019888:	2300      	movs	r3, #0
 801988a:	4620      	mov	r0, r4
 801988c:	4629      	mov	r1, r5
 801988e:	f7f7 f91b 	bl	8010ac8 <__aeabi_dcmpeq>
 8019892:	b918      	cbnz	r0, 801989c <__cvt+0x8c>
 8019894:	f1c6 0601 	rsb	r6, r6, #1
 8019898:	f8ca 6000 	str.w	r6, [sl]
 801989c:	f8da 3000 	ldr.w	r3, [sl]
 80198a0:	4499      	add	r9, r3
 80198a2:	2200      	movs	r2, #0
 80198a4:	2300      	movs	r3, #0
 80198a6:	4620      	mov	r0, r4
 80198a8:	4629      	mov	r1, r5
 80198aa:	f7f7 f90d 	bl	8010ac8 <__aeabi_dcmpeq>
 80198ae:	b108      	cbz	r0, 80198b4 <__cvt+0xa4>
 80198b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80198b4:	2230      	movs	r2, #48	; 0x30
 80198b6:	9b03      	ldr	r3, [sp, #12]
 80198b8:	454b      	cmp	r3, r9
 80198ba:	d307      	bcc.n	80198cc <__cvt+0xbc>
 80198bc:	9b03      	ldr	r3, [sp, #12]
 80198be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80198c0:	1bdb      	subs	r3, r3, r7
 80198c2:	4638      	mov	r0, r7
 80198c4:	6013      	str	r3, [r2, #0]
 80198c6:	b004      	add	sp, #16
 80198c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198cc:	1c59      	adds	r1, r3, #1
 80198ce:	9103      	str	r1, [sp, #12]
 80198d0:	701a      	strb	r2, [r3, #0]
 80198d2:	e7f0      	b.n	80198b6 <__cvt+0xa6>

080198d4 <__exponent>:
 80198d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80198d6:	4603      	mov	r3, r0
 80198d8:	2900      	cmp	r1, #0
 80198da:	bfb8      	it	lt
 80198dc:	4249      	neglt	r1, r1
 80198de:	f803 2b02 	strb.w	r2, [r3], #2
 80198e2:	bfb4      	ite	lt
 80198e4:	222d      	movlt	r2, #45	; 0x2d
 80198e6:	222b      	movge	r2, #43	; 0x2b
 80198e8:	2909      	cmp	r1, #9
 80198ea:	7042      	strb	r2, [r0, #1]
 80198ec:	dd2a      	ble.n	8019944 <__exponent+0x70>
 80198ee:	f10d 0407 	add.w	r4, sp, #7
 80198f2:	46a4      	mov	ip, r4
 80198f4:	270a      	movs	r7, #10
 80198f6:	46a6      	mov	lr, r4
 80198f8:	460a      	mov	r2, r1
 80198fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80198fe:	fb07 1516 	mls	r5, r7, r6, r1
 8019902:	3530      	adds	r5, #48	; 0x30
 8019904:	2a63      	cmp	r2, #99	; 0x63
 8019906:	f104 34ff 	add.w	r4, r4, #4294967295
 801990a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801990e:	4631      	mov	r1, r6
 8019910:	dcf1      	bgt.n	80198f6 <__exponent+0x22>
 8019912:	3130      	adds	r1, #48	; 0x30
 8019914:	f1ae 0502 	sub.w	r5, lr, #2
 8019918:	f804 1c01 	strb.w	r1, [r4, #-1]
 801991c:	1c44      	adds	r4, r0, #1
 801991e:	4629      	mov	r1, r5
 8019920:	4561      	cmp	r1, ip
 8019922:	d30a      	bcc.n	801993a <__exponent+0x66>
 8019924:	f10d 0209 	add.w	r2, sp, #9
 8019928:	eba2 020e 	sub.w	r2, r2, lr
 801992c:	4565      	cmp	r5, ip
 801992e:	bf88      	it	hi
 8019930:	2200      	movhi	r2, #0
 8019932:	4413      	add	r3, r2
 8019934:	1a18      	subs	r0, r3, r0
 8019936:	b003      	add	sp, #12
 8019938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801993a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801993e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019942:	e7ed      	b.n	8019920 <__exponent+0x4c>
 8019944:	2330      	movs	r3, #48	; 0x30
 8019946:	3130      	adds	r1, #48	; 0x30
 8019948:	7083      	strb	r3, [r0, #2]
 801994a:	70c1      	strb	r1, [r0, #3]
 801994c:	1d03      	adds	r3, r0, #4
 801994e:	e7f1      	b.n	8019934 <__exponent+0x60>

08019950 <_printf_float>:
 8019950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019954:	ed2d 8b02 	vpush	{d8}
 8019958:	b08d      	sub	sp, #52	; 0x34
 801995a:	460c      	mov	r4, r1
 801995c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019960:	4616      	mov	r6, r2
 8019962:	461f      	mov	r7, r3
 8019964:	4605      	mov	r5, r0
 8019966:	f001 fa39 	bl	801addc <_localeconv_r>
 801996a:	f8d0 a000 	ldr.w	sl, [r0]
 801996e:	4650      	mov	r0, sl
 8019970:	f7f6 fc2e 	bl	80101d0 <strlen>
 8019974:	2300      	movs	r3, #0
 8019976:	930a      	str	r3, [sp, #40]	; 0x28
 8019978:	6823      	ldr	r3, [r4, #0]
 801997a:	9305      	str	r3, [sp, #20]
 801997c:	f8d8 3000 	ldr.w	r3, [r8]
 8019980:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019984:	3307      	adds	r3, #7
 8019986:	f023 0307 	bic.w	r3, r3, #7
 801998a:	f103 0208 	add.w	r2, r3, #8
 801998e:	f8c8 2000 	str.w	r2, [r8]
 8019992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019996:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801999a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801999e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80199a2:	9307      	str	r3, [sp, #28]
 80199a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80199a8:	ee08 0a10 	vmov	s16, r0
 80199ac:	4b9f      	ldr	r3, [pc, #636]	; (8019c2c <_printf_float+0x2dc>)
 80199ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80199b2:	f04f 32ff 	mov.w	r2, #4294967295
 80199b6:	f7f7 f8b9 	bl	8010b2c <__aeabi_dcmpun>
 80199ba:	bb88      	cbnz	r0, 8019a20 <_printf_float+0xd0>
 80199bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80199c0:	4b9a      	ldr	r3, [pc, #616]	; (8019c2c <_printf_float+0x2dc>)
 80199c2:	f04f 32ff 	mov.w	r2, #4294967295
 80199c6:	f7f7 f893 	bl	8010af0 <__aeabi_dcmple>
 80199ca:	bb48      	cbnz	r0, 8019a20 <_printf_float+0xd0>
 80199cc:	2200      	movs	r2, #0
 80199ce:	2300      	movs	r3, #0
 80199d0:	4640      	mov	r0, r8
 80199d2:	4649      	mov	r1, r9
 80199d4:	f7f7 f882 	bl	8010adc <__aeabi_dcmplt>
 80199d8:	b110      	cbz	r0, 80199e0 <_printf_float+0x90>
 80199da:	232d      	movs	r3, #45	; 0x2d
 80199dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80199e0:	4b93      	ldr	r3, [pc, #588]	; (8019c30 <_printf_float+0x2e0>)
 80199e2:	4894      	ldr	r0, [pc, #592]	; (8019c34 <_printf_float+0x2e4>)
 80199e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80199e8:	bf94      	ite	ls
 80199ea:	4698      	movls	r8, r3
 80199ec:	4680      	movhi	r8, r0
 80199ee:	2303      	movs	r3, #3
 80199f0:	6123      	str	r3, [r4, #16]
 80199f2:	9b05      	ldr	r3, [sp, #20]
 80199f4:	f023 0204 	bic.w	r2, r3, #4
 80199f8:	6022      	str	r2, [r4, #0]
 80199fa:	f04f 0900 	mov.w	r9, #0
 80199fe:	9700      	str	r7, [sp, #0]
 8019a00:	4633      	mov	r3, r6
 8019a02:	aa0b      	add	r2, sp, #44	; 0x2c
 8019a04:	4621      	mov	r1, r4
 8019a06:	4628      	mov	r0, r5
 8019a08:	f000 f9d8 	bl	8019dbc <_printf_common>
 8019a0c:	3001      	adds	r0, #1
 8019a0e:	f040 8090 	bne.w	8019b32 <_printf_float+0x1e2>
 8019a12:	f04f 30ff 	mov.w	r0, #4294967295
 8019a16:	b00d      	add	sp, #52	; 0x34
 8019a18:	ecbd 8b02 	vpop	{d8}
 8019a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a20:	4642      	mov	r2, r8
 8019a22:	464b      	mov	r3, r9
 8019a24:	4640      	mov	r0, r8
 8019a26:	4649      	mov	r1, r9
 8019a28:	f7f7 f880 	bl	8010b2c <__aeabi_dcmpun>
 8019a2c:	b140      	cbz	r0, 8019a40 <_printf_float+0xf0>
 8019a2e:	464b      	mov	r3, r9
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	bfbc      	itt	lt
 8019a34:	232d      	movlt	r3, #45	; 0x2d
 8019a36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019a3a:	487f      	ldr	r0, [pc, #508]	; (8019c38 <_printf_float+0x2e8>)
 8019a3c:	4b7f      	ldr	r3, [pc, #508]	; (8019c3c <_printf_float+0x2ec>)
 8019a3e:	e7d1      	b.n	80199e4 <_printf_float+0x94>
 8019a40:	6863      	ldr	r3, [r4, #4]
 8019a42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019a46:	9206      	str	r2, [sp, #24]
 8019a48:	1c5a      	adds	r2, r3, #1
 8019a4a:	d13f      	bne.n	8019acc <_printf_float+0x17c>
 8019a4c:	2306      	movs	r3, #6
 8019a4e:	6063      	str	r3, [r4, #4]
 8019a50:	9b05      	ldr	r3, [sp, #20]
 8019a52:	6861      	ldr	r1, [r4, #4]
 8019a54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019a58:	2300      	movs	r3, #0
 8019a5a:	9303      	str	r3, [sp, #12]
 8019a5c:	ab0a      	add	r3, sp, #40	; 0x28
 8019a5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019a62:	ab09      	add	r3, sp, #36	; 0x24
 8019a64:	ec49 8b10 	vmov	d0, r8, r9
 8019a68:	9300      	str	r3, [sp, #0]
 8019a6a:	6022      	str	r2, [r4, #0]
 8019a6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019a70:	4628      	mov	r0, r5
 8019a72:	f7ff fecd 	bl	8019810 <__cvt>
 8019a76:	9b06      	ldr	r3, [sp, #24]
 8019a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019a7a:	2b47      	cmp	r3, #71	; 0x47
 8019a7c:	4680      	mov	r8, r0
 8019a7e:	d108      	bne.n	8019a92 <_printf_float+0x142>
 8019a80:	1cc8      	adds	r0, r1, #3
 8019a82:	db02      	blt.n	8019a8a <_printf_float+0x13a>
 8019a84:	6863      	ldr	r3, [r4, #4]
 8019a86:	4299      	cmp	r1, r3
 8019a88:	dd41      	ble.n	8019b0e <_printf_float+0x1be>
 8019a8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8019a8e:	fa5f fb8b 	uxtb.w	fp, fp
 8019a92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019a96:	d820      	bhi.n	8019ada <_printf_float+0x18a>
 8019a98:	3901      	subs	r1, #1
 8019a9a:	465a      	mov	r2, fp
 8019a9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019aa0:	9109      	str	r1, [sp, #36]	; 0x24
 8019aa2:	f7ff ff17 	bl	80198d4 <__exponent>
 8019aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019aa8:	1813      	adds	r3, r2, r0
 8019aaa:	2a01      	cmp	r2, #1
 8019aac:	4681      	mov	r9, r0
 8019aae:	6123      	str	r3, [r4, #16]
 8019ab0:	dc02      	bgt.n	8019ab8 <_printf_float+0x168>
 8019ab2:	6822      	ldr	r2, [r4, #0]
 8019ab4:	07d2      	lsls	r2, r2, #31
 8019ab6:	d501      	bpl.n	8019abc <_printf_float+0x16c>
 8019ab8:	3301      	adds	r3, #1
 8019aba:	6123      	str	r3, [r4, #16]
 8019abc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d09c      	beq.n	80199fe <_printf_float+0xae>
 8019ac4:	232d      	movs	r3, #45	; 0x2d
 8019ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019aca:	e798      	b.n	80199fe <_printf_float+0xae>
 8019acc:	9a06      	ldr	r2, [sp, #24]
 8019ace:	2a47      	cmp	r2, #71	; 0x47
 8019ad0:	d1be      	bne.n	8019a50 <_printf_float+0x100>
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d1bc      	bne.n	8019a50 <_printf_float+0x100>
 8019ad6:	2301      	movs	r3, #1
 8019ad8:	e7b9      	b.n	8019a4e <_printf_float+0xfe>
 8019ada:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019ade:	d118      	bne.n	8019b12 <_printf_float+0x1c2>
 8019ae0:	2900      	cmp	r1, #0
 8019ae2:	6863      	ldr	r3, [r4, #4]
 8019ae4:	dd0b      	ble.n	8019afe <_printf_float+0x1ae>
 8019ae6:	6121      	str	r1, [r4, #16]
 8019ae8:	b913      	cbnz	r3, 8019af0 <_printf_float+0x1a0>
 8019aea:	6822      	ldr	r2, [r4, #0]
 8019aec:	07d0      	lsls	r0, r2, #31
 8019aee:	d502      	bpl.n	8019af6 <_printf_float+0x1a6>
 8019af0:	3301      	adds	r3, #1
 8019af2:	440b      	add	r3, r1
 8019af4:	6123      	str	r3, [r4, #16]
 8019af6:	65a1      	str	r1, [r4, #88]	; 0x58
 8019af8:	f04f 0900 	mov.w	r9, #0
 8019afc:	e7de      	b.n	8019abc <_printf_float+0x16c>
 8019afe:	b913      	cbnz	r3, 8019b06 <_printf_float+0x1b6>
 8019b00:	6822      	ldr	r2, [r4, #0]
 8019b02:	07d2      	lsls	r2, r2, #31
 8019b04:	d501      	bpl.n	8019b0a <_printf_float+0x1ba>
 8019b06:	3302      	adds	r3, #2
 8019b08:	e7f4      	b.n	8019af4 <_printf_float+0x1a4>
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	e7f2      	b.n	8019af4 <_printf_float+0x1a4>
 8019b0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b14:	4299      	cmp	r1, r3
 8019b16:	db05      	blt.n	8019b24 <_printf_float+0x1d4>
 8019b18:	6823      	ldr	r3, [r4, #0]
 8019b1a:	6121      	str	r1, [r4, #16]
 8019b1c:	07d8      	lsls	r0, r3, #31
 8019b1e:	d5ea      	bpl.n	8019af6 <_printf_float+0x1a6>
 8019b20:	1c4b      	adds	r3, r1, #1
 8019b22:	e7e7      	b.n	8019af4 <_printf_float+0x1a4>
 8019b24:	2900      	cmp	r1, #0
 8019b26:	bfd4      	ite	le
 8019b28:	f1c1 0202 	rsble	r2, r1, #2
 8019b2c:	2201      	movgt	r2, #1
 8019b2e:	4413      	add	r3, r2
 8019b30:	e7e0      	b.n	8019af4 <_printf_float+0x1a4>
 8019b32:	6823      	ldr	r3, [r4, #0]
 8019b34:	055a      	lsls	r2, r3, #21
 8019b36:	d407      	bmi.n	8019b48 <_printf_float+0x1f8>
 8019b38:	6923      	ldr	r3, [r4, #16]
 8019b3a:	4642      	mov	r2, r8
 8019b3c:	4631      	mov	r1, r6
 8019b3e:	4628      	mov	r0, r5
 8019b40:	47b8      	blx	r7
 8019b42:	3001      	adds	r0, #1
 8019b44:	d12c      	bne.n	8019ba0 <_printf_float+0x250>
 8019b46:	e764      	b.n	8019a12 <_printf_float+0xc2>
 8019b48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019b4c:	f240 80e0 	bls.w	8019d10 <_printf_float+0x3c0>
 8019b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019b54:	2200      	movs	r2, #0
 8019b56:	2300      	movs	r3, #0
 8019b58:	f7f6 ffb6 	bl	8010ac8 <__aeabi_dcmpeq>
 8019b5c:	2800      	cmp	r0, #0
 8019b5e:	d034      	beq.n	8019bca <_printf_float+0x27a>
 8019b60:	4a37      	ldr	r2, [pc, #220]	; (8019c40 <_printf_float+0x2f0>)
 8019b62:	2301      	movs	r3, #1
 8019b64:	4631      	mov	r1, r6
 8019b66:	4628      	mov	r0, r5
 8019b68:	47b8      	blx	r7
 8019b6a:	3001      	adds	r0, #1
 8019b6c:	f43f af51 	beq.w	8019a12 <_printf_float+0xc2>
 8019b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019b74:	429a      	cmp	r2, r3
 8019b76:	db02      	blt.n	8019b7e <_printf_float+0x22e>
 8019b78:	6823      	ldr	r3, [r4, #0]
 8019b7a:	07d8      	lsls	r0, r3, #31
 8019b7c:	d510      	bpl.n	8019ba0 <_printf_float+0x250>
 8019b7e:	ee18 3a10 	vmov	r3, s16
 8019b82:	4652      	mov	r2, sl
 8019b84:	4631      	mov	r1, r6
 8019b86:	4628      	mov	r0, r5
 8019b88:	47b8      	blx	r7
 8019b8a:	3001      	adds	r0, #1
 8019b8c:	f43f af41 	beq.w	8019a12 <_printf_float+0xc2>
 8019b90:	f04f 0800 	mov.w	r8, #0
 8019b94:	f104 091a 	add.w	r9, r4, #26
 8019b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b9a:	3b01      	subs	r3, #1
 8019b9c:	4543      	cmp	r3, r8
 8019b9e:	dc09      	bgt.n	8019bb4 <_printf_float+0x264>
 8019ba0:	6823      	ldr	r3, [r4, #0]
 8019ba2:	079b      	lsls	r3, r3, #30
 8019ba4:	f100 8105 	bmi.w	8019db2 <_printf_float+0x462>
 8019ba8:	68e0      	ldr	r0, [r4, #12]
 8019baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019bac:	4298      	cmp	r0, r3
 8019bae:	bfb8      	it	lt
 8019bb0:	4618      	movlt	r0, r3
 8019bb2:	e730      	b.n	8019a16 <_printf_float+0xc6>
 8019bb4:	2301      	movs	r3, #1
 8019bb6:	464a      	mov	r2, r9
 8019bb8:	4631      	mov	r1, r6
 8019bba:	4628      	mov	r0, r5
 8019bbc:	47b8      	blx	r7
 8019bbe:	3001      	adds	r0, #1
 8019bc0:	f43f af27 	beq.w	8019a12 <_printf_float+0xc2>
 8019bc4:	f108 0801 	add.w	r8, r8, #1
 8019bc8:	e7e6      	b.n	8019b98 <_printf_float+0x248>
 8019bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	dc39      	bgt.n	8019c44 <_printf_float+0x2f4>
 8019bd0:	4a1b      	ldr	r2, [pc, #108]	; (8019c40 <_printf_float+0x2f0>)
 8019bd2:	2301      	movs	r3, #1
 8019bd4:	4631      	mov	r1, r6
 8019bd6:	4628      	mov	r0, r5
 8019bd8:	47b8      	blx	r7
 8019bda:	3001      	adds	r0, #1
 8019bdc:	f43f af19 	beq.w	8019a12 <_printf_float+0xc2>
 8019be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019be4:	4313      	orrs	r3, r2
 8019be6:	d102      	bne.n	8019bee <_printf_float+0x29e>
 8019be8:	6823      	ldr	r3, [r4, #0]
 8019bea:	07d9      	lsls	r1, r3, #31
 8019bec:	d5d8      	bpl.n	8019ba0 <_printf_float+0x250>
 8019bee:	ee18 3a10 	vmov	r3, s16
 8019bf2:	4652      	mov	r2, sl
 8019bf4:	4631      	mov	r1, r6
 8019bf6:	4628      	mov	r0, r5
 8019bf8:	47b8      	blx	r7
 8019bfa:	3001      	adds	r0, #1
 8019bfc:	f43f af09 	beq.w	8019a12 <_printf_float+0xc2>
 8019c00:	f04f 0900 	mov.w	r9, #0
 8019c04:	f104 0a1a 	add.w	sl, r4, #26
 8019c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c0a:	425b      	negs	r3, r3
 8019c0c:	454b      	cmp	r3, r9
 8019c0e:	dc01      	bgt.n	8019c14 <_printf_float+0x2c4>
 8019c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c12:	e792      	b.n	8019b3a <_printf_float+0x1ea>
 8019c14:	2301      	movs	r3, #1
 8019c16:	4652      	mov	r2, sl
 8019c18:	4631      	mov	r1, r6
 8019c1a:	4628      	mov	r0, r5
 8019c1c:	47b8      	blx	r7
 8019c1e:	3001      	adds	r0, #1
 8019c20:	f43f aef7 	beq.w	8019a12 <_printf_float+0xc2>
 8019c24:	f109 0901 	add.w	r9, r9, #1
 8019c28:	e7ee      	b.n	8019c08 <_printf_float+0x2b8>
 8019c2a:	bf00      	nop
 8019c2c:	7fefffff 	.word	0x7fefffff
 8019c30:	0801c2e4 	.word	0x0801c2e4
 8019c34:	0801c2e8 	.word	0x0801c2e8
 8019c38:	0801c2f0 	.word	0x0801c2f0
 8019c3c:	0801c2ec 	.word	0x0801c2ec
 8019c40:	0801c2f4 	.word	0x0801c2f4
 8019c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019c48:	429a      	cmp	r2, r3
 8019c4a:	bfa8      	it	ge
 8019c4c:	461a      	movge	r2, r3
 8019c4e:	2a00      	cmp	r2, #0
 8019c50:	4691      	mov	r9, r2
 8019c52:	dc37      	bgt.n	8019cc4 <_printf_float+0x374>
 8019c54:	f04f 0b00 	mov.w	fp, #0
 8019c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019c5c:	f104 021a 	add.w	r2, r4, #26
 8019c60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019c62:	9305      	str	r3, [sp, #20]
 8019c64:	eba3 0309 	sub.w	r3, r3, r9
 8019c68:	455b      	cmp	r3, fp
 8019c6a:	dc33      	bgt.n	8019cd4 <_printf_float+0x384>
 8019c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c70:	429a      	cmp	r2, r3
 8019c72:	db3b      	blt.n	8019cec <_printf_float+0x39c>
 8019c74:	6823      	ldr	r3, [r4, #0]
 8019c76:	07da      	lsls	r2, r3, #31
 8019c78:	d438      	bmi.n	8019cec <_printf_float+0x39c>
 8019c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c7c:	9a05      	ldr	r2, [sp, #20]
 8019c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019c80:	1a9a      	subs	r2, r3, r2
 8019c82:	eba3 0901 	sub.w	r9, r3, r1
 8019c86:	4591      	cmp	r9, r2
 8019c88:	bfa8      	it	ge
 8019c8a:	4691      	movge	r9, r2
 8019c8c:	f1b9 0f00 	cmp.w	r9, #0
 8019c90:	dc35      	bgt.n	8019cfe <_printf_float+0x3ae>
 8019c92:	f04f 0800 	mov.w	r8, #0
 8019c96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019c9a:	f104 0a1a 	add.w	sl, r4, #26
 8019c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019ca2:	1a9b      	subs	r3, r3, r2
 8019ca4:	eba3 0309 	sub.w	r3, r3, r9
 8019ca8:	4543      	cmp	r3, r8
 8019caa:	f77f af79 	ble.w	8019ba0 <_printf_float+0x250>
 8019cae:	2301      	movs	r3, #1
 8019cb0:	4652      	mov	r2, sl
 8019cb2:	4631      	mov	r1, r6
 8019cb4:	4628      	mov	r0, r5
 8019cb6:	47b8      	blx	r7
 8019cb8:	3001      	adds	r0, #1
 8019cba:	f43f aeaa 	beq.w	8019a12 <_printf_float+0xc2>
 8019cbe:	f108 0801 	add.w	r8, r8, #1
 8019cc2:	e7ec      	b.n	8019c9e <_printf_float+0x34e>
 8019cc4:	4613      	mov	r3, r2
 8019cc6:	4631      	mov	r1, r6
 8019cc8:	4642      	mov	r2, r8
 8019cca:	4628      	mov	r0, r5
 8019ccc:	47b8      	blx	r7
 8019cce:	3001      	adds	r0, #1
 8019cd0:	d1c0      	bne.n	8019c54 <_printf_float+0x304>
 8019cd2:	e69e      	b.n	8019a12 <_printf_float+0xc2>
 8019cd4:	2301      	movs	r3, #1
 8019cd6:	4631      	mov	r1, r6
 8019cd8:	4628      	mov	r0, r5
 8019cda:	9205      	str	r2, [sp, #20]
 8019cdc:	47b8      	blx	r7
 8019cde:	3001      	adds	r0, #1
 8019ce0:	f43f ae97 	beq.w	8019a12 <_printf_float+0xc2>
 8019ce4:	9a05      	ldr	r2, [sp, #20]
 8019ce6:	f10b 0b01 	add.w	fp, fp, #1
 8019cea:	e7b9      	b.n	8019c60 <_printf_float+0x310>
 8019cec:	ee18 3a10 	vmov	r3, s16
 8019cf0:	4652      	mov	r2, sl
 8019cf2:	4631      	mov	r1, r6
 8019cf4:	4628      	mov	r0, r5
 8019cf6:	47b8      	blx	r7
 8019cf8:	3001      	adds	r0, #1
 8019cfa:	d1be      	bne.n	8019c7a <_printf_float+0x32a>
 8019cfc:	e689      	b.n	8019a12 <_printf_float+0xc2>
 8019cfe:	9a05      	ldr	r2, [sp, #20]
 8019d00:	464b      	mov	r3, r9
 8019d02:	4442      	add	r2, r8
 8019d04:	4631      	mov	r1, r6
 8019d06:	4628      	mov	r0, r5
 8019d08:	47b8      	blx	r7
 8019d0a:	3001      	adds	r0, #1
 8019d0c:	d1c1      	bne.n	8019c92 <_printf_float+0x342>
 8019d0e:	e680      	b.n	8019a12 <_printf_float+0xc2>
 8019d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d12:	2a01      	cmp	r2, #1
 8019d14:	dc01      	bgt.n	8019d1a <_printf_float+0x3ca>
 8019d16:	07db      	lsls	r3, r3, #31
 8019d18:	d538      	bpl.n	8019d8c <_printf_float+0x43c>
 8019d1a:	2301      	movs	r3, #1
 8019d1c:	4642      	mov	r2, r8
 8019d1e:	4631      	mov	r1, r6
 8019d20:	4628      	mov	r0, r5
 8019d22:	47b8      	blx	r7
 8019d24:	3001      	adds	r0, #1
 8019d26:	f43f ae74 	beq.w	8019a12 <_printf_float+0xc2>
 8019d2a:	ee18 3a10 	vmov	r3, s16
 8019d2e:	4652      	mov	r2, sl
 8019d30:	4631      	mov	r1, r6
 8019d32:	4628      	mov	r0, r5
 8019d34:	47b8      	blx	r7
 8019d36:	3001      	adds	r0, #1
 8019d38:	f43f ae6b 	beq.w	8019a12 <_printf_float+0xc2>
 8019d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019d40:	2200      	movs	r2, #0
 8019d42:	2300      	movs	r3, #0
 8019d44:	f7f6 fec0 	bl	8010ac8 <__aeabi_dcmpeq>
 8019d48:	b9d8      	cbnz	r0, 8019d82 <_printf_float+0x432>
 8019d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d4c:	f108 0201 	add.w	r2, r8, #1
 8019d50:	3b01      	subs	r3, #1
 8019d52:	4631      	mov	r1, r6
 8019d54:	4628      	mov	r0, r5
 8019d56:	47b8      	blx	r7
 8019d58:	3001      	adds	r0, #1
 8019d5a:	d10e      	bne.n	8019d7a <_printf_float+0x42a>
 8019d5c:	e659      	b.n	8019a12 <_printf_float+0xc2>
 8019d5e:	2301      	movs	r3, #1
 8019d60:	4652      	mov	r2, sl
 8019d62:	4631      	mov	r1, r6
 8019d64:	4628      	mov	r0, r5
 8019d66:	47b8      	blx	r7
 8019d68:	3001      	adds	r0, #1
 8019d6a:	f43f ae52 	beq.w	8019a12 <_printf_float+0xc2>
 8019d6e:	f108 0801 	add.w	r8, r8, #1
 8019d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d74:	3b01      	subs	r3, #1
 8019d76:	4543      	cmp	r3, r8
 8019d78:	dcf1      	bgt.n	8019d5e <_printf_float+0x40e>
 8019d7a:	464b      	mov	r3, r9
 8019d7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019d80:	e6dc      	b.n	8019b3c <_printf_float+0x1ec>
 8019d82:	f04f 0800 	mov.w	r8, #0
 8019d86:	f104 0a1a 	add.w	sl, r4, #26
 8019d8a:	e7f2      	b.n	8019d72 <_printf_float+0x422>
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	4642      	mov	r2, r8
 8019d90:	e7df      	b.n	8019d52 <_printf_float+0x402>
 8019d92:	2301      	movs	r3, #1
 8019d94:	464a      	mov	r2, r9
 8019d96:	4631      	mov	r1, r6
 8019d98:	4628      	mov	r0, r5
 8019d9a:	47b8      	blx	r7
 8019d9c:	3001      	adds	r0, #1
 8019d9e:	f43f ae38 	beq.w	8019a12 <_printf_float+0xc2>
 8019da2:	f108 0801 	add.w	r8, r8, #1
 8019da6:	68e3      	ldr	r3, [r4, #12]
 8019da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019daa:	1a5b      	subs	r3, r3, r1
 8019dac:	4543      	cmp	r3, r8
 8019dae:	dcf0      	bgt.n	8019d92 <_printf_float+0x442>
 8019db0:	e6fa      	b.n	8019ba8 <_printf_float+0x258>
 8019db2:	f04f 0800 	mov.w	r8, #0
 8019db6:	f104 0919 	add.w	r9, r4, #25
 8019dba:	e7f4      	b.n	8019da6 <_printf_float+0x456>

08019dbc <_printf_common>:
 8019dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dc0:	4616      	mov	r6, r2
 8019dc2:	4699      	mov	r9, r3
 8019dc4:	688a      	ldr	r2, [r1, #8]
 8019dc6:	690b      	ldr	r3, [r1, #16]
 8019dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019dcc:	4293      	cmp	r3, r2
 8019dce:	bfb8      	it	lt
 8019dd0:	4613      	movlt	r3, r2
 8019dd2:	6033      	str	r3, [r6, #0]
 8019dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019dd8:	4607      	mov	r7, r0
 8019dda:	460c      	mov	r4, r1
 8019ddc:	b10a      	cbz	r2, 8019de2 <_printf_common+0x26>
 8019dde:	3301      	adds	r3, #1
 8019de0:	6033      	str	r3, [r6, #0]
 8019de2:	6823      	ldr	r3, [r4, #0]
 8019de4:	0699      	lsls	r1, r3, #26
 8019de6:	bf42      	ittt	mi
 8019de8:	6833      	ldrmi	r3, [r6, #0]
 8019dea:	3302      	addmi	r3, #2
 8019dec:	6033      	strmi	r3, [r6, #0]
 8019dee:	6825      	ldr	r5, [r4, #0]
 8019df0:	f015 0506 	ands.w	r5, r5, #6
 8019df4:	d106      	bne.n	8019e04 <_printf_common+0x48>
 8019df6:	f104 0a19 	add.w	sl, r4, #25
 8019dfa:	68e3      	ldr	r3, [r4, #12]
 8019dfc:	6832      	ldr	r2, [r6, #0]
 8019dfe:	1a9b      	subs	r3, r3, r2
 8019e00:	42ab      	cmp	r3, r5
 8019e02:	dc26      	bgt.n	8019e52 <_printf_common+0x96>
 8019e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e08:	1e13      	subs	r3, r2, #0
 8019e0a:	6822      	ldr	r2, [r4, #0]
 8019e0c:	bf18      	it	ne
 8019e0e:	2301      	movne	r3, #1
 8019e10:	0692      	lsls	r2, r2, #26
 8019e12:	d42b      	bmi.n	8019e6c <_printf_common+0xb0>
 8019e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e18:	4649      	mov	r1, r9
 8019e1a:	4638      	mov	r0, r7
 8019e1c:	47c0      	blx	r8
 8019e1e:	3001      	adds	r0, #1
 8019e20:	d01e      	beq.n	8019e60 <_printf_common+0xa4>
 8019e22:	6823      	ldr	r3, [r4, #0]
 8019e24:	68e5      	ldr	r5, [r4, #12]
 8019e26:	6832      	ldr	r2, [r6, #0]
 8019e28:	f003 0306 	and.w	r3, r3, #6
 8019e2c:	2b04      	cmp	r3, #4
 8019e2e:	bf08      	it	eq
 8019e30:	1aad      	subeq	r5, r5, r2
 8019e32:	68a3      	ldr	r3, [r4, #8]
 8019e34:	6922      	ldr	r2, [r4, #16]
 8019e36:	bf0c      	ite	eq
 8019e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e3c:	2500      	movne	r5, #0
 8019e3e:	4293      	cmp	r3, r2
 8019e40:	bfc4      	itt	gt
 8019e42:	1a9b      	subgt	r3, r3, r2
 8019e44:	18ed      	addgt	r5, r5, r3
 8019e46:	2600      	movs	r6, #0
 8019e48:	341a      	adds	r4, #26
 8019e4a:	42b5      	cmp	r5, r6
 8019e4c:	d11a      	bne.n	8019e84 <_printf_common+0xc8>
 8019e4e:	2000      	movs	r0, #0
 8019e50:	e008      	b.n	8019e64 <_printf_common+0xa8>
 8019e52:	2301      	movs	r3, #1
 8019e54:	4652      	mov	r2, sl
 8019e56:	4649      	mov	r1, r9
 8019e58:	4638      	mov	r0, r7
 8019e5a:	47c0      	blx	r8
 8019e5c:	3001      	adds	r0, #1
 8019e5e:	d103      	bne.n	8019e68 <_printf_common+0xac>
 8019e60:	f04f 30ff 	mov.w	r0, #4294967295
 8019e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e68:	3501      	adds	r5, #1
 8019e6a:	e7c6      	b.n	8019dfa <_printf_common+0x3e>
 8019e6c:	18e1      	adds	r1, r4, r3
 8019e6e:	1c5a      	adds	r2, r3, #1
 8019e70:	2030      	movs	r0, #48	; 0x30
 8019e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019e76:	4422      	add	r2, r4
 8019e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019e80:	3302      	adds	r3, #2
 8019e82:	e7c7      	b.n	8019e14 <_printf_common+0x58>
 8019e84:	2301      	movs	r3, #1
 8019e86:	4622      	mov	r2, r4
 8019e88:	4649      	mov	r1, r9
 8019e8a:	4638      	mov	r0, r7
 8019e8c:	47c0      	blx	r8
 8019e8e:	3001      	adds	r0, #1
 8019e90:	d0e6      	beq.n	8019e60 <_printf_common+0xa4>
 8019e92:	3601      	adds	r6, #1
 8019e94:	e7d9      	b.n	8019e4a <_printf_common+0x8e>
	...

08019e98 <_printf_i>:
 8019e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e9c:	7e0f      	ldrb	r7, [r1, #24]
 8019e9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019ea0:	2f78      	cmp	r7, #120	; 0x78
 8019ea2:	4691      	mov	r9, r2
 8019ea4:	4680      	mov	r8, r0
 8019ea6:	460c      	mov	r4, r1
 8019ea8:	469a      	mov	sl, r3
 8019eaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019eae:	d807      	bhi.n	8019ec0 <_printf_i+0x28>
 8019eb0:	2f62      	cmp	r7, #98	; 0x62
 8019eb2:	d80a      	bhi.n	8019eca <_printf_i+0x32>
 8019eb4:	2f00      	cmp	r7, #0
 8019eb6:	f000 80d8 	beq.w	801a06a <_printf_i+0x1d2>
 8019eba:	2f58      	cmp	r7, #88	; 0x58
 8019ebc:	f000 80a3 	beq.w	801a006 <_printf_i+0x16e>
 8019ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019ec8:	e03a      	b.n	8019f40 <_printf_i+0xa8>
 8019eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019ece:	2b15      	cmp	r3, #21
 8019ed0:	d8f6      	bhi.n	8019ec0 <_printf_i+0x28>
 8019ed2:	a101      	add	r1, pc, #4	; (adr r1, 8019ed8 <_printf_i+0x40>)
 8019ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019ed8:	08019f31 	.word	0x08019f31
 8019edc:	08019f45 	.word	0x08019f45
 8019ee0:	08019ec1 	.word	0x08019ec1
 8019ee4:	08019ec1 	.word	0x08019ec1
 8019ee8:	08019ec1 	.word	0x08019ec1
 8019eec:	08019ec1 	.word	0x08019ec1
 8019ef0:	08019f45 	.word	0x08019f45
 8019ef4:	08019ec1 	.word	0x08019ec1
 8019ef8:	08019ec1 	.word	0x08019ec1
 8019efc:	08019ec1 	.word	0x08019ec1
 8019f00:	08019ec1 	.word	0x08019ec1
 8019f04:	0801a051 	.word	0x0801a051
 8019f08:	08019f75 	.word	0x08019f75
 8019f0c:	0801a033 	.word	0x0801a033
 8019f10:	08019ec1 	.word	0x08019ec1
 8019f14:	08019ec1 	.word	0x08019ec1
 8019f18:	0801a073 	.word	0x0801a073
 8019f1c:	08019ec1 	.word	0x08019ec1
 8019f20:	08019f75 	.word	0x08019f75
 8019f24:	08019ec1 	.word	0x08019ec1
 8019f28:	08019ec1 	.word	0x08019ec1
 8019f2c:	0801a03b 	.word	0x0801a03b
 8019f30:	682b      	ldr	r3, [r5, #0]
 8019f32:	1d1a      	adds	r2, r3, #4
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	602a      	str	r2, [r5, #0]
 8019f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f40:	2301      	movs	r3, #1
 8019f42:	e0a3      	b.n	801a08c <_printf_i+0x1f4>
 8019f44:	6820      	ldr	r0, [r4, #0]
 8019f46:	6829      	ldr	r1, [r5, #0]
 8019f48:	0606      	lsls	r6, r0, #24
 8019f4a:	f101 0304 	add.w	r3, r1, #4
 8019f4e:	d50a      	bpl.n	8019f66 <_printf_i+0xce>
 8019f50:	680e      	ldr	r6, [r1, #0]
 8019f52:	602b      	str	r3, [r5, #0]
 8019f54:	2e00      	cmp	r6, #0
 8019f56:	da03      	bge.n	8019f60 <_printf_i+0xc8>
 8019f58:	232d      	movs	r3, #45	; 0x2d
 8019f5a:	4276      	negs	r6, r6
 8019f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f60:	485e      	ldr	r0, [pc, #376]	; (801a0dc <_printf_i+0x244>)
 8019f62:	230a      	movs	r3, #10
 8019f64:	e019      	b.n	8019f9a <_printf_i+0x102>
 8019f66:	680e      	ldr	r6, [r1, #0]
 8019f68:	602b      	str	r3, [r5, #0]
 8019f6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019f6e:	bf18      	it	ne
 8019f70:	b236      	sxthne	r6, r6
 8019f72:	e7ef      	b.n	8019f54 <_printf_i+0xbc>
 8019f74:	682b      	ldr	r3, [r5, #0]
 8019f76:	6820      	ldr	r0, [r4, #0]
 8019f78:	1d19      	adds	r1, r3, #4
 8019f7a:	6029      	str	r1, [r5, #0]
 8019f7c:	0601      	lsls	r1, r0, #24
 8019f7e:	d501      	bpl.n	8019f84 <_printf_i+0xec>
 8019f80:	681e      	ldr	r6, [r3, #0]
 8019f82:	e002      	b.n	8019f8a <_printf_i+0xf2>
 8019f84:	0646      	lsls	r6, r0, #25
 8019f86:	d5fb      	bpl.n	8019f80 <_printf_i+0xe8>
 8019f88:	881e      	ldrh	r6, [r3, #0]
 8019f8a:	4854      	ldr	r0, [pc, #336]	; (801a0dc <_printf_i+0x244>)
 8019f8c:	2f6f      	cmp	r7, #111	; 0x6f
 8019f8e:	bf0c      	ite	eq
 8019f90:	2308      	moveq	r3, #8
 8019f92:	230a      	movne	r3, #10
 8019f94:	2100      	movs	r1, #0
 8019f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019f9a:	6865      	ldr	r5, [r4, #4]
 8019f9c:	60a5      	str	r5, [r4, #8]
 8019f9e:	2d00      	cmp	r5, #0
 8019fa0:	bfa2      	ittt	ge
 8019fa2:	6821      	ldrge	r1, [r4, #0]
 8019fa4:	f021 0104 	bicge.w	r1, r1, #4
 8019fa8:	6021      	strge	r1, [r4, #0]
 8019faa:	b90e      	cbnz	r6, 8019fb0 <_printf_i+0x118>
 8019fac:	2d00      	cmp	r5, #0
 8019fae:	d04d      	beq.n	801a04c <_printf_i+0x1b4>
 8019fb0:	4615      	mov	r5, r2
 8019fb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8019fb6:	fb03 6711 	mls	r7, r3, r1, r6
 8019fba:	5dc7      	ldrb	r7, [r0, r7]
 8019fbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019fc0:	4637      	mov	r7, r6
 8019fc2:	42bb      	cmp	r3, r7
 8019fc4:	460e      	mov	r6, r1
 8019fc6:	d9f4      	bls.n	8019fb2 <_printf_i+0x11a>
 8019fc8:	2b08      	cmp	r3, #8
 8019fca:	d10b      	bne.n	8019fe4 <_printf_i+0x14c>
 8019fcc:	6823      	ldr	r3, [r4, #0]
 8019fce:	07de      	lsls	r6, r3, #31
 8019fd0:	d508      	bpl.n	8019fe4 <_printf_i+0x14c>
 8019fd2:	6923      	ldr	r3, [r4, #16]
 8019fd4:	6861      	ldr	r1, [r4, #4]
 8019fd6:	4299      	cmp	r1, r3
 8019fd8:	bfde      	ittt	le
 8019fda:	2330      	movle	r3, #48	; 0x30
 8019fdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019fe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019fe4:	1b52      	subs	r2, r2, r5
 8019fe6:	6122      	str	r2, [r4, #16]
 8019fe8:	f8cd a000 	str.w	sl, [sp]
 8019fec:	464b      	mov	r3, r9
 8019fee:	aa03      	add	r2, sp, #12
 8019ff0:	4621      	mov	r1, r4
 8019ff2:	4640      	mov	r0, r8
 8019ff4:	f7ff fee2 	bl	8019dbc <_printf_common>
 8019ff8:	3001      	adds	r0, #1
 8019ffa:	d14c      	bne.n	801a096 <_printf_i+0x1fe>
 8019ffc:	f04f 30ff 	mov.w	r0, #4294967295
 801a000:	b004      	add	sp, #16
 801a002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a006:	4835      	ldr	r0, [pc, #212]	; (801a0dc <_printf_i+0x244>)
 801a008:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a00c:	6829      	ldr	r1, [r5, #0]
 801a00e:	6823      	ldr	r3, [r4, #0]
 801a010:	f851 6b04 	ldr.w	r6, [r1], #4
 801a014:	6029      	str	r1, [r5, #0]
 801a016:	061d      	lsls	r5, r3, #24
 801a018:	d514      	bpl.n	801a044 <_printf_i+0x1ac>
 801a01a:	07df      	lsls	r7, r3, #31
 801a01c:	bf44      	itt	mi
 801a01e:	f043 0320 	orrmi.w	r3, r3, #32
 801a022:	6023      	strmi	r3, [r4, #0]
 801a024:	b91e      	cbnz	r6, 801a02e <_printf_i+0x196>
 801a026:	6823      	ldr	r3, [r4, #0]
 801a028:	f023 0320 	bic.w	r3, r3, #32
 801a02c:	6023      	str	r3, [r4, #0]
 801a02e:	2310      	movs	r3, #16
 801a030:	e7b0      	b.n	8019f94 <_printf_i+0xfc>
 801a032:	6823      	ldr	r3, [r4, #0]
 801a034:	f043 0320 	orr.w	r3, r3, #32
 801a038:	6023      	str	r3, [r4, #0]
 801a03a:	2378      	movs	r3, #120	; 0x78
 801a03c:	4828      	ldr	r0, [pc, #160]	; (801a0e0 <_printf_i+0x248>)
 801a03e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a042:	e7e3      	b.n	801a00c <_printf_i+0x174>
 801a044:	0659      	lsls	r1, r3, #25
 801a046:	bf48      	it	mi
 801a048:	b2b6      	uxthmi	r6, r6
 801a04a:	e7e6      	b.n	801a01a <_printf_i+0x182>
 801a04c:	4615      	mov	r5, r2
 801a04e:	e7bb      	b.n	8019fc8 <_printf_i+0x130>
 801a050:	682b      	ldr	r3, [r5, #0]
 801a052:	6826      	ldr	r6, [r4, #0]
 801a054:	6961      	ldr	r1, [r4, #20]
 801a056:	1d18      	adds	r0, r3, #4
 801a058:	6028      	str	r0, [r5, #0]
 801a05a:	0635      	lsls	r5, r6, #24
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	d501      	bpl.n	801a064 <_printf_i+0x1cc>
 801a060:	6019      	str	r1, [r3, #0]
 801a062:	e002      	b.n	801a06a <_printf_i+0x1d2>
 801a064:	0670      	lsls	r0, r6, #25
 801a066:	d5fb      	bpl.n	801a060 <_printf_i+0x1c8>
 801a068:	8019      	strh	r1, [r3, #0]
 801a06a:	2300      	movs	r3, #0
 801a06c:	6123      	str	r3, [r4, #16]
 801a06e:	4615      	mov	r5, r2
 801a070:	e7ba      	b.n	8019fe8 <_printf_i+0x150>
 801a072:	682b      	ldr	r3, [r5, #0]
 801a074:	1d1a      	adds	r2, r3, #4
 801a076:	602a      	str	r2, [r5, #0]
 801a078:	681d      	ldr	r5, [r3, #0]
 801a07a:	6862      	ldr	r2, [r4, #4]
 801a07c:	2100      	movs	r1, #0
 801a07e:	4628      	mov	r0, r5
 801a080:	f7f6 f8ae 	bl	80101e0 <memchr>
 801a084:	b108      	cbz	r0, 801a08a <_printf_i+0x1f2>
 801a086:	1b40      	subs	r0, r0, r5
 801a088:	6060      	str	r0, [r4, #4]
 801a08a:	6863      	ldr	r3, [r4, #4]
 801a08c:	6123      	str	r3, [r4, #16]
 801a08e:	2300      	movs	r3, #0
 801a090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a094:	e7a8      	b.n	8019fe8 <_printf_i+0x150>
 801a096:	6923      	ldr	r3, [r4, #16]
 801a098:	462a      	mov	r2, r5
 801a09a:	4649      	mov	r1, r9
 801a09c:	4640      	mov	r0, r8
 801a09e:	47d0      	blx	sl
 801a0a0:	3001      	adds	r0, #1
 801a0a2:	d0ab      	beq.n	8019ffc <_printf_i+0x164>
 801a0a4:	6823      	ldr	r3, [r4, #0]
 801a0a6:	079b      	lsls	r3, r3, #30
 801a0a8:	d413      	bmi.n	801a0d2 <_printf_i+0x23a>
 801a0aa:	68e0      	ldr	r0, [r4, #12]
 801a0ac:	9b03      	ldr	r3, [sp, #12]
 801a0ae:	4298      	cmp	r0, r3
 801a0b0:	bfb8      	it	lt
 801a0b2:	4618      	movlt	r0, r3
 801a0b4:	e7a4      	b.n	801a000 <_printf_i+0x168>
 801a0b6:	2301      	movs	r3, #1
 801a0b8:	4632      	mov	r2, r6
 801a0ba:	4649      	mov	r1, r9
 801a0bc:	4640      	mov	r0, r8
 801a0be:	47d0      	blx	sl
 801a0c0:	3001      	adds	r0, #1
 801a0c2:	d09b      	beq.n	8019ffc <_printf_i+0x164>
 801a0c4:	3501      	adds	r5, #1
 801a0c6:	68e3      	ldr	r3, [r4, #12]
 801a0c8:	9903      	ldr	r1, [sp, #12]
 801a0ca:	1a5b      	subs	r3, r3, r1
 801a0cc:	42ab      	cmp	r3, r5
 801a0ce:	dcf2      	bgt.n	801a0b6 <_printf_i+0x21e>
 801a0d0:	e7eb      	b.n	801a0aa <_printf_i+0x212>
 801a0d2:	2500      	movs	r5, #0
 801a0d4:	f104 0619 	add.w	r6, r4, #25
 801a0d8:	e7f5      	b.n	801a0c6 <_printf_i+0x22e>
 801a0da:	bf00      	nop
 801a0dc:	0801c2f6 	.word	0x0801c2f6
 801a0e0:	0801c307 	.word	0x0801c307

0801a0e4 <quorem>:
 801a0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e8:	6903      	ldr	r3, [r0, #16]
 801a0ea:	690c      	ldr	r4, [r1, #16]
 801a0ec:	42a3      	cmp	r3, r4
 801a0ee:	4607      	mov	r7, r0
 801a0f0:	f2c0 8081 	blt.w	801a1f6 <quorem+0x112>
 801a0f4:	3c01      	subs	r4, #1
 801a0f6:	f101 0814 	add.w	r8, r1, #20
 801a0fa:	f100 0514 	add.w	r5, r0, #20
 801a0fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a102:	9301      	str	r3, [sp, #4]
 801a104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a10c:	3301      	adds	r3, #1
 801a10e:	429a      	cmp	r2, r3
 801a110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a118:	fbb2 f6f3 	udiv	r6, r2, r3
 801a11c:	d331      	bcc.n	801a182 <quorem+0x9e>
 801a11e:	f04f 0e00 	mov.w	lr, #0
 801a122:	4640      	mov	r0, r8
 801a124:	46ac      	mov	ip, r5
 801a126:	46f2      	mov	sl, lr
 801a128:	f850 2b04 	ldr.w	r2, [r0], #4
 801a12c:	b293      	uxth	r3, r2
 801a12e:	fb06 e303 	mla	r3, r6, r3, lr
 801a132:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a136:	b29b      	uxth	r3, r3
 801a138:	ebaa 0303 	sub.w	r3, sl, r3
 801a13c:	f8dc a000 	ldr.w	sl, [ip]
 801a140:	0c12      	lsrs	r2, r2, #16
 801a142:	fa13 f38a 	uxtah	r3, r3, sl
 801a146:	fb06 e202 	mla	r2, r6, r2, lr
 801a14a:	9300      	str	r3, [sp, #0]
 801a14c:	9b00      	ldr	r3, [sp, #0]
 801a14e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a152:	b292      	uxth	r2, r2
 801a154:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a15c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a160:	4581      	cmp	r9, r0
 801a162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a166:	f84c 3b04 	str.w	r3, [ip], #4
 801a16a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a16e:	d2db      	bcs.n	801a128 <quorem+0x44>
 801a170:	f855 300b 	ldr.w	r3, [r5, fp]
 801a174:	b92b      	cbnz	r3, 801a182 <quorem+0x9e>
 801a176:	9b01      	ldr	r3, [sp, #4]
 801a178:	3b04      	subs	r3, #4
 801a17a:	429d      	cmp	r5, r3
 801a17c:	461a      	mov	r2, r3
 801a17e:	d32e      	bcc.n	801a1de <quorem+0xfa>
 801a180:	613c      	str	r4, [r7, #16]
 801a182:	4638      	mov	r0, r7
 801a184:	f001 f8c6 	bl	801b314 <__mcmp>
 801a188:	2800      	cmp	r0, #0
 801a18a:	db24      	blt.n	801a1d6 <quorem+0xf2>
 801a18c:	3601      	adds	r6, #1
 801a18e:	4628      	mov	r0, r5
 801a190:	f04f 0c00 	mov.w	ip, #0
 801a194:	f858 2b04 	ldr.w	r2, [r8], #4
 801a198:	f8d0 e000 	ldr.w	lr, [r0]
 801a19c:	b293      	uxth	r3, r2
 801a19e:	ebac 0303 	sub.w	r3, ip, r3
 801a1a2:	0c12      	lsrs	r2, r2, #16
 801a1a4:	fa13 f38e 	uxtah	r3, r3, lr
 801a1a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a1ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a1b0:	b29b      	uxth	r3, r3
 801a1b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a1b6:	45c1      	cmp	r9, r8
 801a1b8:	f840 3b04 	str.w	r3, [r0], #4
 801a1bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a1c0:	d2e8      	bcs.n	801a194 <quorem+0xb0>
 801a1c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a1c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a1ca:	b922      	cbnz	r2, 801a1d6 <quorem+0xf2>
 801a1cc:	3b04      	subs	r3, #4
 801a1ce:	429d      	cmp	r5, r3
 801a1d0:	461a      	mov	r2, r3
 801a1d2:	d30a      	bcc.n	801a1ea <quorem+0x106>
 801a1d4:	613c      	str	r4, [r7, #16]
 801a1d6:	4630      	mov	r0, r6
 801a1d8:	b003      	add	sp, #12
 801a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1de:	6812      	ldr	r2, [r2, #0]
 801a1e0:	3b04      	subs	r3, #4
 801a1e2:	2a00      	cmp	r2, #0
 801a1e4:	d1cc      	bne.n	801a180 <quorem+0x9c>
 801a1e6:	3c01      	subs	r4, #1
 801a1e8:	e7c7      	b.n	801a17a <quorem+0x96>
 801a1ea:	6812      	ldr	r2, [r2, #0]
 801a1ec:	3b04      	subs	r3, #4
 801a1ee:	2a00      	cmp	r2, #0
 801a1f0:	d1f0      	bne.n	801a1d4 <quorem+0xf0>
 801a1f2:	3c01      	subs	r4, #1
 801a1f4:	e7eb      	b.n	801a1ce <quorem+0xea>
 801a1f6:	2000      	movs	r0, #0
 801a1f8:	e7ee      	b.n	801a1d8 <quorem+0xf4>
 801a1fa:	0000      	movs	r0, r0
 801a1fc:	0000      	movs	r0, r0
	...

0801a200 <_dtoa_r>:
 801a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a204:	ed2d 8b04 	vpush	{d8-d9}
 801a208:	ec57 6b10 	vmov	r6, r7, d0
 801a20c:	b093      	sub	sp, #76	; 0x4c
 801a20e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a210:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a214:	9106      	str	r1, [sp, #24]
 801a216:	ee10 aa10 	vmov	sl, s0
 801a21a:	4604      	mov	r4, r0
 801a21c:	9209      	str	r2, [sp, #36]	; 0x24
 801a21e:	930c      	str	r3, [sp, #48]	; 0x30
 801a220:	46bb      	mov	fp, r7
 801a222:	b975      	cbnz	r5, 801a242 <_dtoa_r+0x42>
 801a224:	2010      	movs	r0, #16
 801a226:	f000 fddd 	bl	801ade4 <malloc>
 801a22a:	4602      	mov	r2, r0
 801a22c:	6260      	str	r0, [r4, #36]	; 0x24
 801a22e:	b920      	cbnz	r0, 801a23a <_dtoa_r+0x3a>
 801a230:	4ba7      	ldr	r3, [pc, #668]	; (801a4d0 <_dtoa_r+0x2d0>)
 801a232:	21ea      	movs	r1, #234	; 0xea
 801a234:	48a7      	ldr	r0, [pc, #668]	; (801a4d4 <_dtoa_r+0x2d4>)
 801a236:	f001 fa75 	bl	801b724 <__assert_func>
 801a23a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a23e:	6005      	str	r5, [r0, #0]
 801a240:	60c5      	str	r5, [r0, #12]
 801a242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a244:	6819      	ldr	r1, [r3, #0]
 801a246:	b151      	cbz	r1, 801a25e <_dtoa_r+0x5e>
 801a248:	685a      	ldr	r2, [r3, #4]
 801a24a:	604a      	str	r2, [r1, #4]
 801a24c:	2301      	movs	r3, #1
 801a24e:	4093      	lsls	r3, r2
 801a250:	608b      	str	r3, [r1, #8]
 801a252:	4620      	mov	r0, r4
 801a254:	f000 fe1c 	bl	801ae90 <_Bfree>
 801a258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a25a:	2200      	movs	r2, #0
 801a25c:	601a      	str	r2, [r3, #0]
 801a25e:	1e3b      	subs	r3, r7, #0
 801a260:	bfaa      	itet	ge
 801a262:	2300      	movge	r3, #0
 801a264:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801a268:	f8c8 3000 	strge.w	r3, [r8]
 801a26c:	4b9a      	ldr	r3, [pc, #616]	; (801a4d8 <_dtoa_r+0x2d8>)
 801a26e:	bfbc      	itt	lt
 801a270:	2201      	movlt	r2, #1
 801a272:	f8c8 2000 	strlt.w	r2, [r8]
 801a276:	ea33 030b 	bics.w	r3, r3, fp
 801a27a:	d11b      	bne.n	801a2b4 <_dtoa_r+0xb4>
 801a27c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a27e:	f242 730f 	movw	r3, #9999	; 0x270f
 801a282:	6013      	str	r3, [r2, #0]
 801a284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a288:	4333      	orrs	r3, r6
 801a28a:	f000 8592 	beq.w	801adb2 <_dtoa_r+0xbb2>
 801a28e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a290:	b963      	cbnz	r3, 801a2ac <_dtoa_r+0xac>
 801a292:	4b92      	ldr	r3, [pc, #584]	; (801a4dc <_dtoa_r+0x2dc>)
 801a294:	e022      	b.n	801a2dc <_dtoa_r+0xdc>
 801a296:	4b92      	ldr	r3, [pc, #584]	; (801a4e0 <_dtoa_r+0x2e0>)
 801a298:	9301      	str	r3, [sp, #4]
 801a29a:	3308      	adds	r3, #8
 801a29c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a29e:	6013      	str	r3, [r2, #0]
 801a2a0:	9801      	ldr	r0, [sp, #4]
 801a2a2:	b013      	add	sp, #76	; 0x4c
 801a2a4:	ecbd 8b04 	vpop	{d8-d9}
 801a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ac:	4b8b      	ldr	r3, [pc, #556]	; (801a4dc <_dtoa_r+0x2dc>)
 801a2ae:	9301      	str	r3, [sp, #4]
 801a2b0:	3303      	adds	r3, #3
 801a2b2:	e7f3      	b.n	801a29c <_dtoa_r+0x9c>
 801a2b4:	2200      	movs	r2, #0
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	4650      	mov	r0, sl
 801a2ba:	4659      	mov	r1, fp
 801a2bc:	f7f6 fc04 	bl	8010ac8 <__aeabi_dcmpeq>
 801a2c0:	ec4b ab19 	vmov	d9, sl, fp
 801a2c4:	4680      	mov	r8, r0
 801a2c6:	b158      	cbz	r0, 801a2e0 <_dtoa_r+0xe0>
 801a2c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a2ca:	2301      	movs	r3, #1
 801a2cc:	6013      	str	r3, [r2, #0]
 801a2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	f000 856b 	beq.w	801adac <_dtoa_r+0xbac>
 801a2d6:	4883      	ldr	r0, [pc, #524]	; (801a4e4 <_dtoa_r+0x2e4>)
 801a2d8:	6018      	str	r0, [r3, #0]
 801a2da:	1e43      	subs	r3, r0, #1
 801a2dc:	9301      	str	r3, [sp, #4]
 801a2de:	e7df      	b.n	801a2a0 <_dtoa_r+0xa0>
 801a2e0:	ec4b ab10 	vmov	d0, sl, fp
 801a2e4:	aa10      	add	r2, sp, #64	; 0x40
 801a2e6:	a911      	add	r1, sp, #68	; 0x44
 801a2e8:	4620      	mov	r0, r4
 801a2ea:	f001 f8b9 	bl	801b460 <__d2b>
 801a2ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801a2f2:	ee08 0a10 	vmov	s16, r0
 801a2f6:	2d00      	cmp	r5, #0
 801a2f8:	f000 8084 	beq.w	801a404 <_dtoa_r+0x204>
 801a2fc:	ee19 3a90 	vmov	r3, s19
 801a300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a304:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801a308:	4656      	mov	r6, sl
 801a30a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801a30e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a312:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801a316:	4b74      	ldr	r3, [pc, #464]	; (801a4e8 <_dtoa_r+0x2e8>)
 801a318:	2200      	movs	r2, #0
 801a31a:	4630      	mov	r0, r6
 801a31c:	4639      	mov	r1, r7
 801a31e:	f7f5 ffb3 	bl	8010288 <__aeabi_dsub>
 801a322:	a365      	add	r3, pc, #404	; (adr r3, 801a4b8 <_dtoa_r+0x2b8>)
 801a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a328:	f7f6 f966 	bl	80105f8 <__aeabi_dmul>
 801a32c:	a364      	add	r3, pc, #400	; (adr r3, 801a4c0 <_dtoa_r+0x2c0>)
 801a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a332:	f7f5 ffab 	bl	801028c <__adddf3>
 801a336:	4606      	mov	r6, r0
 801a338:	4628      	mov	r0, r5
 801a33a:	460f      	mov	r7, r1
 801a33c:	f7f6 f8f2 	bl	8010524 <__aeabi_i2d>
 801a340:	a361      	add	r3, pc, #388	; (adr r3, 801a4c8 <_dtoa_r+0x2c8>)
 801a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a346:	f7f6 f957 	bl	80105f8 <__aeabi_dmul>
 801a34a:	4602      	mov	r2, r0
 801a34c:	460b      	mov	r3, r1
 801a34e:	4630      	mov	r0, r6
 801a350:	4639      	mov	r1, r7
 801a352:	f7f5 ff9b 	bl	801028c <__adddf3>
 801a356:	4606      	mov	r6, r0
 801a358:	460f      	mov	r7, r1
 801a35a:	f7f6 fbfd 	bl	8010b58 <__aeabi_d2iz>
 801a35e:	2200      	movs	r2, #0
 801a360:	9000      	str	r0, [sp, #0]
 801a362:	2300      	movs	r3, #0
 801a364:	4630      	mov	r0, r6
 801a366:	4639      	mov	r1, r7
 801a368:	f7f6 fbb8 	bl	8010adc <__aeabi_dcmplt>
 801a36c:	b150      	cbz	r0, 801a384 <_dtoa_r+0x184>
 801a36e:	9800      	ldr	r0, [sp, #0]
 801a370:	f7f6 f8d8 	bl	8010524 <__aeabi_i2d>
 801a374:	4632      	mov	r2, r6
 801a376:	463b      	mov	r3, r7
 801a378:	f7f6 fba6 	bl	8010ac8 <__aeabi_dcmpeq>
 801a37c:	b910      	cbnz	r0, 801a384 <_dtoa_r+0x184>
 801a37e:	9b00      	ldr	r3, [sp, #0]
 801a380:	3b01      	subs	r3, #1
 801a382:	9300      	str	r3, [sp, #0]
 801a384:	9b00      	ldr	r3, [sp, #0]
 801a386:	2b16      	cmp	r3, #22
 801a388:	d85a      	bhi.n	801a440 <_dtoa_r+0x240>
 801a38a:	9a00      	ldr	r2, [sp, #0]
 801a38c:	4b57      	ldr	r3, [pc, #348]	; (801a4ec <_dtoa_r+0x2ec>)
 801a38e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a396:	ec51 0b19 	vmov	r0, r1, d9
 801a39a:	f7f6 fb9f 	bl	8010adc <__aeabi_dcmplt>
 801a39e:	2800      	cmp	r0, #0
 801a3a0:	d050      	beq.n	801a444 <_dtoa_r+0x244>
 801a3a2:	9b00      	ldr	r3, [sp, #0]
 801a3a4:	3b01      	subs	r3, #1
 801a3a6:	9300      	str	r3, [sp, #0]
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	930b      	str	r3, [sp, #44]	; 0x2c
 801a3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a3ae:	1b5d      	subs	r5, r3, r5
 801a3b0:	1e6b      	subs	r3, r5, #1
 801a3b2:	9305      	str	r3, [sp, #20]
 801a3b4:	bf45      	ittet	mi
 801a3b6:	f1c5 0301 	rsbmi	r3, r5, #1
 801a3ba:	9304      	strmi	r3, [sp, #16]
 801a3bc:	2300      	movpl	r3, #0
 801a3be:	2300      	movmi	r3, #0
 801a3c0:	bf4c      	ite	mi
 801a3c2:	9305      	strmi	r3, [sp, #20]
 801a3c4:	9304      	strpl	r3, [sp, #16]
 801a3c6:	9b00      	ldr	r3, [sp, #0]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	db3d      	blt.n	801a448 <_dtoa_r+0x248>
 801a3cc:	9b05      	ldr	r3, [sp, #20]
 801a3ce:	9a00      	ldr	r2, [sp, #0]
 801a3d0:	920a      	str	r2, [sp, #40]	; 0x28
 801a3d2:	4413      	add	r3, r2
 801a3d4:	9305      	str	r3, [sp, #20]
 801a3d6:	2300      	movs	r3, #0
 801a3d8:	9307      	str	r3, [sp, #28]
 801a3da:	9b06      	ldr	r3, [sp, #24]
 801a3dc:	2b09      	cmp	r3, #9
 801a3de:	f200 8089 	bhi.w	801a4f4 <_dtoa_r+0x2f4>
 801a3e2:	2b05      	cmp	r3, #5
 801a3e4:	bfc4      	itt	gt
 801a3e6:	3b04      	subgt	r3, #4
 801a3e8:	9306      	strgt	r3, [sp, #24]
 801a3ea:	9b06      	ldr	r3, [sp, #24]
 801a3ec:	f1a3 0302 	sub.w	r3, r3, #2
 801a3f0:	bfcc      	ite	gt
 801a3f2:	2500      	movgt	r5, #0
 801a3f4:	2501      	movle	r5, #1
 801a3f6:	2b03      	cmp	r3, #3
 801a3f8:	f200 8087 	bhi.w	801a50a <_dtoa_r+0x30a>
 801a3fc:	e8df f003 	tbb	[pc, r3]
 801a400:	59383a2d 	.word	0x59383a2d
 801a404:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801a408:	441d      	add	r5, r3
 801a40a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a40e:	2b20      	cmp	r3, #32
 801a410:	bfc1      	itttt	gt
 801a412:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a416:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801a41a:	fa0b f303 	lslgt.w	r3, fp, r3
 801a41e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801a422:	bfda      	itte	le
 801a424:	f1c3 0320 	rsble	r3, r3, #32
 801a428:	fa06 f003 	lslle.w	r0, r6, r3
 801a42c:	4318      	orrgt	r0, r3
 801a42e:	f7f6 f869 	bl	8010504 <__aeabi_ui2d>
 801a432:	2301      	movs	r3, #1
 801a434:	4606      	mov	r6, r0
 801a436:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801a43a:	3d01      	subs	r5, #1
 801a43c:	930e      	str	r3, [sp, #56]	; 0x38
 801a43e:	e76a      	b.n	801a316 <_dtoa_r+0x116>
 801a440:	2301      	movs	r3, #1
 801a442:	e7b2      	b.n	801a3aa <_dtoa_r+0x1aa>
 801a444:	900b      	str	r0, [sp, #44]	; 0x2c
 801a446:	e7b1      	b.n	801a3ac <_dtoa_r+0x1ac>
 801a448:	9b04      	ldr	r3, [sp, #16]
 801a44a:	9a00      	ldr	r2, [sp, #0]
 801a44c:	1a9b      	subs	r3, r3, r2
 801a44e:	9304      	str	r3, [sp, #16]
 801a450:	4253      	negs	r3, r2
 801a452:	9307      	str	r3, [sp, #28]
 801a454:	2300      	movs	r3, #0
 801a456:	930a      	str	r3, [sp, #40]	; 0x28
 801a458:	e7bf      	b.n	801a3da <_dtoa_r+0x1da>
 801a45a:	2300      	movs	r3, #0
 801a45c:	9308      	str	r3, [sp, #32]
 801a45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a460:	2b00      	cmp	r3, #0
 801a462:	dc55      	bgt.n	801a510 <_dtoa_r+0x310>
 801a464:	2301      	movs	r3, #1
 801a466:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a46a:	461a      	mov	r2, r3
 801a46c:	9209      	str	r2, [sp, #36]	; 0x24
 801a46e:	e00c      	b.n	801a48a <_dtoa_r+0x28a>
 801a470:	2301      	movs	r3, #1
 801a472:	e7f3      	b.n	801a45c <_dtoa_r+0x25c>
 801a474:	2300      	movs	r3, #0
 801a476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a478:	9308      	str	r3, [sp, #32]
 801a47a:	9b00      	ldr	r3, [sp, #0]
 801a47c:	4413      	add	r3, r2
 801a47e:	9302      	str	r3, [sp, #8]
 801a480:	3301      	adds	r3, #1
 801a482:	2b01      	cmp	r3, #1
 801a484:	9303      	str	r3, [sp, #12]
 801a486:	bfb8      	it	lt
 801a488:	2301      	movlt	r3, #1
 801a48a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a48c:	2200      	movs	r2, #0
 801a48e:	6042      	str	r2, [r0, #4]
 801a490:	2204      	movs	r2, #4
 801a492:	f102 0614 	add.w	r6, r2, #20
 801a496:	429e      	cmp	r6, r3
 801a498:	6841      	ldr	r1, [r0, #4]
 801a49a:	d93d      	bls.n	801a518 <_dtoa_r+0x318>
 801a49c:	4620      	mov	r0, r4
 801a49e:	f000 fcb7 	bl	801ae10 <_Balloc>
 801a4a2:	9001      	str	r0, [sp, #4]
 801a4a4:	2800      	cmp	r0, #0
 801a4a6:	d13b      	bne.n	801a520 <_dtoa_r+0x320>
 801a4a8:	4b11      	ldr	r3, [pc, #68]	; (801a4f0 <_dtoa_r+0x2f0>)
 801a4aa:	4602      	mov	r2, r0
 801a4ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a4b0:	e6c0      	b.n	801a234 <_dtoa_r+0x34>
 801a4b2:	2301      	movs	r3, #1
 801a4b4:	e7df      	b.n	801a476 <_dtoa_r+0x276>
 801a4b6:	bf00      	nop
 801a4b8:	636f4361 	.word	0x636f4361
 801a4bc:	3fd287a7 	.word	0x3fd287a7
 801a4c0:	8b60c8b3 	.word	0x8b60c8b3
 801a4c4:	3fc68a28 	.word	0x3fc68a28
 801a4c8:	509f79fb 	.word	0x509f79fb
 801a4cc:	3fd34413 	.word	0x3fd34413
 801a4d0:	0801c325 	.word	0x0801c325
 801a4d4:	0801c33c 	.word	0x0801c33c
 801a4d8:	7ff00000 	.word	0x7ff00000
 801a4dc:	0801c321 	.word	0x0801c321
 801a4e0:	0801c318 	.word	0x0801c318
 801a4e4:	0801c2f5 	.word	0x0801c2f5
 801a4e8:	3ff80000 	.word	0x3ff80000
 801a4ec:	0801c430 	.word	0x0801c430
 801a4f0:	0801c397 	.word	0x0801c397
 801a4f4:	2501      	movs	r5, #1
 801a4f6:	2300      	movs	r3, #0
 801a4f8:	9306      	str	r3, [sp, #24]
 801a4fa:	9508      	str	r5, [sp, #32]
 801a4fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a500:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a504:	2200      	movs	r2, #0
 801a506:	2312      	movs	r3, #18
 801a508:	e7b0      	b.n	801a46c <_dtoa_r+0x26c>
 801a50a:	2301      	movs	r3, #1
 801a50c:	9308      	str	r3, [sp, #32]
 801a50e:	e7f5      	b.n	801a4fc <_dtoa_r+0x2fc>
 801a510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a512:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a516:	e7b8      	b.n	801a48a <_dtoa_r+0x28a>
 801a518:	3101      	adds	r1, #1
 801a51a:	6041      	str	r1, [r0, #4]
 801a51c:	0052      	lsls	r2, r2, #1
 801a51e:	e7b8      	b.n	801a492 <_dtoa_r+0x292>
 801a520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a522:	9a01      	ldr	r2, [sp, #4]
 801a524:	601a      	str	r2, [r3, #0]
 801a526:	9b03      	ldr	r3, [sp, #12]
 801a528:	2b0e      	cmp	r3, #14
 801a52a:	f200 809d 	bhi.w	801a668 <_dtoa_r+0x468>
 801a52e:	2d00      	cmp	r5, #0
 801a530:	f000 809a 	beq.w	801a668 <_dtoa_r+0x468>
 801a534:	9b00      	ldr	r3, [sp, #0]
 801a536:	2b00      	cmp	r3, #0
 801a538:	dd32      	ble.n	801a5a0 <_dtoa_r+0x3a0>
 801a53a:	4ab7      	ldr	r2, [pc, #732]	; (801a818 <_dtoa_r+0x618>)
 801a53c:	f003 030f 	and.w	r3, r3, #15
 801a540:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a544:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a548:	9b00      	ldr	r3, [sp, #0]
 801a54a:	05d8      	lsls	r0, r3, #23
 801a54c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801a550:	d516      	bpl.n	801a580 <_dtoa_r+0x380>
 801a552:	4bb2      	ldr	r3, [pc, #712]	; (801a81c <_dtoa_r+0x61c>)
 801a554:	ec51 0b19 	vmov	r0, r1, d9
 801a558:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a55c:	f7f6 f976 	bl	801084c <__aeabi_ddiv>
 801a560:	f007 070f 	and.w	r7, r7, #15
 801a564:	4682      	mov	sl, r0
 801a566:	468b      	mov	fp, r1
 801a568:	2503      	movs	r5, #3
 801a56a:	4eac      	ldr	r6, [pc, #688]	; (801a81c <_dtoa_r+0x61c>)
 801a56c:	b957      	cbnz	r7, 801a584 <_dtoa_r+0x384>
 801a56e:	4642      	mov	r2, r8
 801a570:	464b      	mov	r3, r9
 801a572:	4650      	mov	r0, sl
 801a574:	4659      	mov	r1, fp
 801a576:	f7f6 f969 	bl	801084c <__aeabi_ddiv>
 801a57a:	4682      	mov	sl, r0
 801a57c:	468b      	mov	fp, r1
 801a57e:	e028      	b.n	801a5d2 <_dtoa_r+0x3d2>
 801a580:	2502      	movs	r5, #2
 801a582:	e7f2      	b.n	801a56a <_dtoa_r+0x36a>
 801a584:	07f9      	lsls	r1, r7, #31
 801a586:	d508      	bpl.n	801a59a <_dtoa_r+0x39a>
 801a588:	4640      	mov	r0, r8
 801a58a:	4649      	mov	r1, r9
 801a58c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a590:	f7f6 f832 	bl	80105f8 <__aeabi_dmul>
 801a594:	3501      	adds	r5, #1
 801a596:	4680      	mov	r8, r0
 801a598:	4689      	mov	r9, r1
 801a59a:	107f      	asrs	r7, r7, #1
 801a59c:	3608      	adds	r6, #8
 801a59e:	e7e5      	b.n	801a56c <_dtoa_r+0x36c>
 801a5a0:	f000 809b 	beq.w	801a6da <_dtoa_r+0x4da>
 801a5a4:	9b00      	ldr	r3, [sp, #0]
 801a5a6:	4f9d      	ldr	r7, [pc, #628]	; (801a81c <_dtoa_r+0x61c>)
 801a5a8:	425e      	negs	r6, r3
 801a5aa:	4b9b      	ldr	r3, [pc, #620]	; (801a818 <_dtoa_r+0x618>)
 801a5ac:	f006 020f 	and.w	r2, r6, #15
 801a5b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b8:	ec51 0b19 	vmov	r0, r1, d9
 801a5bc:	f7f6 f81c 	bl	80105f8 <__aeabi_dmul>
 801a5c0:	1136      	asrs	r6, r6, #4
 801a5c2:	4682      	mov	sl, r0
 801a5c4:	468b      	mov	fp, r1
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	2502      	movs	r5, #2
 801a5ca:	2e00      	cmp	r6, #0
 801a5cc:	d17a      	bne.n	801a6c4 <_dtoa_r+0x4c4>
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d1d3      	bne.n	801a57a <_dtoa_r+0x37a>
 801a5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	f000 8082 	beq.w	801a6de <_dtoa_r+0x4de>
 801a5da:	4b91      	ldr	r3, [pc, #580]	; (801a820 <_dtoa_r+0x620>)
 801a5dc:	2200      	movs	r2, #0
 801a5de:	4650      	mov	r0, sl
 801a5e0:	4659      	mov	r1, fp
 801a5e2:	f7f6 fa7b 	bl	8010adc <__aeabi_dcmplt>
 801a5e6:	2800      	cmp	r0, #0
 801a5e8:	d079      	beq.n	801a6de <_dtoa_r+0x4de>
 801a5ea:	9b03      	ldr	r3, [sp, #12]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d076      	beq.n	801a6de <_dtoa_r+0x4de>
 801a5f0:	9b02      	ldr	r3, [sp, #8]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	dd36      	ble.n	801a664 <_dtoa_r+0x464>
 801a5f6:	9b00      	ldr	r3, [sp, #0]
 801a5f8:	4650      	mov	r0, sl
 801a5fa:	4659      	mov	r1, fp
 801a5fc:	1e5f      	subs	r7, r3, #1
 801a5fe:	2200      	movs	r2, #0
 801a600:	4b88      	ldr	r3, [pc, #544]	; (801a824 <_dtoa_r+0x624>)
 801a602:	f7f5 fff9 	bl	80105f8 <__aeabi_dmul>
 801a606:	9e02      	ldr	r6, [sp, #8]
 801a608:	4682      	mov	sl, r0
 801a60a:	468b      	mov	fp, r1
 801a60c:	3501      	adds	r5, #1
 801a60e:	4628      	mov	r0, r5
 801a610:	f7f5 ff88 	bl	8010524 <__aeabi_i2d>
 801a614:	4652      	mov	r2, sl
 801a616:	465b      	mov	r3, fp
 801a618:	f7f5 ffee 	bl	80105f8 <__aeabi_dmul>
 801a61c:	4b82      	ldr	r3, [pc, #520]	; (801a828 <_dtoa_r+0x628>)
 801a61e:	2200      	movs	r2, #0
 801a620:	f7f5 fe34 	bl	801028c <__adddf3>
 801a624:	46d0      	mov	r8, sl
 801a626:	46d9      	mov	r9, fp
 801a628:	4682      	mov	sl, r0
 801a62a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801a62e:	2e00      	cmp	r6, #0
 801a630:	d158      	bne.n	801a6e4 <_dtoa_r+0x4e4>
 801a632:	4b7e      	ldr	r3, [pc, #504]	; (801a82c <_dtoa_r+0x62c>)
 801a634:	2200      	movs	r2, #0
 801a636:	4640      	mov	r0, r8
 801a638:	4649      	mov	r1, r9
 801a63a:	f7f5 fe25 	bl	8010288 <__aeabi_dsub>
 801a63e:	4652      	mov	r2, sl
 801a640:	465b      	mov	r3, fp
 801a642:	4680      	mov	r8, r0
 801a644:	4689      	mov	r9, r1
 801a646:	f7f6 fa67 	bl	8010b18 <__aeabi_dcmpgt>
 801a64a:	2800      	cmp	r0, #0
 801a64c:	f040 8295 	bne.w	801ab7a <_dtoa_r+0x97a>
 801a650:	4652      	mov	r2, sl
 801a652:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a656:	4640      	mov	r0, r8
 801a658:	4649      	mov	r1, r9
 801a65a:	f7f6 fa3f 	bl	8010adc <__aeabi_dcmplt>
 801a65e:	2800      	cmp	r0, #0
 801a660:	f040 8289 	bne.w	801ab76 <_dtoa_r+0x976>
 801a664:	ec5b ab19 	vmov	sl, fp, d9
 801a668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	f2c0 8148 	blt.w	801a900 <_dtoa_r+0x700>
 801a670:	9a00      	ldr	r2, [sp, #0]
 801a672:	2a0e      	cmp	r2, #14
 801a674:	f300 8144 	bgt.w	801a900 <_dtoa_r+0x700>
 801a678:	4b67      	ldr	r3, [pc, #412]	; (801a818 <_dtoa_r+0x618>)
 801a67a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a67e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a684:	2b00      	cmp	r3, #0
 801a686:	f280 80d5 	bge.w	801a834 <_dtoa_r+0x634>
 801a68a:	9b03      	ldr	r3, [sp, #12]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	f300 80d1 	bgt.w	801a834 <_dtoa_r+0x634>
 801a692:	f040 826f 	bne.w	801ab74 <_dtoa_r+0x974>
 801a696:	4b65      	ldr	r3, [pc, #404]	; (801a82c <_dtoa_r+0x62c>)
 801a698:	2200      	movs	r2, #0
 801a69a:	4640      	mov	r0, r8
 801a69c:	4649      	mov	r1, r9
 801a69e:	f7f5 ffab 	bl	80105f8 <__aeabi_dmul>
 801a6a2:	4652      	mov	r2, sl
 801a6a4:	465b      	mov	r3, fp
 801a6a6:	f7f6 fa2d 	bl	8010b04 <__aeabi_dcmpge>
 801a6aa:	9e03      	ldr	r6, [sp, #12]
 801a6ac:	4637      	mov	r7, r6
 801a6ae:	2800      	cmp	r0, #0
 801a6b0:	f040 8245 	bne.w	801ab3e <_dtoa_r+0x93e>
 801a6b4:	9d01      	ldr	r5, [sp, #4]
 801a6b6:	2331      	movs	r3, #49	; 0x31
 801a6b8:	f805 3b01 	strb.w	r3, [r5], #1
 801a6bc:	9b00      	ldr	r3, [sp, #0]
 801a6be:	3301      	adds	r3, #1
 801a6c0:	9300      	str	r3, [sp, #0]
 801a6c2:	e240      	b.n	801ab46 <_dtoa_r+0x946>
 801a6c4:	07f2      	lsls	r2, r6, #31
 801a6c6:	d505      	bpl.n	801a6d4 <_dtoa_r+0x4d4>
 801a6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a6cc:	f7f5 ff94 	bl	80105f8 <__aeabi_dmul>
 801a6d0:	3501      	adds	r5, #1
 801a6d2:	2301      	movs	r3, #1
 801a6d4:	1076      	asrs	r6, r6, #1
 801a6d6:	3708      	adds	r7, #8
 801a6d8:	e777      	b.n	801a5ca <_dtoa_r+0x3ca>
 801a6da:	2502      	movs	r5, #2
 801a6dc:	e779      	b.n	801a5d2 <_dtoa_r+0x3d2>
 801a6de:	9f00      	ldr	r7, [sp, #0]
 801a6e0:	9e03      	ldr	r6, [sp, #12]
 801a6e2:	e794      	b.n	801a60e <_dtoa_r+0x40e>
 801a6e4:	9901      	ldr	r1, [sp, #4]
 801a6e6:	4b4c      	ldr	r3, [pc, #304]	; (801a818 <_dtoa_r+0x618>)
 801a6e8:	4431      	add	r1, r6
 801a6ea:	910d      	str	r1, [sp, #52]	; 0x34
 801a6ec:	9908      	ldr	r1, [sp, #32]
 801a6ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a6f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a6f6:	2900      	cmp	r1, #0
 801a6f8:	d043      	beq.n	801a782 <_dtoa_r+0x582>
 801a6fa:	494d      	ldr	r1, [pc, #308]	; (801a830 <_dtoa_r+0x630>)
 801a6fc:	2000      	movs	r0, #0
 801a6fe:	f7f6 f8a5 	bl	801084c <__aeabi_ddiv>
 801a702:	4652      	mov	r2, sl
 801a704:	465b      	mov	r3, fp
 801a706:	f7f5 fdbf 	bl	8010288 <__aeabi_dsub>
 801a70a:	9d01      	ldr	r5, [sp, #4]
 801a70c:	4682      	mov	sl, r0
 801a70e:	468b      	mov	fp, r1
 801a710:	4649      	mov	r1, r9
 801a712:	4640      	mov	r0, r8
 801a714:	f7f6 fa20 	bl	8010b58 <__aeabi_d2iz>
 801a718:	4606      	mov	r6, r0
 801a71a:	f7f5 ff03 	bl	8010524 <__aeabi_i2d>
 801a71e:	4602      	mov	r2, r0
 801a720:	460b      	mov	r3, r1
 801a722:	4640      	mov	r0, r8
 801a724:	4649      	mov	r1, r9
 801a726:	f7f5 fdaf 	bl	8010288 <__aeabi_dsub>
 801a72a:	3630      	adds	r6, #48	; 0x30
 801a72c:	f805 6b01 	strb.w	r6, [r5], #1
 801a730:	4652      	mov	r2, sl
 801a732:	465b      	mov	r3, fp
 801a734:	4680      	mov	r8, r0
 801a736:	4689      	mov	r9, r1
 801a738:	f7f6 f9d0 	bl	8010adc <__aeabi_dcmplt>
 801a73c:	2800      	cmp	r0, #0
 801a73e:	d163      	bne.n	801a808 <_dtoa_r+0x608>
 801a740:	4642      	mov	r2, r8
 801a742:	464b      	mov	r3, r9
 801a744:	4936      	ldr	r1, [pc, #216]	; (801a820 <_dtoa_r+0x620>)
 801a746:	2000      	movs	r0, #0
 801a748:	f7f5 fd9e 	bl	8010288 <__aeabi_dsub>
 801a74c:	4652      	mov	r2, sl
 801a74e:	465b      	mov	r3, fp
 801a750:	f7f6 f9c4 	bl	8010adc <__aeabi_dcmplt>
 801a754:	2800      	cmp	r0, #0
 801a756:	f040 80b5 	bne.w	801a8c4 <_dtoa_r+0x6c4>
 801a75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a75c:	429d      	cmp	r5, r3
 801a75e:	d081      	beq.n	801a664 <_dtoa_r+0x464>
 801a760:	4b30      	ldr	r3, [pc, #192]	; (801a824 <_dtoa_r+0x624>)
 801a762:	2200      	movs	r2, #0
 801a764:	4650      	mov	r0, sl
 801a766:	4659      	mov	r1, fp
 801a768:	f7f5 ff46 	bl	80105f8 <__aeabi_dmul>
 801a76c:	4b2d      	ldr	r3, [pc, #180]	; (801a824 <_dtoa_r+0x624>)
 801a76e:	4682      	mov	sl, r0
 801a770:	468b      	mov	fp, r1
 801a772:	4640      	mov	r0, r8
 801a774:	4649      	mov	r1, r9
 801a776:	2200      	movs	r2, #0
 801a778:	f7f5 ff3e 	bl	80105f8 <__aeabi_dmul>
 801a77c:	4680      	mov	r8, r0
 801a77e:	4689      	mov	r9, r1
 801a780:	e7c6      	b.n	801a710 <_dtoa_r+0x510>
 801a782:	4650      	mov	r0, sl
 801a784:	4659      	mov	r1, fp
 801a786:	f7f5 ff37 	bl	80105f8 <__aeabi_dmul>
 801a78a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a78c:	9d01      	ldr	r5, [sp, #4]
 801a78e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a790:	4682      	mov	sl, r0
 801a792:	468b      	mov	fp, r1
 801a794:	4649      	mov	r1, r9
 801a796:	4640      	mov	r0, r8
 801a798:	f7f6 f9de 	bl	8010b58 <__aeabi_d2iz>
 801a79c:	4606      	mov	r6, r0
 801a79e:	f7f5 fec1 	bl	8010524 <__aeabi_i2d>
 801a7a2:	3630      	adds	r6, #48	; 0x30
 801a7a4:	4602      	mov	r2, r0
 801a7a6:	460b      	mov	r3, r1
 801a7a8:	4640      	mov	r0, r8
 801a7aa:	4649      	mov	r1, r9
 801a7ac:	f7f5 fd6c 	bl	8010288 <__aeabi_dsub>
 801a7b0:	f805 6b01 	strb.w	r6, [r5], #1
 801a7b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a7b6:	429d      	cmp	r5, r3
 801a7b8:	4680      	mov	r8, r0
 801a7ba:	4689      	mov	r9, r1
 801a7bc:	f04f 0200 	mov.w	r2, #0
 801a7c0:	d124      	bne.n	801a80c <_dtoa_r+0x60c>
 801a7c2:	4b1b      	ldr	r3, [pc, #108]	; (801a830 <_dtoa_r+0x630>)
 801a7c4:	4650      	mov	r0, sl
 801a7c6:	4659      	mov	r1, fp
 801a7c8:	f7f5 fd60 	bl	801028c <__adddf3>
 801a7cc:	4602      	mov	r2, r0
 801a7ce:	460b      	mov	r3, r1
 801a7d0:	4640      	mov	r0, r8
 801a7d2:	4649      	mov	r1, r9
 801a7d4:	f7f6 f9a0 	bl	8010b18 <__aeabi_dcmpgt>
 801a7d8:	2800      	cmp	r0, #0
 801a7da:	d173      	bne.n	801a8c4 <_dtoa_r+0x6c4>
 801a7dc:	4652      	mov	r2, sl
 801a7de:	465b      	mov	r3, fp
 801a7e0:	4913      	ldr	r1, [pc, #76]	; (801a830 <_dtoa_r+0x630>)
 801a7e2:	2000      	movs	r0, #0
 801a7e4:	f7f5 fd50 	bl	8010288 <__aeabi_dsub>
 801a7e8:	4602      	mov	r2, r0
 801a7ea:	460b      	mov	r3, r1
 801a7ec:	4640      	mov	r0, r8
 801a7ee:	4649      	mov	r1, r9
 801a7f0:	f7f6 f974 	bl	8010adc <__aeabi_dcmplt>
 801a7f4:	2800      	cmp	r0, #0
 801a7f6:	f43f af35 	beq.w	801a664 <_dtoa_r+0x464>
 801a7fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801a7fc:	1e6b      	subs	r3, r5, #1
 801a7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801a800:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a804:	2b30      	cmp	r3, #48	; 0x30
 801a806:	d0f8      	beq.n	801a7fa <_dtoa_r+0x5fa>
 801a808:	9700      	str	r7, [sp, #0]
 801a80a:	e049      	b.n	801a8a0 <_dtoa_r+0x6a0>
 801a80c:	4b05      	ldr	r3, [pc, #20]	; (801a824 <_dtoa_r+0x624>)
 801a80e:	f7f5 fef3 	bl	80105f8 <__aeabi_dmul>
 801a812:	4680      	mov	r8, r0
 801a814:	4689      	mov	r9, r1
 801a816:	e7bd      	b.n	801a794 <_dtoa_r+0x594>
 801a818:	0801c430 	.word	0x0801c430
 801a81c:	0801c408 	.word	0x0801c408
 801a820:	3ff00000 	.word	0x3ff00000
 801a824:	40240000 	.word	0x40240000
 801a828:	401c0000 	.word	0x401c0000
 801a82c:	40140000 	.word	0x40140000
 801a830:	3fe00000 	.word	0x3fe00000
 801a834:	9d01      	ldr	r5, [sp, #4]
 801a836:	4656      	mov	r6, sl
 801a838:	465f      	mov	r7, fp
 801a83a:	4642      	mov	r2, r8
 801a83c:	464b      	mov	r3, r9
 801a83e:	4630      	mov	r0, r6
 801a840:	4639      	mov	r1, r7
 801a842:	f7f6 f803 	bl	801084c <__aeabi_ddiv>
 801a846:	f7f6 f987 	bl	8010b58 <__aeabi_d2iz>
 801a84a:	4682      	mov	sl, r0
 801a84c:	f7f5 fe6a 	bl	8010524 <__aeabi_i2d>
 801a850:	4642      	mov	r2, r8
 801a852:	464b      	mov	r3, r9
 801a854:	f7f5 fed0 	bl	80105f8 <__aeabi_dmul>
 801a858:	4602      	mov	r2, r0
 801a85a:	460b      	mov	r3, r1
 801a85c:	4630      	mov	r0, r6
 801a85e:	4639      	mov	r1, r7
 801a860:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801a864:	f7f5 fd10 	bl	8010288 <__aeabi_dsub>
 801a868:	f805 6b01 	strb.w	r6, [r5], #1
 801a86c:	9e01      	ldr	r6, [sp, #4]
 801a86e:	9f03      	ldr	r7, [sp, #12]
 801a870:	1bae      	subs	r6, r5, r6
 801a872:	42b7      	cmp	r7, r6
 801a874:	4602      	mov	r2, r0
 801a876:	460b      	mov	r3, r1
 801a878:	d135      	bne.n	801a8e6 <_dtoa_r+0x6e6>
 801a87a:	f7f5 fd07 	bl	801028c <__adddf3>
 801a87e:	4642      	mov	r2, r8
 801a880:	464b      	mov	r3, r9
 801a882:	4606      	mov	r6, r0
 801a884:	460f      	mov	r7, r1
 801a886:	f7f6 f947 	bl	8010b18 <__aeabi_dcmpgt>
 801a88a:	b9d0      	cbnz	r0, 801a8c2 <_dtoa_r+0x6c2>
 801a88c:	4642      	mov	r2, r8
 801a88e:	464b      	mov	r3, r9
 801a890:	4630      	mov	r0, r6
 801a892:	4639      	mov	r1, r7
 801a894:	f7f6 f918 	bl	8010ac8 <__aeabi_dcmpeq>
 801a898:	b110      	cbz	r0, 801a8a0 <_dtoa_r+0x6a0>
 801a89a:	f01a 0f01 	tst.w	sl, #1
 801a89e:	d110      	bne.n	801a8c2 <_dtoa_r+0x6c2>
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	ee18 1a10 	vmov	r1, s16
 801a8a6:	f000 faf3 	bl	801ae90 <_Bfree>
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	9800      	ldr	r0, [sp, #0]
 801a8ae:	702b      	strb	r3, [r5, #0]
 801a8b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8b2:	3001      	adds	r0, #1
 801a8b4:	6018      	str	r0, [r3, #0]
 801a8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	f43f acf1 	beq.w	801a2a0 <_dtoa_r+0xa0>
 801a8be:	601d      	str	r5, [r3, #0]
 801a8c0:	e4ee      	b.n	801a2a0 <_dtoa_r+0xa0>
 801a8c2:	9f00      	ldr	r7, [sp, #0]
 801a8c4:	462b      	mov	r3, r5
 801a8c6:	461d      	mov	r5, r3
 801a8c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a8cc:	2a39      	cmp	r2, #57	; 0x39
 801a8ce:	d106      	bne.n	801a8de <_dtoa_r+0x6de>
 801a8d0:	9a01      	ldr	r2, [sp, #4]
 801a8d2:	429a      	cmp	r2, r3
 801a8d4:	d1f7      	bne.n	801a8c6 <_dtoa_r+0x6c6>
 801a8d6:	9901      	ldr	r1, [sp, #4]
 801a8d8:	2230      	movs	r2, #48	; 0x30
 801a8da:	3701      	adds	r7, #1
 801a8dc:	700a      	strb	r2, [r1, #0]
 801a8de:	781a      	ldrb	r2, [r3, #0]
 801a8e0:	3201      	adds	r2, #1
 801a8e2:	701a      	strb	r2, [r3, #0]
 801a8e4:	e790      	b.n	801a808 <_dtoa_r+0x608>
 801a8e6:	4ba6      	ldr	r3, [pc, #664]	; (801ab80 <_dtoa_r+0x980>)
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	f7f5 fe85 	bl	80105f8 <__aeabi_dmul>
 801a8ee:	2200      	movs	r2, #0
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	4606      	mov	r6, r0
 801a8f4:	460f      	mov	r7, r1
 801a8f6:	f7f6 f8e7 	bl	8010ac8 <__aeabi_dcmpeq>
 801a8fa:	2800      	cmp	r0, #0
 801a8fc:	d09d      	beq.n	801a83a <_dtoa_r+0x63a>
 801a8fe:	e7cf      	b.n	801a8a0 <_dtoa_r+0x6a0>
 801a900:	9a08      	ldr	r2, [sp, #32]
 801a902:	2a00      	cmp	r2, #0
 801a904:	f000 80d7 	beq.w	801aab6 <_dtoa_r+0x8b6>
 801a908:	9a06      	ldr	r2, [sp, #24]
 801a90a:	2a01      	cmp	r2, #1
 801a90c:	f300 80ba 	bgt.w	801aa84 <_dtoa_r+0x884>
 801a910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a912:	2a00      	cmp	r2, #0
 801a914:	f000 80b2 	beq.w	801aa7c <_dtoa_r+0x87c>
 801a918:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a91c:	9e07      	ldr	r6, [sp, #28]
 801a91e:	9d04      	ldr	r5, [sp, #16]
 801a920:	9a04      	ldr	r2, [sp, #16]
 801a922:	441a      	add	r2, r3
 801a924:	9204      	str	r2, [sp, #16]
 801a926:	9a05      	ldr	r2, [sp, #20]
 801a928:	2101      	movs	r1, #1
 801a92a:	441a      	add	r2, r3
 801a92c:	4620      	mov	r0, r4
 801a92e:	9205      	str	r2, [sp, #20]
 801a930:	f000 fb66 	bl	801b000 <__i2b>
 801a934:	4607      	mov	r7, r0
 801a936:	2d00      	cmp	r5, #0
 801a938:	dd0c      	ble.n	801a954 <_dtoa_r+0x754>
 801a93a:	9b05      	ldr	r3, [sp, #20]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	dd09      	ble.n	801a954 <_dtoa_r+0x754>
 801a940:	42ab      	cmp	r3, r5
 801a942:	9a04      	ldr	r2, [sp, #16]
 801a944:	bfa8      	it	ge
 801a946:	462b      	movge	r3, r5
 801a948:	1ad2      	subs	r2, r2, r3
 801a94a:	9204      	str	r2, [sp, #16]
 801a94c:	9a05      	ldr	r2, [sp, #20]
 801a94e:	1aed      	subs	r5, r5, r3
 801a950:	1ad3      	subs	r3, r2, r3
 801a952:	9305      	str	r3, [sp, #20]
 801a954:	9b07      	ldr	r3, [sp, #28]
 801a956:	b31b      	cbz	r3, 801a9a0 <_dtoa_r+0x7a0>
 801a958:	9b08      	ldr	r3, [sp, #32]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	f000 80af 	beq.w	801aabe <_dtoa_r+0x8be>
 801a960:	2e00      	cmp	r6, #0
 801a962:	dd13      	ble.n	801a98c <_dtoa_r+0x78c>
 801a964:	4639      	mov	r1, r7
 801a966:	4632      	mov	r2, r6
 801a968:	4620      	mov	r0, r4
 801a96a:	f000 fc09 	bl	801b180 <__pow5mult>
 801a96e:	ee18 2a10 	vmov	r2, s16
 801a972:	4601      	mov	r1, r0
 801a974:	4607      	mov	r7, r0
 801a976:	4620      	mov	r0, r4
 801a978:	f000 fb58 	bl	801b02c <__multiply>
 801a97c:	ee18 1a10 	vmov	r1, s16
 801a980:	4680      	mov	r8, r0
 801a982:	4620      	mov	r0, r4
 801a984:	f000 fa84 	bl	801ae90 <_Bfree>
 801a988:	ee08 8a10 	vmov	s16, r8
 801a98c:	9b07      	ldr	r3, [sp, #28]
 801a98e:	1b9a      	subs	r2, r3, r6
 801a990:	d006      	beq.n	801a9a0 <_dtoa_r+0x7a0>
 801a992:	ee18 1a10 	vmov	r1, s16
 801a996:	4620      	mov	r0, r4
 801a998:	f000 fbf2 	bl	801b180 <__pow5mult>
 801a99c:	ee08 0a10 	vmov	s16, r0
 801a9a0:	2101      	movs	r1, #1
 801a9a2:	4620      	mov	r0, r4
 801a9a4:	f000 fb2c 	bl	801b000 <__i2b>
 801a9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	4606      	mov	r6, r0
 801a9ae:	f340 8088 	ble.w	801aac2 <_dtoa_r+0x8c2>
 801a9b2:	461a      	mov	r2, r3
 801a9b4:	4601      	mov	r1, r0
 801a9b6:	4620      	mov	r0, r4
 801a9b8:	f000 fbe2 	bl	801b180 <__pow5mult>
 801a9bc:	9b06      	ldr	r3, [sp, #24]
 801a9be:	2b01      	cmp	r3, #1
 801a9c0:	4606      	mov	r6, r0
 801a9c2:	f340 8081 	ble.w	801aac8 <_dtoa_r+0x8c8>
 801a9c6:	f04f 0800 	mov.w	r8, #0
 801a9ca:	6933      	ldr	r3, [r6, #16]
 801a9cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a9d0:	6918      	ldr	r0, [r3, #16]
 801a9d2:	f000 fac5 	bl	801af60 <__hi0bits>
 801a9d6:	f1c0 0020 	rsb	r0, r0, #32
 801a9da:	9b05      	ldr	r3, [sp, #20]
 801a9dc:	4418      	add	r0, r3
 801a9de:	f010 001f 	ands.w	r0, r0, #31
 801a9e2:	f000 8092 	beq.w	801ab0a <_dtoa_r+0x90a>
 801a9e6:	f1c0 0320 	rsb	r3, r0, #32
 801a9ea:	2b04      	cmp	r3, #4
 801a9ec:	f340 808a 	ble.w	801ab04 <_dtoa_r+0x904>
 801a9f0:	f1c0 001c 	rsb	r0, r0, #28
 801a9f4:	9b04      	ldr	r3, [sp, #16]
 801a9f6:	4403      	add	r3, r0
 801a9f8:	9304      	str	r3, [sp, #16]
 801a9fa:	9b05      	ldr	r3, [sp, #20]
 801a9fc:	4403      	add	r3, r0
 801a9fe:	4405      	add	r5, r0
 801aa00:	9305      	str	r3, [sp, #20]
 801aa02:	9b04      	ldr	r3, [sp, #16]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	dd07      	ble.n	801aa18 <_dtoa_r+0x818>
 801aa08:	ee18 1a10 	vmov	r1, s16
 801aa0c:	461a      	mov	r2, r3
 801aa0e:	4620      	mov	r0, r4
 801aa10:	f000 fc10 	bl	801b234 <__lshift>
 801aa14:	ee08 0a10 	vmov	s16, r0
 801aa18:	9b05      	ldr	r3, [sp, #20]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	dd05      	ble.n	801aa2a <_dtoa_r+0x82a>
 801aa1e:	4631      	mov	r1, r6
 801aa20:	461a      	mov	r2, r3
 801aa22:	4620      	mov	r0, r4
 801aa24:	f000 fc06 	bl	801b234 <__lshift>
 801aa28:	4606      	mov	r6, r0
 801aa2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d06e      	beq.n	801ab0e <_dtoa_r+0x90e>
 801aa30:	ee18 0a10 	vmov	r0, s16
 801aa34:	4631      	mov	r1, r6
 801aa36:	f000 fc6d 	bl	801b314 <__mcmp>
 801aa3a:	2800      	cmp	r0, #0
 801aa3c:	da67      	bge.n	801ab0e <_dtoa_r+0x90e>
 801aa3e:	9b00      	ldr	r3, [sp, #0]
 801aa40:	3b01      	subs	r3, #1
 801aa42:	ee18 1a10 	vmov	r1, s16
 801aa46:	9300      	str	r3, [sp, #0]
 801aa48:	220a      	movs	r2, #10
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	4620      	mov	r0, r4
 801aa4e:	f000 fa41 	bl	801aed4 <__multadd>
 801aa52:	9b08      	ldr	r3, [sp, #32]
 801aa54:	ee08 0a10 	vmov	s16, r0
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	f000 81b1 	beq.w	801adc0 <_dtoa_r+0xbc0>
 801aa5e:	2300      	movs	r3, #0
 801aa60:	4639      	mov	r1, r7
 801aa62:	220a      	movs	r2, #10
 801aa64:	4620      	mov	r0, r4
 801aa66:	f000 fa35 	bl	801aed4 <__multadd>
 801aa6a:	9b02      	ldr	r3, [sp, #8]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	4607      	mov	r7, r0
 801aa70:	f300 808e 	bgt.w	801ab90 <_dtoa_r+0x990>
 801aa74:	9b06      	ldr	r3, [sp, #24]
 801aa76:	2b02      	cmp	r3, #2
 801aa78:	dc51      	bgt.n	801ab1e <_dtoa_r+0x91e>
 801aa7a:	e089      	b.n	801ab90 <_dtoa_r+0x990>
 801aa7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801aa82:	e74b      	b.n	801a91c <_dtoa_r+0x71c>
 801aa84:	9b03      	ldr	r3, [sp, #12]
 801aa86:	1e5e      	subs	r6, r3, #1
 801aa88:	9b07      	ldr	r3, [sp, #28]
 801aa8a:	42b3      	cmp	r3, r6
 801aa8c:	bfbf      	itttt	lt
 801aa8e:	9b07      	ldrlt	r3, [sp, #28]
 801aa90:	9607      	strlt	r6, [sp, #28]
 801aa92:	1af2      	sublt	r2, r6, r3
 801aa94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801aa96:	bfb6      	itet	lt
 801aa98:	189b      	addlt	r3, r3, r2
 801aa9a:	1b9e      	subge	r6, r3, r6
 801aa9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801aa9e:	9b03      	ldr	r3, [sp, #12]
 801aaa0:	bfb8      	it	lt
 801aaa2:	2600      	movlt	r6, #0
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	bfb7      	itett	lt
 801aaa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801aaac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801aab0:	1a9d      	sublt	r5, r3, r2
 801aab2:	2300      	movlt	r3, #0
 801aab4:	e734      	b.n	801a920 <_dtoa_r+0x720>
 801aab6:	9e07      	ldr	r6, [sp, #28]
 801aab8:	9d04      	ldr	r5, [sp, #16]
 801aaba:	9f08      	ldr	r7, [sp, #32]
 801aabc:	e73b      	b.n	801a936 <_dtoa_r+0x736>
 801aabe:	9a07      	ldr	r2, [sp, #28]
 801aac0:	e767      	b.n	801a992 <_dtoa_r+0x792>
 801aac2:	9b06      	ldr	r3, [sp, #24]
 801aac4:	2b01      	cmp	r3, #1
 801aac6:	dc18      	bgt.n	801aafa <_dtoa_r+0x8fa>
 801aac8:	f1ba 0f00 	cmp.w	sl, #0
 801aacc:	d115      	bne.n	801aafa <_dtoa_r+0x8fa>
 801aace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aad2:	b993      	cbnz	r3, 801aafa <_dtoa_r+0x8fa>
 801aad4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801aad8:	0d1b      	lsrs	r3, r3, #20
 801aada:	051b      	lsls	r3, r3, #20
 801aadc:	b183      	cbz	r3, 801ab00 <_dtoa_r+0x900>
 801aade:	9b04      	ldr	r3, [sp, #16]
 801aae0:	3301      	adds	r3, #1
 801aae2:	9304      	str	r3, [sp, #16]
 801aae4:	9b05      	ldr	r3, [sp, #20]
 801aae6:	3301      	adds	r3, #1
 801aae8:	9305      	str	r3, [sp, #20]
 801aaea:	f04f 0801 	mov.w	r8, #1
 801aaee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	f47f af6a 	bne.w	801a9ca <_dtoa_r+0x7ca>
 801aaf6:	2001      	movs	r0, #1
 801aaf8:	e76f      	b.n	801a9da <_dtoa_r+0x7da>
 801aafa:	f04f 0800 	mov.w	r8, #0
 801aafe:	e7f6      	b.n	801aaee <_dtoa_r+0x8ee>
 801ab00:	4698      	mov	r8, r3
 801ab02:	e7f4      	b.n	801aaee <_dtoa_r+0x8ee>
 801ab04:	f43f af7d 	beq.w	801aa02 <_dtoa_r+0x802>
 801ab08:	4618      	mov	r0, r3
 801ab0a:	301c      	adds	r0, #28
 801ab0c:	e772      	b.n	801a9f4 <_dtoa_r+0x7f4>
 801ab0e:	9b03      	ldr	r3, [sp, #12]
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	dc37      	bgt.n	801ab84 <_dtoa_r+0x984>
 801ab14:	9b06      	ldr	r3, [sp, #24]
 801ab16:	2b02      	cmp	r3, #2
 801ab18:	dd34      	ble.n	801ab84 <_dtoa_r+0x984>
 801ab1a:	9b03      	ldr	r3, [sp, #12]
 801ab1c:	9302      	str	r3, [sp, #8]
 801ab1e:	9b02      	ldr	r3, [sp, #8]
 801ab20:	b96b      	cbnz	r3, 801ab3e <_dtoa_r+0x93e>
 801ab22:	4631      	mov	r1, r6
 801ab24:	2205      	movs	r2, #5
 801ab26:	4620      	mov	r0, r4
 801ab28:	f000 f9d4 	bl	801aed4 <__multadd>
 801ab2c:	4601      	mov	r1, r0
 801ab2e:	4606      	mov	r6, r0
 801ab30:	ee18 0a10 	vmov	r0, s16
 801ab34:	f000 fbee 	bl	801b314 <__mcmp>
 801ab38:	2800      	cmp	r0, #0
 801ab3a:	f73f adbb 	bgt.w	801a6b4 <_dtoa_r+0x4b4>
 801ab3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab40:	9d01      	ldr	r5, [sp, #4]
 801ab42:	43db      	mvns	r3, r3
 801ab44:	9300      	str	r3, [sp, #0]
 801ab46:	f04f 0800 	mov.w	r8, #0
 801ab4a:	4631      	mov	r1, r6
 801ab4c:	4620      	mov	r0, r4
 801ab4e:	f000 f99f 	bl	801ae90 <_Bfree>
 801ab52:	2f00      	cmp	r7, #0
 801ab54:	f43f aea4 	beq.w	801a8a0 <_dtoa_r+0x6a0>
 801ab58:	f1b8 0f00 	cmp.w	r8, #0
 801ab5c:	d005      	beq.n	801ab6a <_dtoa_r+0x96a>
 801ab5e:	45b8      	cmp	r8, r7
 801ab60:	d003      	beq.n	801ab6a <_dtoa_r+0x96a>
 801ab62:	4641      	mov	r1, r8
 801ab64:	4620      	mov	r0, r4
 801ab66:	f000 f993 	bl	801ae90 <_Bfree>
 801ab6a:	4639      	mov	r1, r7
 801ab6c:	4620      	mov	r0, r4
 801ab6e:	f000 f98f 	bl	801ae90 <_Bfree>
 801ab72:	e695      	b.n	801a8a0 <_dtoa_r+0x6a0>
 801ab74:	2600      	movs	r6, #0
 801ab76:	4637      	mov	r7, r6
 801ab78:	e7e1      	b.n	801ab3e <_dtoa_r+0x93e>
 801ab7a:	9700      	str	r7, [sp, #0]
 801ab7c:	4637      	mov	r7, r6
 801ab7e:	e599      	b.n	801a6b4 <_dtoa_r+0x4b4>
 801ab80:	40240000 	.word	0x40240000
 801ab84:	9b08      	ldr	r3, [sp, #32]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	f000 80ca 	beq.w	801ad20 <_dtoa_r+0xb20>
 801ab8c:	9b03      	ldr	r3, [sp, #12]
 801ab8e:	9302      	str	r3, [sp, #8]
 801ab90:	2d00      	cmp	r5, #0
 801ab92:	dd05      	ble.n	801aba0 <_dtoa_r+0x9a0>
 801ab94:	4639      	mov	r1, r7
 801ab96:	462a      	mov	r2, r5
 801ab98:	4620      	mov	r0, r4
 801ab9a:	f000 fb4b 	bl	801b234 <__lshift>
 801ab9e:	4607      	mov	r7, r0
 801aba0:	f1b8 0f00 	cmp.w	r8, #0
 801aba4:	d05b      	beq.n	801ac5e <_dtoa_r+0xa5e>
 801aba6:	6879      	ldr	r1, [r7, #4]
 801aba8:	4620      	mov	r0, r4
 801abaa:	f000 f931 	bl	801ae10 <_Balloc>
 801abae:	4605      	mov	r5, r0
 801abb0:	b928      	cbnz	r0, 801abbe <_dtoa_r+0x9be>
 801abb2:	4b87      	ldr	r3, [pc, #540]	; (801add0 <_dtoa_r+0xbd0>)
 801abb4:	4602      	mov	r2, r0
 801abb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801abba:	f7ff bb3b 	b.w	801a234 <_dtoa_r+0x34>
 801abbe:	693a      	ldr	r2, [r7, #16]
 801abc0:	3202      	adds	r2, #2
 801abc2:	0092      	lsls	r2, r2, #2
 801abc4:	f107 010c 	add.w	r1, r7, #12
 801abc8:	300c      	adds	r0, #12
 801abca:	f000 f913 	bl	801adf4 <memcpy>
 801abce:	2201      	movs	r2, #1
 801abd0:	4629      	mov	r1, r5
 801abd2:	4620      	mov	r0, r4
 801abd4:	f000 fb2e 	bl	801b234 <__lshift>
 801abd8:	9b01      	ldr	r3, [sp, #4]
 801abda:	f103 0901 	add.w	r9, r3, #1
 801abde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801abe2:	4413      	add	r3, r2
 801abe4:	9305      	str	r3, [sp, #20]
 801abe6:	f00a 0301 	and.w	r3, sl, #1
 801abea:	46b8      	mov	r8, r7
 801abec:	9304      	str	r3, [sp, #16]
 801abee:	4607      	mov	r7, r0
 801abf0:	4631      	mov	r1, r6
 801abf2:	ee18 0a10 	vmov	r0, s16
 801abf6:	f7ff fa75 	bl	801a0e4 <quorem>
 801abfa:	4641      	mov	r1, r8
 801abfc:	9002      	str	r0, [sp, #8]
 801abfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801ac02:	ee18 0a10 	vmov	r0, s16
 801ac06:	f000 fb85 	bl	801b314 <__mcmp>
 801ac0a:	463a      	mov	r2, r7
 801ac0c:	9003      	str	r0, [sp, #12]
 801ac0e:	4631      	mov	r1, r6
 801ac10:	4620      	mov	r0, r4
 801ac12:	f000 fb9b 	bl	801b34c <__mdiff>
 801ac16:	68c2      	ldr	r2, [r0, #12]
 801ac18:	f109 3bff 	add.w	fp, r9, #4294967295
 801ac1c:	4605      	mov	r5, r0
 801ac1e:	bb02      	cbnz	r2, 801ac62 <_dtoa_r+0xa62>
 801ac20:	4601      	mov	r1, r0
 801ac22:	ee18 0a10 	vmov	r0, s16
 801ac26:	f000 fb75 	bl	801b314 <__mcmp>
 801ac2a:	4602      	mov	r2, r0
 801ac2c:	4629      	mov	r1, r5
 801ac2e:	4620      	mov	r0, r4
 801ac30:	9207      	str	r2, [sp, #28]
 801ac32:	f000 f92d 	bl	801ae90 <_Bfree>
 801ac36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801ac3a:	ea43 0102 	orr.w	r1, r3, r2
 801ac3e:	9b04      	ldr	r3, [sp, #16]
 801ac40:	430b      	orrs	r3, r1
 801ac42:	464d      	mov	r5, r9
 801ac44:	d10f      	bne.n	801ac66 <_dtoa_r+0xa66>
 801ac46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ac4a:	d02a      	beq.n	801aca2 <_dtoa_r+0xaa2>
 801ac4c:	9b03      	ldr	r3, [sp, #12]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	dd02      	ble.n	801ac58 <_dtoa_r+0xa58>
 801ac52:	9b02      	ldr	r3, [sp, #8]
 801ac54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801ac58:	f88b a000 	strb.w	sl, [fp]
 801ac5c:	e775      	b.n	801ab4a <_dtoa_r+0x94a>
 801ac5e:	4638      	mov	r0, r7
 801ac60:	e7ba      	b.n	801abd8 <_dtoa_r+0x9d8>
 801ac62:	2201      	movs	r2, #1
 801ac64:	e7e2      	b.n	801ac2c <_dtoa_r+0xa2c>
 801ac66:	9b03      	ldr	r3, [sp, #12]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	db04      	blt.n	801ac76 <_dtoa_r+0xa76>
 801ac6c:	9906      	ldr	r1, [sp, #24]
 801ac6e:	430b      	orrs	r3, r1
 801ac70:	9904      	ldr	r1, [sp, #16]
 801ac72:	430b      	orrs	r3, r1
 801ac74:	d122      	bne.n	801acbc <_dtoa_r+0xabc>
 801ac76:	2a00      	cmp	r2, #0
 801ac78:	ddee      	ble.n	801ac58 <_dtoa_r+0xa58>
 801ac7a:	ee18 1a10 	vmov	r1, s16
 801ac7e:	2201      	movs	r2, #1
 801ac80:	4620      	mov	r0, r4
 801ac82:	f000 fad7 	bl	801b234 <__lshift>
 801ac86:	4631      	mov	r1, r6
 801ac88:	ee08 0a10 	vmov	s16, r0
 801ac8c:	f000 fb42 	bl	801b314 <__mcmp>
 801ac90:	2800      	cmp	r0, #0
 801ac92:	dc03      	bgt.n	801ac9c <_dtoa_r+0xa9c>
 801ac94:	d1e0      	bne.n	801ac58 <_dtoa_r+0xa58>
 801ac96:	f01a 0f01 	tst.w	sl, #1
 801ac9a:	d0dd      	beq.n	801ac58 <_dtoa_r+0xa58>
 801ac9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801aca0:	d1d7      	bne.n	801ac52 <_dtoa_r+0xa52>
 801aca2:	2339      	movs	r3, #57	; 0x39
 801aca4:	f88b 3000 	strb.w	r3, [fp]
 801aca8:	462b      	mov	r3, r5
 801acaa:	461d      	mov	r5, r3
 801acac:	3b01      	subs	r3, #1
 801acae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801acb2:	2a39      	cmp	r2, #57	; 0x39
 801acb4:	d071      	beq.n	801ad9a <_dtoa_r+0xb9a>
 801acb6:	3201      	adds	r2, #1
 801acb8:	701a      	strb	r2, [r3, #0]
 801acba:	e746      	b.n	801ab4a <_dtoa_r+0x94a>
 801acbc:	2a00      	cmp	r2, #0
 801acbe:	dd07      	ble.n	801acd0 <_dtoa_r+0xad0>
 801acc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801acc4:	d0ed      	beq.n	801aca2 <_dtoa_r+0xaa2>
 801acc6:	f10a 0301 	add.w	r3, sl, #1
 801acca:	f88b 3000 	strb.w	r3, [fp]
 801acce:	e73c      	b.n	801ab4a <_dtoa_r+0x94a>
 801acd0:	9b05      	ldr	r3, [sp, #20]
 801acd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 801acd6:	4599      	cmp	r9, r3
 801acd8:	d047      	beq.n	801ad6a <_dtoa_r+0xb6a>
 801acda:	ee18 1a10 	vmov	r1, s16
 801acde:	2300      	movs	r3, #0
 801ace0:	220a      	movs	r2, #10
 801ace2:	4620      	mov	r0, r4
 801ace4:	f000 f8f6 	bl	801aed4 <__multadd>
 801ace8:	45b8      	cmp	r8, r7
 801acea:	ee08 0a10 	vmov	s16, r0
 801acee:	f04f 0300 	mov.w	r3, #0
 801acf2:	f04f 020a 	mov.w	r2, #10
 801acf6:	4641      	mov	r1, r8
 801acf8:	4620      	mov	r0, r4
 801acfa:	d106      	bne.n	801ad0a <_dtoa_r+0xb0a>
 801acfc:	f000 f8ea 	bl	801aed4 <__multadd>
 801ad00:	4680      	mov	r8, r0
 801ad02:	4607      	mov	r7, r0
 801ad04:	f109 0901 	add.w	r9, r9, #1
 801ad08:	e772      	b.n	801abf0 <_dtoa_r+0x9f0>
 801ad0a:	f000 f8e3 	bl	801aed4 <__multadd>
 801ad0e:	4639      	mov	r1, r7
 801ad10:	4680      	mov	r8, r0
 801ad12:	2300      	movs	r3, #0
 801ad14:	220a      	movs	r2, #10
 801ad16:	4620      	mov	r0, r4
 801ad18:	f000 f8dc 	bl	801aed4 <__multadd>
 801ad1c:	4607      	mov	r7, r0
 801ad1e:	e7f1      	b.n	801ad04 <_dtoa_r+0xb04>
 801ad20:	9b03      	ldr	r3, [sp, #12]
 801ad22:	9302      	str	r3, [sp, #8]
 801ad24:	9d01      	ldr	r5, [sp, #4]
 801ad26:	ee18 0a10 	vmov	r0, s16
 801ad2a:	4631      	mov	r1, r6
 801ad2c:	f7ff f9da 	bl	801a0e4 <quorem>
 801ad30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801ad34:	9b01      	ldr	r3, [sp, #4]
 801ad36:	f805 ab01 	strb.w	sl, [r5], #1
 801ad3a:	1aea      	subs	r2, r5, r3
 801ad3c:	9b02      	ldr	r3, [sp, #8]
 801ad3e:	4293      	cmp	r3, r2
 801ad40:	dd09      	ble.n	801ad56 <_dtoa_r+0xb56>
 801ad42:	ee18 1a10 	vmov	r1, s16
 801ad46:	2300      	movs	r3, #0
 801ad48:	220a      	movs	r2, #10
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	f000 f8c2 	bl	801aed4 <__multadd>
 801ad50:	ee08 0a10 	vmov	s16, r0
 801ad54:	e7e7      	b.n	801ad26 <_dtoa_r+0xb26>
 801ad56:	9b02      	ldr	r3, [sp, #8]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	bfc8      	it	gt
 801ad5c:	461d      	movgt	r5, r3
 801ad5e:	9b01      	ldr	r3, [sp, #4]
 801ad60:	bfd8      	it	le
 801ad62:	2501      	movle	r5, #1
 801ad64:	441d      	add	r5, r3
 801ad66:	f04f 0800 	mov.w	r8, #0
 801ad6a:	ee18 1a10 	vmov	r1, s16
 801ad6e:	2201      	movs	r2, #1
 801ad70:	4620      	mov	r0, r4
 801ad72:	f000 fa5f 	bl	801b234 <__lshift>
 801ad76:	4631      	mov	r1, r6
 801ad78:	ee08 0a10 	vmov	s16, r0
 801ad7c:	f000 faca 	bl	801b314 <__mcmp>
 801ad80:	2800      	cmp	r0, #0
 801ad82:	dc91      	bgt.n	801aca8 <_dtoa_r+0xaa8>
 801ad84:	d102      	bne.n	801ad8c <_dtoa_r+0xb8c>
 801ad86:	f01a 0f01 	tst.w	sl, #1
 801ad8a:	d18d      	bne.n	801aca8 <_dtoa_r+0xaa8>
 801ad8c:	462b      	mov	r3, r5
 801ad8e:	461d      	mov	r5, r3
 801ad90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ad94:	2a30      	cmp	r2, #48	; 0x30
 801ad96:	d0fa      	beq.n	801ad8e <_dtoa_r+0xb8e>
 801ad98:	e6d7      	b.n	801ab4a <_dtoa_r+0x94a>
 801ad9a:	9a01      	ldr	r2, [sp, #4]
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	d184      	bne.n	801acaa <_dtoa_r+0xaaa>
 801ada0:	9b00      	ldr	r3, [sp, #0]
 801ada2:	3301      	adds	r3, #1
 801ada4:	9300      	str	r3, [sp, #0]
 801ada6:	2331      	movs	r3, #49	; 0x31
 801ada8:	7013      	strb	r3, [r2, #0]
 801adaa:	e6ce      	b.n	801ab4a <_dtoa_r+0x94a>
 801adac:	4b09      	ldr	r3, [pc, #36]	; (801add4 <_dtoa_r+0xbd4>)
 801adae:	f7ff ba95 	b.w	801a2dc <_dtoa_r+0xdc>
 801adb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	f47f aa6e 	bne.w	801a296 <_dtoa_r+0x96>
 801adba:	4b07      	ldr	r3, [pc, #28]	; (801add8 <_dtoa_r+0xbd8>)
 801adbc:	f7ff ba8e 	b.w	801a2dc <_dtoa_r+0xdc>
 801adc0:	9b02      	ldr	r3, [sp, #8]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	dcae      	bgt.n	801ad24 <_dtoa_r+0xb24>
 801adc6:	9b06      	ldr	r3, [sp, #24]
 801adc8:	2b02      	cmp	r3, #2
 801adca:	f73f aea8 	bgt.w	801ab1e <_dtoa_r+0x91e>
 801adce:	e7a9      	b.n	801ad24 <_dtoa_r+0xb24>
 801add0:	0801c397 	.word	0x0801c397
 801add4:	0801c2f4 	.word	0x0801c2f4
 801add8:	0801c318 	.word	0x0801c318

0801addc <_localeconv_r>:
 801addc:	4800      	ldr	r0, [pc, #0]	; (801ade0 <_localeconv_r+0x4>)
 801adde:	4770      	bx	lr
 801ade0:	200002e4 	.word	0x200002e4

0801ade4 <malloc>:
 801ade4:	4b02      	ldr	r3, [pc, #8]	; (801adf0 <malloc+0xc>)
 801ade6:	4601      	mov	r1, r0
 801ade8:	6818      	ldr	r0, [r3, #0]
 801adea:	f000 bc17 	b.w	801b61c <_malloc_r>
 801adee:	bf00      	nop
 801adf0:	20000190 	.word	0x20000190

0801adf4 <memcpy>:
 801adf4:	440a      	add	r2, r1
 801adf6:	4291      	cmp	r1, r2
 801adf8:	f100 33ff 	add.w	r3, r0, #4294967295
 801adfc:	d100      	bne.n	801ae00 <memcpy+0xc>
 801adfe:	4770      	bx	lr
 801ae00:	b510      	push	{r4, lr}
 801ae02:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae06:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ae0a:	4291      	cmp	r1, r2
 801ae0c:	d1f9      	bne.n	801ae02 <memcpy+0xe>
 801ae0e:	bd10      	pop	{r4, pc}

0801ae10 <_Balloc>:
 801ae10:	b570      	push	{r4, r5, r6, lr}
 801ae12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ae14:	4604      	mov	r4, r0
 801ae16:	460d      	mov	r5, r1
 801ae18:	b976      	cbnz	r6, 801ae38 <_Balloc+0x28>
 801ae1a:	2010      	movs	r0, #16
 801ae1c:	f7ff ffe2 	bl	801ade4 <malloc>
 801ae20:	4602      	mov	r2, r0
 801ae22:	6260      	str	r0, [r4, #36]	; 0x24
 801ae24:	b920      	cbnz	r0, 801ae30 <_Balloc+0x20>
 801ae26:	4b18      	ldr	r3, [pc, #96]	; (801ae88 <_Balloc+0x78>)
 801ae28:	4818      	ldr	r0, [pc, #96]	; (801ae8c <_Balloc+0x7c>)
 801ae2a:	2166      	movs	r1, #102	; 0x66
 801ae2c:	f000 fc7a 	bl	801b724 <__assert_func>
 801ae30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ae34:	6006      	str	r6, [r0, #0]
 801ae36:	60c6      	str	r6, [r0, #12]
 801ae38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ae3a:	68f3      	ldr	r3, [r6, #12]
 801ae3c:	b183      	cbz	r3, 801ae60 <_Balloc+0x50>
 801ae3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae40:	68db      	ldr	r3, [r3, #12]
 801ae42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ae46:	b9b8      	cbnz	r0, 801ae78 <_Balloc+0x68>
 801ae48:	2101      	movs	r1, #1
 801ae4a:	fa01 f605 	lsl.w	r6, r1, r5
 801ae4e:	1d72      	adds	r2, r6, #5
 801ae50:	0092      	lsls	r2, r2, #2
 801ae52:	4620      	mov	r0, r4
 801ae54:	f000 fb60 	bl	801b518 <_calloc_r>
 801ae58:	b160      	cbz	r0, 801ae74 <_Balloc+0x64>
 801ae5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ae5e:	e00e      	b.n	801ae7e <_Balloc+0x6e>
 801ae60:	2221      	movs	r2, #33	; 0x21
 801ae62:	2104      	movs	r1, #4
 801ae64:	4620      	mov	r0, r4
 801ae66:	f000 fb57 	bl	801b518 <_calloc_r>
 801ae6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae6c:	60f0      	str	r0, [r6, #12]
 801ae6e:	68db      	ldr	r3, [r3, #12]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d1e4      	bne.n	801ae3e <_Balloc+0x2e>
 801ae74:	2000      	movs	r0, #0
 801ae76:	bd70      	pop	{r4, r5, r6, pc}
 801ae78:	6802      	ldr	r2, [r0, #0]
 801ae7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ae7e:	2300      	movs	r3, #0
 801ae80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ae84:	e7f7      	b.n	801ae76 <_Balloc+0x66>
 801ae86:	bf00      	nop
 801ae88:	0801c325 	.word	0x0801c325
 801ae8c:	0801c3a8 	.word	0x0801c3a8

0801ae90 <_Bfree>:
 801ae90:	b570      	push	{r4, r5, r6, lr}
 801ae92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ae94:	4605      	mov	r5, r0
 801ae96:	460c      	mov	r4, r1
 801ae98:	b976      	cbnz	r6, 801aeb8 <_Bfree+0x28>
 801ae9a:	2010      	movs	r0, #16
 801ae9c:	f7ff ffa2 	bl	801ade4 <malloc>
 801aea0:	4602      	mov	r2, r0
 801aea2:	6268      	str	r0, [r5, #36]	; 0x24
 801aea4:	b920      	cbnz	r0, 801aeb0 <_Bfree+0x20>
 801aea6:	4b09      	ldr	r3, [pc, #36]	; (801aecc <_Bfree+0x3c>)
 801aea8:	4809      	ldr	r0, [pc, #36]	; (801aed0 <_Bfree+0x40>)
 801aeaa:	218a      	movs	r1, #138	; 0x8a
 801aeac:	f000 fc3a 	bl	801b724 <__assert_func>
 801aeb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801aeb4:	6006      	str	r6, [r0, #0]
 801aeb6:	60c6      	str	r6, [r0, #12]
 801aeb8:	b13c      	cbz	r4, 801aeca <_Bfree+0x3a>
 801aeba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801aebc:	6862      	ldr	r2, [r4, #4]
 801aebe:	68db      	ldr	r3, [r3, #12]
 801aec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801aec4:	6021      	str	r1, [r4, #0]
 801aec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801aeca:	bd70      	pop	{r4, r5, r6, pc}
 801aecc:	0801c325 	.word	0x0801c325
 801aed0:	0801c3a8 	.word	0x0801c3a8

0801aed4 <__multadd>:
 801aed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aed8:	690d      	ldr	r5, [r1, #16]
 801aeda:	4607      	mov	r7, r0
 801aedc:	460c      	mov	r4, r1
 801aede:	461e      	mov	r6, r3
 801aee0:	f101 0c14 	add.w	ip, r1, #20
 801aee4:	2000      	movs	r0, #0
 801aee6:	f8dc 3000 	ldr.w	r3, [ip]
 801aeea:	b299      	uxth	r1, r3
 801aeec:	fb02 6101 	mla	r1, r2, r1, r6
 801aef0:	0c1e      	lsrs	r6, r3, #16
 801aef2:	0c0b      	lsrs	r3, r1, #16
 801aef4:	fb02 3306 	mla	r3, r2, r6, r3
 801aef8:	b289      	uxth	r1, r1
 801aefa:	3001      	adds	r0, #1
 801aefc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801af00:	4285      	cmp	r5, r0
 801af02:	f84c 1b04 	str.w	r1, [ip], #4
 801af06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801af0a:	dcec      	bgt.n	801aee6 <__multadd+0x12>
 801af0c:	b30e      	cbz	r6, 801af52 <__multadd+0x7e>
 801af0e:	68a3      	ldr	r3, [r4, #8]
 801af10:	42ab      	cmp	r3, r5
 801af12:	dc19      	bgt.n	801af48 <__multadd+0x74>
 801af14:	6861      	ldr	r1, [r4, #4]
 801af16:	4638      	mov	r0, r7
 801af18:	3101      	adds	r1, #1
 801af1a:	f7ff ff79 	bl	801ae10 <_Balloc>
 801af1e:	4680      	mov	r8, r0
 801af20:	b928      	cbnz	r0, 801af2e <__multadd+0x5a>
 801af22:	4602      	mov	r2, r0
 801af24:	4b0c      	ldr	r3, [pc, #48]	; (801af58 <__multadd+0x84>)
 801af26:	480d      	ldr	r0, [pc, #52]	; (801af5c <__multadd+0x88>)
 801af28:	21b5      	movs	r1, #181	; 0xb5
 801af2a:	f000 fbfb 	bl	801b724 <__assert_func>
 801af2e:	6922      	ldr	r2, [r4, #16]
 801af30:	3202      	adds	r2, #2
 801af32:	f104 010c 	add.w	r1, r4, #12
 801af36:	0092      	lsls	r2, r2, #2
 801af38:	300c      	adds	r0, #12
 801af3a:	f7ff ff5b 	bl	801adf4 <memcpy>
 801af3e:	4621      	mov	r1, r4
 801af40:	4638      	mov	r0, r7
 801af42:	f7ff ffa5 	bl	801ae90 <_Bfree>
 801af46:	4644      	mov	r4, r8
 801af48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801af4c:	3501      	adds	r5, #1
 801af4e:	615e      	str	r6, [r3, #20]
 801af50:	6125      	str	r5, [r4, #16]
 801af52:	4620      	mov	r0, r4
 801af54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af58:	0801c397 	.word	0x0801c397
 801af5c:	0801c3a8 	.word	0x0801c3a8

0801af60 <__hi0bits>:
 801af60:	0c03      	lsrs	r3, r0, #16
 801af62:	041b      	lsls	r3, r3, #16
 801af64:	b9d3      	cbnz	r3, 801af9c <__hi0bits+0x3c>
 801af66:	0400      	lsls	r0, r0, #16
 801af68:	2310      	movs	r3, #16
 801af6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801af6e:	bf04      	itt	eq
 801af70:	0200      	lsleq	r0, r0, #8
 801af72:	3308      	addeq	r3, #8
 801af74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801af78:	bf04      	itt	eq
 801af7a:	0100      	lsleq	r0, r0, #4
 801af7c:	3304      	addeq	r3, #4
 801af7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801af82:	bf04      	itt	eq
 801af84:	0080      	lsleq	r0, r0, #2
 801af86:	3302      	addeq	r3, #2
 801af88:	2800      	cmp	r0, #0
 801af8a:	db05      	blt.n	801af98 <__hi0bits+0x38>
 801af8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801af90:	f103 0301 	add.w	r3, r3, #1
 801af94:	bf08      	it	eq
 801af96:	2320      	moveq	r3, #32
 801af98:	4618      	mov	r0, r3
 801af9a:	4770      	bx	lr
 801af9c:	2300      	movs	r3, #0
 801af9e:	e7e4      	b.n	801af6a <__hi0bits+0xa>

0801afa0 <__lo0bits>:
 801afa0:	6803      	ldr	r3, [r0, #0]
 801afa2:	f013 0207 	ands.w	r2, r3, #7
 801afa6:	4601      	mov	r1, r0
 801afa8:	d00b      	beq.n	801afc2 <__lo0bits+0x22>
 801afaa:	07da      	lsls	r2, r3, #31
 801afac:	d423      	bmi.n	801aff6 <__lo0bits+0x56>
 801afae:	0798      	lsls	r0, r3, #30
 801afb0:	bf49      	itett	mi
 801afb2:	085b      	lsrmi	r3, r3, #1
 801afb4:	089b      	lsrpl	r3, r3, #2
 801afb6:	2001      	movmi	r0, #1
 801afb8:	600b      	strmi	r3, [r1, #0]
 801afba:	bf5c      	itt	pl
 801afbc:	600b      	strpl	r3, [r1, #0]
 801afbe:	2002      	movpl	r0, #2
 801afc0:	4770      	bx	lr
 801afc2:	b298      	uxth	r0, r3
 801afc4:	b9a8      	cbnz	r0, 801aff2 <__lo0bits+0x52>
 801afc6:	0c1b      	lsrs	r3, r3, #16
 801afc8:	2010      	movs	r0, #16
 801afca:	b2da      	uxtb	r2, r3
 801afcc:	b90a      	cbnz	r2, 801afd2 <__lo0bits+0x32>
 801afce:	3008      	adds	r0, #8
 801afd0:	0a1b      	lsrs	r3, r3, #8
 801afd2:	071a      	lsls	r2, r3, #28
 801afd4:	bf04      	itt	eq
 801afd6:	091b      	lsreq	r3, r3, #4
 801afd8:	3004      	addeq	r0, #4
 801afda:	079a      	lsls	r2, r3, #30
 801afdc:	bf04      	itt	eq
 801afde:	089b      	lsreq	r3, r3, #2
 801afe0:	3002      	addeq	r0, #2
 801afe2:	07da      	lsls	r2, r3, #31
 801afe4:	d403      	bmi.n	801afee <__lo0bits+0x4e>
 801afe6:	085b      	lsrs	r3, r3, #1
 801afe8:	f100 0001 	add.w	r0, r0, #1
 801afec:	d005      	beq.n	801affa <__lo0bits+0x5a>
 801afee:	600b      	str	r3, [r1, #0]
 801aff0:	4770      	bx	lr
 801aff2:	4610      	mov	r0, r2
 801aff4:	e7e9      	b.n	801afca <__lo0bits+0x2a>
 801aff6:	2000      	movs	r0, #0
 801aff8:	4770      	bx	lr
 801affa:	2020      	movs	r0, #32
 801affc:	4770      	bx	lr
	...

0801b000 <__i2b>:
 801b000:	b510      	push	{r4, lr}
 801b002:	460c      	mov	r4, r1
 801b004:	2101      	movs	r1, #1
 801b006:	f7ff ff03 	bl	801ae10 <_Balloc>
 801b00a:	4602      	mov	r2, r0
 801b00c:	b928      	cbnz	r0, 801b01a <__i2b+0x1a>
 801b00e:	4b05      	ldr	r3, [pc, #20]	; (801b024 <__i2b+0x24>)
 801b010:	4805      	ldr	r0, [pc, #20]	; (801b028 <__i2b+0x28>)
 801b012:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b016:	f000 fb85 	bl	801b724 <__assert_func>
 801b01a:	2301      	movs	r3, #1
 801b01c:	6144      	str	r4, [r0, #20]
 801b01e:	6103      	str	r3, [r0, #16]
 801b020:	bd10      	pop	{r4, pc}
 801b022:	bf00      	nop
 801b024:	0801c397 	.word	0x0801c397
 801b028:	0801c3a8 	.word	0x0801c3a8

0801b02c <__multiply>:
 801b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b030:	4691      	mov	r9, r2
 801b032:	690a      	ldr	r2, [r1, #16]
 801b034:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b038:	429a      	cmp	r2, r3
 801b03a:	bfb8      	it	lt
 801b03c:	460b      	movlt	r3, r1
 801b03e:	460c      	mov	r4, r1
 801b040:	bfbc      	itt	lt
 801b042:	464c      	movlt	r4, r9
 801b044:	4699      	movlt	r9, r3
 801b046:	6927      	ldr	r7, [r4, #16]
 801b048:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b04c:	68a3      	ldr	r3, [r4, #8]
 801b04e:	6861      	ldr	r1, [r4, #4]
 801b050:	eb07 060a 	add.w	r6, r7, sl
 801b054:	42b3      	cmp	r3, r6
 801b056:	b085      	sub	sp, #20
 801b058:	bfb8      	it	lt
 801b05a:	3101      	addlt	r1, #1
 801b05c:	f7ff fed8 	bl	801ae10 <_Balloc>
 801b060:	b930      	cbnz	r0, 801b070 <__multiply+0x44>
 801b062:	4602      	mov	r2, r0
 801b064:	4b44      	ldr	r3, [pc, #272]	; (801b178 <__multiply+0x14c>)
 801b066:	4845      	ldr	r0, [pc, #276]	; (801b17c <__multiply+0x150>)
 801b068:	f240 115d 	movw	r1, #349	; 0x15d
 801b06c:	f000 fb5a 	bl	801b724 <__assert_func>
 801b070:	f100 0514 	add.w	r5, r0, #20
 801b074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b078:	462b      	mov	r3, r5
 801b07a:	2200      	movs	r2, #0
 801b07c:	4543      	cmp	r3, r8
 801b07e:	d321      	bcc.n	801b0c4 <__multiply+0x98>
 801b080:	f104 0314 	add.w	r3, r4, #20
 801b084:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b088:	f109 0314 	add.w	r3, r9, #20
 801b08c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b090:	9202      	str	r2, [sp, #8]
 801b092:	1b3a      	subs	r2, r7, r4
 801b094:	3a15      	subs	r2, #21
 801b096:	f022 0203 	bic.w	r2, r2, #3
 801b09a:	3204      	adds	r2, #4
 801b09c:	f104 0115 	add.w	r1, r4, #21
 801b0a0:	428f      	cmp	r7, r1
 801b0a2:	bf38      	it	cc
 801b0a4:	2204      	movcc	r2, #4
 801b0a6:	9201      	str	r2, [sp, #4]
 801b0a8:	9a02      	ldr	r2, [sp, #8]
 801b0aa:	9303      	str	r3, [sp, #12]
 801b0ac:	429a      	cmp	r2, r3
 801b0ae:	d80c      	bhi.n	801b0ca <__multiply+0x9e>
 801b0b0:	2e00      	cmp	r6, #0
 801b0b2:	dd03      	ble.n	801b0bc <__multiply+0x90>
 801b0b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d05a      	beq.n	801b172 <__multiply+0x146>
 801b0bc:	6106      	str	r6, [r0, #16]
 801b0be:	b005      	add	sp, #20
 801b0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0c4:	f843 2b04 	str.w	r2, [r3], #4
 801b0c8:	e7d8      	b.n	801b07c <__multiply+0x50>
 801b0ca:	f8b3 a000 	ldrh.w	sl, [r3]
 801b0ce:	f1ba 0f00 	cmp.w	sl, #0
 801b0d2:	d024      	beq.n	801b11e <__multiply+0xf2>
 801b0d4:	f104 0e14 	add.w	lr, r4, #20
 801b0d8:	46a9      	mov	r9, r5
 801b0da:	f04f 0c00 	mov.w	ip, #0
 801b0de:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b0e2:	f8d9 1000 	ldr.w	r1, [r9]
 801b0e6:	fa1f fb82 	uxth.w	fp, r2
 801b0ea:	b289      	uxth	r1, r1
 801b0ec:	fb0a 110b 	mla	r1, sl, fp, r1
 801b0f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b0f4:	f8d9 2000 	ldr.w	r2, [r9]
 801b0f8:	4461      	add	r1, ip
 801b0fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b0fe:	fb0a c20b 	mla	r2, sl, fp, ip
 801b102:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b106:	b289      	uxth	r1, r1
 801b108:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b10c:	4577      	cmp	r7, lr
 801b10e:	f849 1b04 	str.w	r1, [r9], #4
 801b112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b116:	d8e2      	bhi.n	801b0de <__multiply+0xb2>
 801b118:	9a01      	ldr	r2, [sp, #4]
 801b11a:	f845 c002 	str.w	ip, [r5, r2]
 801b11e:	9a03      	ldr	r2, [sp, #12]
 801b120:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b124:	3304      	adds	r3, #4
 801b126:	f1b9 0f00 	cmp.w	r9, #0
 801b12a:	d020      	beq.n	801b16e <__multiply+0x142>
 801b12c:	6829      	ldr	r1, [r5, #0]
 801b12e:	f104 0c14 	add.w	ip, r4, #20
 801b132:	46ae      	mov	lr, r5
 801b134:	f04f 0a00 	mov.w	sl, #0
 801b138:	f8bc b000 	ldrh.w	fp, [ip]
 801b13c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b140:	fb09 220b 	mla	r2, r9, fp, r2
 801b144:	4492      	add	sl, r2
 801b146:	b289      	uxth	r1, r1
 801b148:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801b14c:	f84e 1b04 	str.w	r1, [lr], #4
 801b150:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b154:	f8be 1000 	ldrh.w	r1, [lr]
 801b158:	0c12      	lsrs	r2, r2, #16
 801b15a:	fb09 1102 	mla	r1, r9, r2, r1
 801b15e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801b162:	4567      	cmp	r7, ip
 801b164:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b168:	d8e6      	bhi.n	801b138 <__multiply+0x10c>
 801b16a:	9a01      	ldr	r2, [sp, #4]
 801b16c:	50a9      	str	r1, [r5, r2]
 801b16e:	3504      	adds	r5, #4
 801b170:	e79a      	b.n	801b0a8 <__multiply+0x7c>
 801b172:	3e01      	subs	r6, #1
 801b174:	e79c      	b.n	801b0b0 <__multiply+0x84>
 801b176:	bf00      	nop
 801b178:	0801c397 	.word	0x0801c397
 801b17c:	0801c3a8 	.word	0x0801c3a8

0801b180 <__pow5mult>:
 801b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b184:	4615      	mov	r5, r2
 801b186:	f012 0203 	ands.w	r2, r2, #3
 801b18a:	4606      	mov	r6, r0
 801b18c:	460f      	mov	r7, r1
 801b18e:	d007      	beq.n	801b1a0 <__pow5mult+0x20>
 801b190:	4c25      	ldr	r4, [pc, #148]	; (801b228 <__pow5mult+0xa8>)
 801b192:	3a01      	subs	r2, #1
 801b194:	2300      	movs	r3, #0
 801b196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b19a:	f7ff fe9b 	bl	801aed4 <__multadd>
 801b19e:	4607      	mov	r7, r0
 801b1a0:	10ad      	asrs	r5, r5, #2
 801b1a2:	d03d      	beq.n	801b220 <__pow5mult+0xa0>
 801b1a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b1a6:	b97c      	cbnz	r4, 801b1c8 <__pow5mult+0x48>
 801b1a8:	2010      	movs	r0, #16
 801b1aa:	f7ff fe1b 	bl	801ade4 <malloc>
 801b1ae:	4602      	mov	r2, r0
 801b1b0:	6270      	str	r0, [r6, #36]	; 0x24
 801b1b2:	b928      	cbnz	r0, 801b1c0 <__pow5mult+0x40>
 801b1b4:	4b1d      	ldr	r3, [pc, #116]	; (801b22c <__pow5mult+0xac>)
 801b1b6:	481e      	ldr	r0, [pc, #120]	; (801b230 <__pow5mult+0xb0>)
 801b1b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b1bc:	f000 fab2 	bl	801b724 <__assert_func>
 801b1c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b1c4:	6004      	str	r4, [r0, #0]
 801b1c6:	60c4      	str	r4, [r0, #12]
 801b1c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b1cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b1d0:	b94c      	cbnz	r4, 801b1e6 <__pow5mult+0x66>
 801b1d2:	f240 2171 	movw	r1, #625	; 0x271
 801b1d6:	4630      	mov	r0, r6
 801b1d8:	f7ff ff12 	bl	801b000 <__i2b>
 801b1dc:	2300      	movs	r3, #0
 801b1de:	f8c8 0008 	str.w	r0, [r8, #8]
 801b1e2:	4604      	mov	r4, r0
 801b1e4:	6003      	str	r3, [r0, #0]
 801b1e6:	f04f 0900 	mov.w	r9, #0
 801b1ea:	07eb      	lsls	r3, r5, #31
 801b1ec:	d50a      	bpl.n	801b204 <__pow5mult+0x84>
 801b1ee:	4639      	mov	r1, r7
 801b1f0:	4622      	mov	r2, r4
 801b1f2:	4630      	mov	r0, r6
 801b1f4:	f7ff ff1a 	bl	801b02c <__multiply>
 801b1f8:	4639      	mov	r1, r7
 801b1fa:	4680      	mov	r8, r0
 801b1fc:	4630      	mov	r0, r6
 801b1fe:	f7ff fe47 	bl	801ae90 <_Bfree>
 801b202:	4647      	mov	r7, r8
 801b204:	106d      	asrs	r5, r5, #1
 801b206:	d00b      	beq.n	801b220 <__pow5mult+0xa0>
 801b208:	6820      	ldr	r0, [r4, #0]
 801b20a:	b938      	cbnz	r0, 801b21c <__pow5mult+0x9c>
 801b20c:	4622      	mov	r2, r4
 801b20e:	4621      	mov	r1, r4
 801b210:	4630      	mov	r0, r6
 801b212:	f7ff ff0b 	bl	801b02c <__multiply>
 801b216:	6020      	str	r0, [r4, #0]
 801b218:	f8c0 9000 	str.w	r9, [r0]
 801b21c:	4604      	mov	r4, r0
 801b21e:	e7e4      	b.n	801b1ea <__pow5mult+0x6a>
 801b220:	4638      	mov	r0, r7
 801b222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b226:	bf00      	nop
 801b228:	0801c4f8 	.word	0x0801c4f8
 801b22c:	0801c325 	.word	0x0801c325
 801b230:	0801c3a8 	.word	0x0801c3a8

0801b234 <__lshift>:
 801b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b238:	460c      	mov	r4, r1
 801b23a:	6849      	ldr	r1, [r1, #4]
 801b23c:	6923      	ldr	r3, [r4, #16]
 801b23e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b242:	68a3      	ldr	r3, [r4, #8]
 801b244:	4607      	mov	r7, r0
 801b246:	4691      	mov	r9, r2
 801b248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b24c:	f108 0601 	add.w	r6, r8, #1
 801b250:	42b3      	cmp	r3, r6
 801b252:	db0b      	blt.n	801b26c <__lshift+0x38>
 801b254:	4638      	mov	r0, r7
 801b256:	f7ff fddb 	bl	801ae10 <_Balloc>
 801b25a:	4605      	mov	r5, r0
 801b25c:	b948      	cbnz	r0, 801b272 <__lshift+0x3e>
 801b25e:	4602      	mov	r2, r0
 801b260:	4b2a      	ldr	r3, [pc, #168]	; (801b30c <__lshift+0xd8>)
 801b262:	482b      	ldr	r0, [pc, #172]	; (801b310 <__lshift+0xdc>)
 801b264:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b268:	f000 fa5c 	bl	801b724 <__assert_func>
 801b26c:	3101      	adds	r1, #1
 801b26e:	005b      	lsls	r3, r3, #1
 801b270:	e7ee      	b.n	801b250 <__lshift+0x1c>
 801b272:	2300      	movs	r3, #0
 801b274:	f100 0114 	add.w	r1, r0, #20
 801b278:	f100 0210 	add.w	r2, r0, #16
 801b27c:	4618      	mov	r0, r3
 801b27e:	4553      	cmp	r3, sl
 801b280:	db37      	blt.n	801b2f2 <__lshift+0xbe>
 801b282:	6920      	ldr	r0, [r4, #16]
 801b284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b288:	f104 0314 	add.w	r3, r4, #20
 801b28c:	f019 091f 	ands.w	r9, r9, #31
 801b290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b294:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b298:	d02f      	beq.n	801b2fa <__lshift+0xc6>
 801b29a:	f1c9 0e20 	rsb	lr, r9, #32
 801b29e:	468a      	mov	sl, r1
 801b2a0:	f04f 0c00 	mov.w	ip, #0
 801b2a4:	681a      	ldr	r2, [r3, #0]
 801b2a6:	fa02 f209 	lsl.w	r2, r2, r9
 801b2aa:	ea42 020c 	orr.w	r2, r2, ip
 801b2ae:	f84a 2b04 	str.w	r2, [sl], #4
 801b2b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2b6:	4298      	cmp	r0, r3
 801b2b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 801b2bc:	d8f2      	bhi.n	801b2a4 <__lshift+0x70>
 801b2be:	1b03      	subs	r3, r0, r4
 801b2c0:	3b15      	subs	r3, #21
 801b2c2:	f023 0303 	bic.w	r3, r3, #3
 801b2c6:	3304      	adds	r3, #4
 801b2c8:	f104 0215 	add.w	r2, r4, #21
 801b2cc:	4290      	cmp	r0, r2
 801b2ce:	bf38      	it	cc
 801b2d0:	2304      	movcc	r3, #4
 801b2d2:	f841 c003 	str.w	ip, [r1, r3]
 801b2d6:	f1bc 0f00 	cmp.w	ip, #0
 801b2da:	d001      	beq.n	801b2e0 <__lshift+0xac>
 801b2dc:	f108 0602 	add.w	r6, r8, #2
 801b2e0:	3e01      	subs	r6, #1
 801b2e2:	4638      	mov	r0, r7
 801b2e4:	612e      	str	r6, [r5, #16]
 801b2e6:	4621      	mov	r1, r4
 801b2e8:	f7ff fdd2 	bl	801ae90 <_Bfree>
 801b2ec:	4628      	mov	r0, r5
 801b2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2f2:	f842 0f04 	str.w	r0, [r2, #4]!
 801b2f6:	3301      	adds	r3, #1
 801b2f8:	e7c1      	b.n	801b27e <__lshift+0x4a>
 801b2fa:	3904      	subs	r1, #4
 801b2fc:	f853 2b04 	ldr.w	r2, [r3], #4
 801b300:	f841 2f04 	str.w	r2, [r1, #4]!
 801b304:	4298      	cmp	r0, r3
 801b306:	d8f9      	bhi.n	801b2fc <__lshift+0xc8>
 801b308:	e7ea      	b.n	801b2e0 <__lshift+0xac>
 801b30a:	bf00      	nop
 801b30c:	0801c397 	.word	0x0801c397
 801b310:	0801c3a8 	.word	0x0801c3a8

0801b314 <__mcmp>:
 801b314:	b530      	push	{r4, r5, lr}
 801b316:	6902      	ldr	r2, [r0, #16]
 801b318:	690c      	ldr	r4, [r1, #16]
 801b31a:	1b12      	subs	r2, r2, r4
 801b31c:	d10e      	bne.n	801b33c <__mcmp+0x28>
 801b31e:	f100 0314 	add.w	r3, r0, #20
 801b322:	3114      	adds	r1, #20
 801b324:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b328:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b32c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b330:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b334:	42a5      	cmp	r5, r4
 801b336:	d003      	beq.n	801b340 <__mcmp+0x2c>
 801b338:	d305      	bcc.n	801b346 <__mcmp+0x32>
 801b33a:	2201      	movs	r2, #1
 801b33c:	4610      	mov	r0, r2
 801b33e:	bd30      	pop	{r4, r5, pc}
 801b340:	4283      	cmp	r3, r0
 801b342:	d3f3      	bcc.n	801b32c <__mcmp+0x18>
 801b344:	e7fa      	b.n	801b33c <__mcmp+0x28>
 801b346:	f04f 32ff 	mov.w	r2, #4294967295
 801b34a:	e7f7      	b.n	801b33c <__mcmp+0x28>

0801b34c <__mdiff>:
 801b34c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b350:	460c      	mov	r4, r1
 801b352:	4606      	mov	r6, r0
 801b354:	4611      	mov	r1, r2
 801b356:	4620      	mov	r0, r4
 801b358:	4690      	mov	r8, r2
 801b35a:	f7ff ffdb 	bl	801b314 <__mcmp>
 801b35e:	1e05      	subs	r5, r0, #0
 801b360:	d110      	bne.n	801b384 <__mdiff+0x38>
 801b362:	4629      	mov	r1, r5
 801b364:	4630      	mov	r0, r6
 801b366:	f7ff fd53 	bl	801ae10 <_Balloc>
 801b36a:	b930      	cbnz	r0, 801b37a <__mdiff+0x2e>
 801b36c:	4b3a      	ldr	r3, [pc, #232]	; (801b458 <__mdiff+0x10c>)
 801b36e:	4602      	mov	r2, r0
 801b370:	f240 2132 	movw	r1, #562	; 0x232
 801b374:	4839      	ldr	r0, [pc, #228]	; (801b45c <__mdiff+0x110>)
 801b376:	f000 f9d5 	bl	801b724 <__assert_func>
 801b37a:	2301      	movs	r3, #1
 801b37c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b384:	bfa4      	itt	ge
 801b386:	4643      	movge	r3, r8
 801b388:	46a0      	movge	r8, r4
 801b38a:	4630      	mov	r0, r6
 801b38c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b390:	bfa6      	itte	ge
 801b392:	461c      	movge	r4, r3
 801b394:	2500      	movge	r5, #0
 801b396:	2501      	movlt	r5, #1
 801b398:	f7ff fd3a 	bl	801ae10 <_Balloc>
 801b39c:	b920      	cbnz	r0, 801b3a8 <__mdiff+0x5c>
 801b39e:	4b2e      	ldr	r3, [pc, #184]	; (801b458 <__mdiff+0x10c>)
 801b3a0:	4602      	mov	r2, r0
 801b3a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b3a6:	e7e5      	b.n	801b374 <__mdiff+0x28>
 801b3a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b3ac:	6926      	ldr	r6, [r4, #16]
 801b3ae:	60c5      	str	r5, [r0, #12]
 801b3b0:	f104 0914 	add.w	r9, r4, #20
 801b3b4:	f108 0514 	add.w	r5, r8, #20
 801b3b8:	f100 0e14 	add.w	lr, r0, #20
 801b3bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b3c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b3c4:	f108 0210 	add.w	r2, r8, #16
 801b3c8:	46f2      	mov	sl, lr
 801b3ca:	2100      	movs	r1, #0
 801b3cc:	f859 3b04 	ldr.w	r3, [r9], #4
 801b3d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b3d4:	fa1f f883 	uxth.w	r8, r3
 801b3d8:	fa11 f18b 	uxtah	r1, r1, fp
 801b3dc:	0c1b      	lsrs	r3, r3, #16
 801b3de:	eba1 0808 	sub.w	r8, r1, r8
 801b3e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b3e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b3ea:	fa1f f888 	uxth.w	r8, r8
 801b3ee:	1419      	asrs	r1, r3, #16
 801b3f0:	454e      	cmp	r6, r9
 801b3f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b3f6:	f84a 3b04 	str.w	r3, [sl], #4
 801b3fa:	d8e7      	bhi.n	801b3cc <__mdiff+0x80>
 801b3fc:	1b33      	subs	r3, r6, r4
 801b3fe:	3b15      	subs	r3, #21
 801b400:	f023 0303 	bic.w	r3, r3, #3
 801b404:	3304      	adds	r3, #4
 801b406:	3415      	adds	r4, #21
 801b408:	42a6      	cmp	r6, r4
 801b40a:	bf38      	it	cc
 801b40c:	2304      	movcc	r3, #4
 801b40e:	441d      	add	r5, r3
 801b410:	4473      	add	r3, lr
 801b412:	469e      	mov	lr, r3
 801b414:	462e      	mov	r6, r5
 801b416:	4566      	cmp	r6, ip
 801b418:	d30e      	bcc.n	801b438 <__mdiff+0xec>
 801b41a:	f10c 0203 	add.w	r2, ip, #3
 801b41e:	1b52      	subs	r2, r2, r5
 801b420:	f022 0203 	bic.w	r2, r2, #3
 801b424:	3d03      	subs	r5, #3
 801b426:	45ac      	cmp	ip, r5
 801b428:	bf38      	it	cc
 801b42a:	2200      	movcc	r2, #0
 801b42c:	441a      	add	r2, r3
 801b42e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b432:	b17b      	cbz	r3, 801b454 <__mdiff+0x108>
 801b434:	6107      	str	r7, [r0, #16]
 801b436:	e7a3      	b.n	801b380 <__mdiff+0x34>
 801b438:	f856 8b04 	ldr.w	r8, [r6], #4
 801b43c:	fa11 f288 	uxtah	r2, r1, r8
 801b440:	1414      	asrs	r4, r2, #16
 801b442:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b446:	b292      	uxth	r2, r2
 801b448:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b44c:	f84e 2b04 	str.w	r2, [lr], #4
 801b450:	1421      	asrs	r1, r4, #16
 801b452:	e7e0      	b.n	801b416 <__mdiff+0xca>
 801b454:	3f01      	subs	r7, #1
 801b456:	e7ea      	b.n	801b42e <__mdiff+0xe2>
 801b458:	0801c397 	.word	0x0801c397
 801b45c:	0801c3a8 	.word	0x0801c3a8

0801b460 <__d2b>:
 801b460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b464:	4689      	mov	r9, r1
 801b466:	2101      	movs	r1, #1
 801b468:	ec57 6b10 	vmov	r6, r7, d0
 801b46c:	4690      	mov	r8, r2
 801b46e:	f7ff fccf 	bl	801ae10 <_Balloc>
 801b472:	4604      	mov	r4, r0
 801b474:	b930      	cbnz	r0, 801b484 <__d2b+0x24>
 801b476:	4602      	mov	r2, r0
 801b478:	4b25      	ldr	r3, [pc, #148]	; (801b510 <__d2b+0xb0>)
 801b47a:	4826      	ldr	r0, [pc, #152]	; (801b514 <__d2b+0xb4>)
 801b47c:	f240 310a 	movw	r1, #778	; 0x30a
 801b480:	f000 f950 	bl	801b724 <__assert_func>
 801b484:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b48c:	bb35      	cbnz	r5, 801b4dc <__d2b+0x7c>
 801b48e:	2e00      	cmp	r6, #0
 801b490:	9301      	str	r3, [sp, #4]
 801b492:	d028      	beq.n	801b4e6 <__d2b+0x86>
 801b494:	4668      	mov	r0, sp
 801b496:	9600      	str	r6, [sp, #0]
 801b498:	f7ff fd82 	bl	801afa0 <__lo0bits>
 801b49c:	9900      	ldr	r1, [sp, #0]
 801b49e:	b300      	cbz	r0, 801b4e2 <__d2b+0x82>
 801b4a0:	9a01      	ldr	r2, [sp, #4]
 801b4a2:	f1c0 0320 	rsb	r3, r0, #32
 801b4a6:	fa02 f303 	lsl.w	r3, r2, r3
 801b4aa:	430b      	orrs	r3, r1
 801b4ac:	40c2      	lsrs	r2, r0
 801b4ae:	6163      	str	r3, [r4, #20]
 801b4b0:	9201      	str	r2, [sp, #4]
 801b4b2:	9b01      	ldr	r3, [sp, #4]
 801b4b4:	61a3      	str	r3, [r4, #24]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	bf14      	ite	ne
 801b4ba:	2202      	movne	r2, #2
 801b4bc:	2201      	moveq	r2, #1
 801b4be:	6122      	str	r2, [r4, #16]
 801b4c0:	b1d5      	cbz	r5, 801b4f8 <__d2b+0x98>
 801b4c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b4c6:	4405      	add	r5, r0
 801b4c8:	f8c9 5000 	str.w	r5, [r9]
 801b4cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b4d0:	f8c8 0000 	str.w	r0, [r8]
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	b003      	add	sp, #12
 801b4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b4dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b4e0:	e7d5      	b.n	801b48e <__d2b+0x2e>
 801b4e2:	6161      	str	r1, [r4, #20]
 801b4e4:	e7e5      	b.n	801b4b2 <__d2b+0x52>
 801b4e6:	a801      	add	r0, sp, #4
 801b4e8:	f7ff fd5a 	bl	801afa0 <__lo0bits>
 801b4ec:	9b01      	ldr	r3, [sp, #4]
 801b4ee:	6163      	str	r3, [r4, #20]
 801b4f0:	2201      	movs	r2, #1
 801b4f2:	6122      	str	r2, [r4, #16]
 801b4f4:	3020      	adds	r0, #32
 801b4f6:	e7e3      	b.n	801b4c0 <__d2b+0x60>
 801b4f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b4fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b500:	f8c9 0000 	str.w	r0, [r9]
 801b504:	6918      	ldr	r0, [r3, #16]
 801b506:	f7ff fd2b 	bl	801af60 <__hi0bits>
 801b50a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b50e:	e7df      	b.n	801b4d0 <__d2b+0x70>
 801b510:	0801c397 	.word	0x0801c397
 801b514:	0801c3a8 	.word	0x0801c3a8

0801b518 <_calloc_r>:
 801b518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b51a:	fba1 2402 	umull	r2, r4, r1, r2
 801b51e:	b94c      	cbnz	r4, 801b534 <_calloc_r+0x1c>
 801b520:	4611      	mov	r1, r2
 801b522:	9201      	str	r2, [sp, #4]
 801b524:	f000 f87a 	bl	801b61c <_malloc_r>
 801b528:	9a01      	ldr	r2, [sp, #4]
 801b52a:	4605      	mov	r5, r0
 801b52c:	b930      	cbnz	r0, 801b53c <_calloc_r+0x24>
 801b52e:	4628      	mov	r0, r5
 801b530:	b003      	add	sp, #12
 801b532:	bd30      	pop	{r4, r5, pc}
 801b534:	220c      	movs	r2, #12
 801b536:	6002      	str	r2, [r0, #0]
 801b538:	2500      	movs	r5, #0
 801b53a:	e7f8      	b.n	801b52e <_calloc_r+0x16>
 801b53c:	4621      	mov	r1, r4
 801b53e:	f7fe f95f 	bl	8019800 <memset>
 801b542:	e7f4      	b.n	801b52e <_calloc_r+0x16>

0801b544 <_free_r>:
 801b544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b546:	2900      	cmp	r1, #0
 801b548:	d044      	beq.n	801b5d4 <_free_r+0x90>
 801b54a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b54e:	9001      	str	r0, [sp, #4]
 801b550:	2b00      	cmp	r3, #0
 801b552:	f1a1 0404 	sub.w	r4, r1, #4
 801b556:	bfb8      	it	lt
 801b558:	18e4      	addlt	r4, r4, r3
 801b55a:	f000 f925 	bl	801b7a8 <__malloc_lock>
 801b55e:	4a1e      	ldr	r2, [pc, #120]	; (801b5d8 <_free_r+0x94>)
 801b560:	9801      	ldr	r0, [sp, #4]
 801b562:	6813      	ldr	r3, [r2, #0]
 801b564:	b933      	cbnz	r3, 801b574 <_free_r+0x30>
 801b566:	6063      	str	r3, [r4, #4]
 801b568:	6014      	str	r4, [r2, #0]
 801b56a:	b003      	add	sp, #12
 801b56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b570:	f000 b920 	b.w	801b7b4 <__malloc_unlock>
 801b574:	42a3      	cmp	r3, r4
 801b576:	d908      	bls.n	801b58a <_free_r+0x46>
 801b578:	6825      	ldr	r5, [r4, #0]
 801b57a:	1961      	adds	r1, r4, r5
 801b57c:	428b      	cmp	r3, r1
 801b57e:	bf01      	itttt	eq
 801b580:	6819      	ldreq	r1, [r3, #0]
 801b582:	685b      	ldreq	r3, [r3, #4]
 801b584:	1949      	addeq	r1, r1, r5
 801b586:	6021      	streq	r1, [r4, #0]
 801b588:	e7ed      	b.n	801b566 <_free_r+0x22>
 801b58a:	461a      	mov	r2, r3
 801b58c:	685b      	ldr	r3, [r3, #4]
 801b58e:	b10b      	cbz	r3, 801b594 <_free_r+0x50>
 801b590:	42a3      	cmp	r3, r4
 801b592:	d9fa      	bls.n	801b58a <_free_r+0x46>
 801b594:	6811      	ldr	r1, [r2, #0]
 801b596:	1855      	adds	r5, r2, r1
 801b598:	42a5      	cmp	r5, r4
 801b59a:	d10b      	bne.n	801b5b4 <_free_r+0x70>
 801b59c:	6824      	ldr	r4, [r4, #0]
 801b59e:	4421      	add	r1, r4
 801b5a0:	1854      	adds	r4, r2, r1
 801b5a2:	42a3      	cmp	r3, r4
 801b5a4:	6011      	str	r1, [r2, #0]
 801b5a6:	d1e0      	bne.n	801b56a <_free_r+0x26>
 801b5a8:	681c      	ldr	r4, [r3, #0]
 801b5aa:	685b      	ldr	r3, [r3, #4]
 801b5ac:	6053      	str	r3, [r2, #4]
 801b5ae:	4421      	add	r1, r4
 801b5b0:	6011      	str	r1, [r2, #0]
 801b5b2:	e7da      	b.n	801b56a <_free_r+0x26>
 801b5b4:	d902      	bls.n	801b5bc <_free_r+0x78>
 801b5b6:	230c      	movs	r3, #12
 801b5b8:	6003      	str	r3, [r0, #0]
 801b5ba:	e7d6      	b.n	801b56a <_free_r+0x26>
 801b5bc:	6825      	ldr	r5, [r4, #0]
 801b5be:	1961      	adds	r1, r4, r5
 801b5c0:	428b      	cmp	r3, r1
 801b5c2:	bf04      	itt	eq
 801b5c4:	6819      	ldreq	r1, [r3, #0]
 801b5c6:	685b      	ldreq	r3, [r3, #4]
 801b5c8:	6063      	str	r3, [r4, #4]
 801b5ca:	bf04      	itt	eq
 801b5cc:	1949      	addeq	r1, r1, r5
 801b5ce:	6021      	streq	r1, [r4, #0]
 801b5d0:	6054      	str	r4, [r2, #4]
 801b5d2:	e7ca      	b.n	801b56a <_free_r+0x26>
 801b5d4:	b003      	add	sp, #12
 801b5d6:	bd30      	pop	{r4, r5, pc}
 801b5d8:	20001578 	.word	0x20001578

0801b5dc <sbrk_aligned>:
 801b5dc:	b570      	push	{r4, r5, r6, lr}
 801b5de:	4e0e      	ldr	r6, [pc, #56]	; (801b618 <sbrk_aligned+0x3c>)
 801b5e0:	460c      	mov	r4, r1
 801b5e2:	6831      	ldr	r1, [r6, #0]
 801b5e4:	4605      	mov	r5, r0
 801b5e6:	b911      	cbnz	r1, 801b5ee <sbrk_aligned+0x12>
 801b5e8:	f000 f88c 	bl	801b704 <_sbrk_r>
 801b5ec:	6030      	str	r0, [r6, #0]
 801b5ee:	4621      	mov	r1, r4
 801b5f0:	4628      	mov	r0, r5
 801b5f2:	f000 f887 	bl	801b704 <_sbrk_r>
 801b5f6:	1c43      	adds	r3, r0, #1
 801b5f8:	d00a      	beq.n	801b610 <sbrk_aligned+0x34>
 801b5fa:	1cc4      	adds	r4, r0, #3
 801b5fc:	f024 0403 	bic.w	r4, r4, #3
 801b600:	42a0      	cmp	r0, r4
 801b602:	d007      	beq.n	801b614 <sbrk_aligned+0x38>
 801b604:	1a21      	subs	r1, r4, r0
 801b606:	4628      	mov	r0, r5
 801b608:	f000 f87c 	bl	801b704 <_sbrk_r>
 801b60c:	3001      	adds	r0, #1
 801b60e:	d101      	bne.n	801b614 <sbrk_aligned+0x38>
 801b610:	f04f 34ff 	mov.w	r4, #4294967295
 801b614:	4620      	mov	r0, r4
 801b616:	bd70      	pop	{r4, r5, r6, pc}
 801b618:	2000157c 	.word	0x2000157c

0801b61c <_malloc_r>:
 801b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b620:	1ccd      	adds	r5, r1, #3
 801b622:	f025 0503 	bic.w	r5, r5, #3
 801b626:	3508      	adds	r5, #8
 801b628:	2d0c      	cmp	r5, #12
 801b62a:	bf38      	it	cc
 801b62c:	250c      	movcc	r5, #12
 801b62e:	2d00      	cmp	r5, #0
 801b630:	4607      	mov	r7, r0
 801b632:	db01      	blt.n	801b638 <_malloc_r+0x1c>
 801b634:	42a9      	cmp	r1, r5
 801b636:	d905      	bls.n	801b644 <_malloc_r+0x28>
 801b638:	230c      	movs	r3, #12
 801b63a:	603b      	str	r3, [r7, #0]
 801b63c:	2600      	movs	r6, #0
 801b63e:	4630      	mov	r0, r6
 801b640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b644:	4e2e      	ldr	r6, [pc, #184]	; (801b700 <_malloc_r+0xe4>)
 801b646:	f000 f8af 	bl	801b7a8 <__malloc_lock>
 801b64a:	6833      	ldr	r3, [r6, #0]
 801b64c:	461c      	mov	r4, r3
 801b64e:	bb34      	cbnz	r4, 801b69e <_malloc_r+0x82>
 801b650:	4629      	mov	r1, r5
 801b652:	4638      	mov	r0, r7
 801b654:	f7ff ffc2 	bl	801b5dc <sbrk_aligned>
 801b658:	1c43      	adds	r3, r0, #1
 801b65a:	4604      	mov	r4, r0
 801b65c:	d14d      	bne.n	801b6fa <_malloc_r+0xde>
 801b65e:	6834      	ldr	r4, [r6, #0]
 801b660:	4626      	mov	r6, r4
 801b662:	2e00      	cmp	r6, #0
 801b664:	d140      	bne.n	801b6e8 <_malloc_r+0xcc>
 801b666:	6823      	ldr	r3, [r4, #0]
 801b668:	4631      	mov	r1, r6
 801b66a:	4638      	mov	r0, r7
 801b66c:	eb04 0803 	add.w	r8, r4, r3
 801b670:	f000 f848 	bl	801b704 <_sbrk_r>
 801b674:	4580      	cmp	r8, r0
 801b676:	d13a      	bne.n	801b6ee <_malloc_r+0xd2>
 801b678:	6821      	ldr	r1, [r4, #0]
 801b67a:	3503      	adds	r5, #3
 801b67c:	1a6d      	subs	r5, r5, r1
 801b67e:	f025 0503 	bic.w	r5, r5, #3
 801b682:	3508      	adds	r5, #8
 801b684:	2d0c      	cmp	r5, #12
 801b686:	bf38      	it	cc
 801b688:	250c      	movcc	r5, #12
 801b68a:	4629      	mov	r1, r5
 801b68c:	4638      	mov	r0, r7
 801b68e:	f7ff ffa5 	bl	801b5dc <sbrk_aligned>
 801b692:	3001      	adds	r0, #1
 801b694:	d02b      	beq.n	801b6ee <_malloc_r+0xd2>
 801b696:	6823      	ldr	r3, [r4, #0]
 801b698:	442b      	add	r3, r5
 801b69a:	6023      	str	r3, [r4, #0]
 801b69c:	e00e      	b.n	801b6bc <_malloc_r+0xa0>
 801b69e:	6822      	ldr	r2, [r4, #0]
 801b6a0:	1b52      	subs	r2, r2, r5
 801b6a2:	d41e      	bmi.n	801b6e2 <_malloc_r+0xc6>
 801b6a4:	2a0b      	cmp	r2, #11
 801b6a6:	d916      	bls.n	801b6d6 <_malloc_r+0xba>
 801b6a8:	1961      	adds	r1, r4, r5
 801b6aa:	42a3      	cmp	r3, r4
 801b6ac:	6025      	str	r5, [r4, #0]
 801b6ae:	bf18      	it	ne
 801b6b0:	6059      	strne	r1, [r3, #4]
 801b6b2:	6863      	ldr	r3, [r4, #4]
 801b6b4:	bf08      	it	eq
 801b6b6:	6031      	streq	r1, [r6, #0]
 801b6b8:	5162      	str	r2, [r4, r5]
 801b6ba:	604b      	str	r3, [r1, #4]
 801b6bc:	4638      	mov	r0, r7
 801b6be:	f104 060b 	add.w	r6, r4, #11
 801b6c2:	f000 f877 	bl	801b7b4 <__malloc_unlock>
 801b6c6:	f026 0607 	bic.w	r6, r6, #7
 801b6ca:	1d23      	adds	r3, r4, #4
 801b6cc:	1af2      	subs	r2, r6, r3
 801b6ce:	d0b6      	beq.n	801b63e <_malloc_r+0x22>
 801b6d0:	1b9b      	subs	r3, r3, r6
 801b6d2:	50a3      	str	r3, [r4, r2]
 801b6d4:	e7b3      	b.n	801b63e <_malloc_r+0x22>
 801b6d6:	6862      	ldr	r2, [r4, #4]
 801b6d8:	42a3      	cmp	r3, r4
 801b6da:	bf0c      	ite	eq
 801b6dc:	6032      	streq	r2, [r6, #0]
 801b6de:	605a      	strne	r2, [r3, #4]
 801b6e0:	e7ec      	b.n	801b6bc <_malloc_r+0xa0>
 801b6e2:	4623      	mov	r3, r4
 801b6e4:	6864      	ldr	r4, [r4, #4]
 801b6e6:	e7b2      	b.n	801b64e <_malloc_r+0x32>
 801b6e8:	4634      	mov	r4, r6
 801b6ea:	6876      	ldr	r6, [r6, #4]
 801b6ec:	e7b9      	b.n	801b662 <_malloc_r+0x46>
 801b6ee:	230c      	movs	r3, #12
 801b6f0:	603b      	str	r3, [r7, #0]
 801b6f2:	4638      	mov	r0, r7
 801b6f4:	f000 f85e 	bl	801b7b4 <__malloc_unlock>
 801b6f8:	e7a1      	b.n	801b63e <_malloc_r+0x22>
 801b6fa:	6025      	str	r5, [r4, #0]
 801b6fc:	e7de      	b.n	801b6bc <_malloc_r+0xa0>
 801b6fe:	bf00      	nop
 801b700:	20001578 	.word	0x20001578

0801b704 <_sbrk_r>:
 801b704:	b538      	push	{r3, r4, r5, lr}
 801b706:	4d06      	ldr	r5, [pc, #24]	; (801b720 <_sbrk_r+0x1c>)
 801b708:	2300      	movs	r3, #0
 801b70a:	4604      	mov	r4, r0
 801b70c:	4608      	mov	r0, r1
 801b70e:	602b      	str	r3, [r5, #0]
 801b710:	f7f5 fd26 	bl	8011160 <_sbrk>
 801b714:	1c43      	adds	r3, r0, #1
 801b716:	d102      	bne.n	801b71e <_sbrk_r+0x1a>
 801b718:	682b      	ldr	r3, [r5, #0]
 801b71a:	b103      	cbz	r3, 801b71e <_sbrk_r+0x1a>
 801b71c:	6023      	str	r3, [r4, #0]
 801b71e:	bd38      	pop	{r3, r4, r5, pc}
 801b720:	20001580 	.word	0x20001580

0801b724 <__assert_func>:
 801b724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b726:	4614      	mov	r4, r2
 801b728:	461a      	mov	r2, r3
 801b72a:	4b09      	ldr	r3, [pc, #36]	; (801b750 <__assert_func+0x2c>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	4605      	mov	r5, r0
 801b730:	68d8      	ldr	r0, [r3, #12]
 801b732:	b14c      	cbz	r4, 801b748 <__assert_func+0x24>
 801b734:	4b07      	ldr	r3, [pc, #28]	; (801b754 <__assert_func+0x30>)
 801b736:	9100      	str	r1, [sp, #0]
 801b738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b73c:	4906      	ldr	r1, [pc, #24]	; (801b758 <__assert_func+0x34>)
 801b73e:	462b      	mov	r3, r5
 801b740:	f000 f80e 	bl	801b760 <fiprintf>
 801b744:	f000 fa64 	bl	801bc10 <abort>
 801b748:	4b04      	ldr	r3, [pc, #16]	; (801b75c <__assert_func+0x38>)
 801b74a:	461c      	mov	r4, r3
 801b74c:	e7f3      	b.n	801b736 <__assert_func+0x12>
 801b74e:	bf00      	nop
 801b750:	20000190 	.word	0x20000190
 801b754:	0801c504 	.word	0x0801c504
 801b758:	0801c511 	.word	0x0801c511
 801b75c:	0801c53f 	.word	0x0801c53f

0801b760 <fiprintf>:
 801b760:	b40e      	push	{r1, r2, r3}
 801b762:	b503      	push	{r0, r1, lr}
 801b764:	4601      	mov	r1, r0
 801b766:	ab03      	add	r3, sp, #12
 801b768:	4805      	ldr	r0, [pc, #20]	; (801b780 <fiprintf+0x20>)
 801b76a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b76e:	6800      	ldr	r0, [r0, #0]
 801b770:	9301      	str	r3, [sp, #4]
 801b772:	f000 f84f 	bl	801b814 <_vfiprintf_r>
 801b776:	b002      	add	sp, #8
 801b778:	f85d eb04 	ldr.w	lr, [sp], #4
 801b77c:	b003      	add	sp, #12
 801b77e:	4770      	bx	lr
 801b780:	20000190 	.word	0x20000190

0801b784 <__ascii_mbtowc>:
 801b784:	b082      	sub	sp, #8
 801b786:	b901      	cbnz	r1, 801b78a <__ascii_mbtowc+0x6>
 801b788:	a901      	add	r1, sp, #4
 801b78a:	b142      	cbz	r2, 801b79e <__ascii_mbtowc+0x1a>
 801b78c:	b14b      	cbz	r3, 801b7a2 <__ascii_mbtowc+0x1e>
 801b78e:	7813      	ldrb	r3, [r2, #0]
 801b790:	600b      	str	r3, [r1, #0]
 801b792:	7812      	ldrb	r2, [r2, #0]
 801b794:	1e10      	subs	r0, r2, #0
 801b796:	bf18      	it	ne
 801b798:	2001      	movne	r0, #1
 801b79a:	b002      	add	sp, #8
 801b79c:	4770      	bx	lr
 801b79e:	4610      	mov	r0, r2
 801b7a0:	e7fb      	b.n	801b79a <__ascii_mbtowc+0x16>
 801b7a2:	f06f 0001 	mvn.w	r0, #1
 801b7a6:	e7f8      	b.n	801b79a <__ascii_mbtowc+0x16>

0801b7a8 <__malloc_lock>:
 801b7a8:	4801      	ldr	r0, [pc, #4]	; (801b7b0 <__malloc_lock+0x8>)
 801b7aa:	f000 bbf1 	b.w	801bf90 <__retarget_lock_acquire_recursive>
 801b7ae:	bf00      	nop
 801b7b0:	20001584 	.word	0x20001584

0801b7b4 <__malloc_unlock>:
 801b7b4:	4801      	ldr	r0, [pc, #4]	; (801b7bc <__malloc_unlock+0x8>)
 801b7b6:	f000 bbec 	b.w	801bf92 <__retarget_lock_release_recursive>
 801b7ba:	bf00      	nop
 801b7bc:	20001584 	.word	0x20001584

0801b7c0 <__sfputc_r>:
 801b7c0:	6893      	ldr	r3, [r2, #8]
 801b7c2:	3b01      	subs	r3, #1
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	b410      	push	{r4}
 801b7c8:	6093      	str	r3, [r2, #8]
 801b7ca:	da08      	bge.n	801b7de <__sfputc_r+0x1e>
 801b7cc:	6994      	ldr	r4, [r2, #24]
 801b7ce:	42a3      	cmp	r3, r4
 801b7d0:	db01      	blt.n	801b7d6 <__sfputc_r+0x16>
 801b7d2:	290a      	cmp	r1, #10
 801b7d4:	d103      	bne.n	801b7de <__sfputc_r+0x1e>
 801b7d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7da:	f000 b94b 	b.w	801ba74 <__swbuf_r>
 801b7de:	6813      	ldr	r3, [r2, #0]
 801b7e0:	1c58      	adds	r0, r3, #1
 801b7e2:	6010      	str	r0, [r2, #0]
 801b7e4:	7019      	strb	r1, [r3, #0]
 801b7e6:	4608      	mov	r0, r1
 801b7e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7ec:	4770      	bx	lr

0801b7ee <__sfputs_r>:
 801b7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7f0:	4606      	mov	r6, r0
 801b7f2:	460f      	mov	r7, r1
 801b7f4:	4614      	mov	r4, r2
 801b7f6:	18d5      	adds	r5, r2, r3
 801b7f8:	42ac      	cmp	r4, r5
 801b7fa:	d101      	bne.n	801b800 <__sfputs_r+0x12>
 801b7fc:	2000      	movs	r0, #0
 801b7fe:	e007      	b.n	801b810 <__sfputs_r+0x22>
 801b800:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b804:	463a      	mov	r2, r7
 801b806:	4630      	mov	r0, r6
 801b808:	f7ff ffda 	bl	801b7c0 <__sfputc_r>
 801b80c:	1c43      	adds	r3, r0, #1
 801b80e:	d1f3      	bne.n	801b7f8 <__sfputs_r+0xa>
 801b810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b814 <_vfiprintf_r>:
 801b814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b818:	460d      	mov	r5, r1
 801b81a:	b09d      	sub	sp, #116	; 0x74
 801b81c:	4614      	mov	r4, r2
 801b81e:	4698      	mov	r8, r3
 801b820:	4606      	mov	r6, r0
 801b822:	b118      	cbz	r0, 801b82c <_vfiprintf_r+0x18>
 801b824:	6983      	ldr	r3, [r0, #24]
 801b826:	b90b      	cbnz	r3, 801b82c <_vfiprintf_r+0x18>
 801b828:	f000 fb14 	bl	801be54 <__sinit>
 801b82c:	4b89      	ldr	r3, [pc, #548]	; (801ba54 <_vfiprintf_r+0x240>)
 801b82e:	429d      	cmp	r5, r3
 801b830:	d11b      	bne.n	801b86a <_vfiprintf_r+0x56>
 801b832:	6875      	ldr	r5, [r6, #4]
 801b834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b836:	07d9      	lsls	r1, r3, #31
 801b838:	d405      	bmi.n	801b846 <_vfiprintf_r+0x32>
 801b83a:	89ab      	ldrh	r3, [r5, #12]
 801b83c:	059a      	lsls	r2, r3, #22
 801b83e:	d402      	bmi.n	801b846 <_vfiprintf_r+0x32>
 801b840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b842:	f000 fba5 	bl	801bf90 <__retarget_lock_acquire_recursive>
 801b846:	89ab      	ldrh	r3, [r5, #12]
 801b848:	071b      	lsls	r3, r3, #28
 801b84a:	d501      	bpl.n	801b850 <_vfiprintf_r+0x3c>
 801b84c:	692b      	ldr	r3, [r5, #16]
 801b84e:	b9eb      	cbnz	r3, 801b88c <_vfiprintf_r+0x78>
 801b850:	4629      	mov	r1, r5
 801b852:	4630      	mov	r0, r6
 801b854:	f000 f96e 	bl	801bb34 <__swsetup_r>
 801b858:	b1c0      	cbz	r0, 801b88c <_vfiprintf_r+0x78>
 801b85a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b85c:	07dc      	lsls	r4, r3, #31
 801b85e:	d50e      	bpl.n	801b87e <_vfiprintf_r+0x6a>
 801b860:	f04f 30ff 	mov.w	r0, #4294967295
 801b864:	b01d      	add	sp, #116	; 0x74
 801b866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b86a:	4b7b      	ldr	r3, [pc, #492]	; (801ba58 <_vfiprintf_r+0x244>)
 801b86c:	429d      	cmp	r5, r3
 801b86e:	d101      	bne.n	801b874 <_vfiprintf_r+0x60>
 801b870:	68b5      	ldr	r5, [r6, #8]
 801b872:	e7df      	b.n	801b834 <_vfiprintf_r+0x20>
 801b874:	4b79      	ldr	r3, [pc, #484]	; (801ba5c <_vfiprintf_r+0x248>)
 801b876:	429d      	cmp	r5, r3
 801b878:	bf08      	it	eq
 801b87a:	68f5      	ldreq	r5, [r6, #12]
 801b87c:	e7da      	b.n	801b834 <_vfiprintf_r+0x20>
 801b87e:	89ab      	ldrh	r3, [r5, #12]
 801b880:	0598      	lsls	r0, r3, #22
 801b882:	d4ed      	bmi.n	801b860 <_vfiprintf_r+0x4c>
 801b884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b886:	f000 fb84 	bl	801bf92 <__retarget_lock_release_recursive>
 801b88a:	e7e9      	b.n	801b860 <_vfiprintf_r+0x4c>
 801b88c:	2300      	movs	r3, #0
 801b88e:	9309      	str	r3, [sp, #36]	; 0x24
 801b890:	2320      	movs	r3, #32
 801b892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b896:	f8cd 800c 	str.w	r8, [sp, #12]
 801b89a:	2330      	movs	r3, #48	; 0x30
 801b89c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ba60 <_vfiprintf_r+0x24c>
 801b8a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b8a4:	f04f 0901 	mov.w	r9, #1
 801b8a8:	4623      	mov	r3, r4
 801b8aa:	469a      	mov	sl, r3
 801b8ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b8b0:	b10a      	cbz	r2, 801b8b6 <_vfiprintf_r+0xa2>
 801b8b2:	2a25      	cmp	r2, #37	; 0x25
 801b8b4:	d1f9      	bne.n	801b8aa <_vfiprintf_r+0x96>
 801b8b6:	ebba 0b04 	subs.w	fp, sl, r4
 801b8ba:	d00b      	beq.n	801b8d4 <_vfiprintf_r+0xc0>
 801b8bc:	465b      	mov	r3, fp
 801b8be:	4622      	mov	r2, r4
 801b8c0:	4629      	mov	r1, r5
 801b8c2:	4630      	mov	r0, r6
 801b8c4:	f7ff ff93 	bl	801b7ee <__sfputs_r>
 801b8c8:	3001      	adds	r0, #1
 801b8ca:	f000 80aa 	beq.w	801ba22 <_vfiprintf_r+0x20e>
 801b8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8d0:	445a      	add	r2, fp
 801b8d2:	9209      	str	r2, [sp, #36]	; 0x24
 801b8d4:	f89a 3000 	ldrb.w	r3, [sl]
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	f000 80a2 	beq.w	801ba22 <_vfiprintf_r+0x20e>
 801b8de:	2300      	movs	r3, #0
 801b8e0:	f04f 32ff 	mov.w	r2, #4294967295
 801b8e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b8e8:	f10a 0a01 	add.w	sl, sl, #1
 801b8ec:	9304      	str	r3, [sp, #16]
 801b8ee:	9307      	str	r3, [sp, #28]
 801b8f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b8f4:	931a      	str	r3, [sp, #104]	; 0x68
 801b8f6:	4654      	mov	r4, sl
 801b8f8:	2205      	movs	r2, #5
 801b8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8fe:	4858      	ldr	r0, [pc, #352]	; (801ba60 <_vfiprintf_r+0x24c>)
 801b900:	f7f4 fc6e 	bl	80101e0 <memchr>
 801b904:	9a04      	ldr	r2, [sp, #16]
 801b906:	b9d8      	cbnz	r0, 801b940 <_vfiprintf_r+0x12c>
 801b908:	06d1      	lsls	r1, r2, #27
 801b90a:	bf44      	itt	mi
 801b90c:	2320      	movmi	r3, #32
 801b90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b912:	0713      	lsls	r3, r2, #28
 801b914:	bf44      	itt	mi
 801b916:	232b      	movmi	r3, #43	; 0x2b
 801b918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b91c:	f89a 3000 	ldrb.w	r3, [sl]
 801b920:	2b2a      	cmp	r3, #42	; 0x2a
 801b922:	d015      	beq.n	801b950 <_vfiprintf_r+0x13c>
 801b924:	9a07      	ldr	r2, [sp, #28]
 801b926:	4654      	mov	r4, sl
 801b928:	2000      	movs	r0, #0
 801b92a:	f04f 0c0a 	mov.w	ip, #10
 801b92e:	4621      	mov	r1, r4
 801b930:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b934:	3b30      	subs	r3, #48	; 0x30
 801b936:	2b09      	cmp	r3, #9
 801b938:	d94e      	bls.n	801b9d8 <_vfiprintf_r+0x1c4>
 801b93a:	b1b0      	cbz	r0, 801b96a <_vfiprintf_r+0x156>
 801b93c:	9207      	str	r2, [sp, #28]
 801b93e:	e014      	b.n	801b96a <_vfiprintf_r+0x156>
 801b940:	eba0 0308 	sub.w	r3, r0, r8
 801b944:	fa09 f303 	lsl.w	r3, r9, r3
 801b948:	4313      	orrs	r3, r2
 801b94a:	9304      	str	r3, [sp, #16]
 801b94c:	46a2      	mov	sl, r4
 801b94e:	e7d2      	b.n	801b8f6 <_vfiprintf_r+0xe2>
 801b950:	9b03      	ldr	r3, [sp, #12]
 801b952:	1d19      	adds	r1, r3, #4
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	9103      	str	r1, [sp, #12]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	bfbb      	ittet	lt
 801b95c:	425b      	neglt	r3, r3
 801b95e:	f042 0202 	orrlt.w	r2, r2, #2
 801b962:	9307      	strge	r3, [sp, #28]
 801b964:	9307      	strlt	r3, [sp, #28]
 801b966:	bfb8      	it	lt
 801b968:	9204      	strlt	r2, [sp, #16]
 801b96a:	7823      	ldrb	r3, [r4, #0]
 801b96c:	2b2e      	cmp	r3, #46	; 0x2e
 801b96e:	d10c      	bne.n	801b98a <_vfiprintf_r+0x176>
 801b970:	7863      	ldrb	r3, [r4, #1]
 801b972:	2b2a      	cmp	r3, #42	; 0x2a
 801b974:	d135      	bne.n	801b9e2 <_vfiprintf_r+0x1ce>
 801b976:	9b03      	ldr	r3, [sp, #12]
 801b978:	1d1a      	adds	r2, r3, #4
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	9203      	str	r2, [sp, #12]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	bfb8      	it	lt
 801b982:	f04f 33ff 	movlt.w	r3, #4294967295
 801b986:	3402      	adds	r4, #2
 801b988:	9305      	str	r3, [sp, #20]
 801b98a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ba70 <_vfiprintf_r+0x25c>
 801b98e:	7821      	ldrb	r1, [r4, #0]
 801b990:	2203      	movs	r2, #3
 801b992:	4650      	mov	r0, sl
 801b994:	f7f4 fc24 	bl	80101e0 <memchr>
 801b998:	b140      	cbz	r0, 801b9ac <_vfiprintf_r+0x198>
 801b99a:	2340      	movs	r3, #64	; 0x40
 801b99c:	eba0 000a 	sub.w	r0, r0, sl
 801b9a0:	fa03 f000 	lsl.w	r0, r3, r0
 801b9a4:	9b04      	ldr	r3, [sp, #16]
 801b9a6:	4303      	orrs	r3, r0
 801b9a8:	3401      	adds	r4, #1
 801b9aa:	9304      	str	r3, [sp, #16]
 801b9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9b0:	482c      	ldr	r0, [pc, #176]	; (801ba64 <_vfiprintf_r+0x250>)
 801b9b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b9b6:	2206      	movs	r2, #6
 801b9b8:	f7f4 fc12 	bl	80101e0 <memchr>
 801b9bc:	2800      	cmp	r0, #0
 801b9be:	d03f      	beq.n	801ba40 <_vfiprintf_r+0x22c>
 801b9c0:	4b29      	ldr	r3, [pc, #164]	; (801ba68 <_vfiprintf_r+0x254>)
 801b9c2:	bb1b      	cbnz	r3, 801ba0c <_vfiprintf_r+0x1f8>
 801b9c4:	9b03      	ldr	r3, [sp, #12]
 801b9c6:	3307      	adds	r3, #7
 801b9c8:	f023 0307 	bic.w	r3, r3, #7
 801b9cc:	3308      	adds	r3, #8
 801b9ce:	9303      	str	r3, [sp, #12]
 801b9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9d2:	443b      	add	r3, r7
 801b9d4:	9309      	str	r3, [sp, #36]	; 0x24
 801b9d6:	e767      	b.n	801b8a8 <_vfiprintf_r+0x94>
 801b9d8:	fb0c 3202 	mla	r2, ip, r2, r3
 801b9dc:	460c      	mov	r4, r1
 801b9de:	2001      	movs	r0, #1
 801b9e0:	e7a5      	b.n	801b92e <_vfiprintf_r+0x11a>
 801b9e2:	2300      	movs	r3, #0
 801b9e4:	3401      	adds	r4, #1
 801b9e6:	9305      	str	r3, [sp, #20]
 801b9e8:	4619      	mov	r1, r3
 801b9ea:	f04f 0c0a 	mov.w	ip, #10
 801b9ee:	4620      	mov	r0, r4
 801b9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b9f4:	3a30      	subs	r2, #48	; 0x30
 801b9f6:	2a09      	cmp	r2, #9
 801b9f8:	d903      	bls.n	801ba02 <_vfiprintf_r+0x1ee>
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d0c5      	beq.n	801b98a <_vfiprintf_r+0x176>
 801b9fe:	9105      	str	r1, [sp, #20]
 801ba00:	e7c3      	b.n	801b98a <_vfiprintf_r+0x176>
 801ba02:	fb0c 2101 	mla	r1, ip, r1, r2
 801ba06:	4604      	mov	r4, r0
 801ba08:	2301      	movs	r3, #1
 801ba0a:	e7f0      	b.n	801b9ee <_vfiprintf_r+0x1da>
 801ba0c:	ab03      	add	r3, sp, #12
 801ba0e:	9300      	str	r3, [sp, #0]
 801ba10:	462a      	mov	r2, r5
 801ba12:	4b16      	ldr	r3, [pc, #88]	; (801ba6c <_vfiprintf_r+0x258>)
 801ba14:	a904      	add	r1, sp, #16
 801ba16:	4630      	mov	r0, r6
 801ba18:	f7fd ff9a 	bl	8019950 <_printf_float>
 801ba1c:	4607      	mov	r7, r0
 801ba1e:	1c78      	adds	r0, r7, #1
 801ba20:	d1d6      	bne.n	801b9d0 <_vfiprintf_r+0x1bc>
 801ba22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ba24:	07d9      	lsls	r1, r3, #31
 801ba26:	d405      	bmi.n	801ba34 <_vfiprintf_r+0x220>
 801ba28:	89ab      	ldrh	r3, [r5, #12]
 801ba2a:	059a      	lsls	r2, r3, #22
 801ba2c:	d402      	bmi.n	801ba34 <_vfiprintf_r+0x220>
 801ba2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ba30:	f000 faaf 	bl	801bf92 <__retarget_lock_release_recursive>
 801ba34:	89ab      	ldrh	r3, [r5, #12]
 801ba36:	065b      	lsls	r3, r3, #25
 801ba38:	f53f af12 	bmi.w	801b860 <_vfiprintf_r+0x4c>
 801ba3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba3e:	e711      	b.n	801b864 <_vfiprintf_r+0x50>
 801ba40:	ab03      	add	r3, sp, #12
 801ba42:	9300      	str	r3, [sp, #0]
 801ba44:	462a      	mov	r2, r5
 801ba46:	4b09      	ldr	r3, [pc, #36]	; (801ba6c <_vfiprintf_r+0x258>)
 801ba48:	a904      	add	r1, sp, #16
 801ba4a:	4630      	mov	r0, r6
 801ba4c:	f7fe fa24 	bl	8019e98 <_printf_i>
 801ba50:	e7e4      	b.n	801ba1c <_vfiprintf_r+0x208>
 801ba52:	bf00      	nop
 801ba54:	0801c67c 	.word	0x0801c67c
 801ba58:	0801c69c 	.word	0x0801c69c
 801ba5c:	0801c65c 	.word	0x0801c65c
 801ba60:	0801c54a 	.word	0x0801c54a
 801ba64:	0801c554 	.word	0x0801c554
 801ba68:	08019951 	.word	0x08019951
 801ba6c:	0801b7ef 	.word	0x0801b7ef
 801ba70:	0801c550 	.word	0x0801c550

0801ba74 <__swbuf_r>:
 801ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba76:	460e      	mov	r6, r1
 801ba78:	4614      	mov	r4, r2
 801ba7a:	4605      	mov	r5, r0
 801ba7c:	b118      	cbz	r0, 801ba86 <__swbuf_r+0x12>
 801ba7e:	6983      	ldr	r3, [r0, #24]
 801ba80:	b90b      	cbnz	r3, 801ba86 <__swbuf_r+0x12>
 801ba82:	f000 f9e7 	bl	801be54 <__sinit>
 801ba86:	4b21      	ldr	r3, [pc, #132]	; (801bb0c <__swbuf_r+0x98>)
 801ba88:	429c      	cmp	r4, r3
 801ba8a:	d12b      	bne.n	801bae4 <__swbuf_r+0x70>
 801ba8c:	686c      	ldr	r4, [r5, #4]
 801ba8e:	69a3      	ldr	r3, [r4, #24]
 801ba90:	60a3      	str	r3, [r4, #8]
 801ba92:	89a3      	ldrh	r3, [r4, #12]
 801ba94:	071a      	lsls	r2, r3, #28
 801ba96:	d52f      	bpl.n	801baf8 <__swbuf_r+0x84>
 801ba98:	6923      	ldr	r3, [r4, #16]
 801ba9a:	b36b      	cbz	r3, 801baf8 <__swbuf_r+0x84>
 801ba9c:	6923      	ldr	r3, [r4, #16]
 801ba9e:	6820      	ldr	r0, [r4, #0]
 801baa0:	1ac0      	subs	r0, r0, r3
 801baa2:	6963      	ldr	r3, [r4, #20]
 801baa4:	b2f6      	uxtb	r6, r6
 801baa6:	4283      	cmp	r3, r0
 801baa8:	4637      	mov	r7, r6
 801baaa:	dc04      	bgt.n	801bab6 <__swbuf_r+0x42>
 801baac:	4621      	mov	r1, r4
 801baae:	4628      	mov	r0, r5
 801bab0:	f000 f93c 	bl	801bd2c <_fflush_r>
 801bab4:	bb30      	cbnz	r0, 801bb04 <__swbuf_r+0x90>
 801bab6:	68a3      	ldr	r3, [r4, #8]
 801bab8:	3b01      	subs	r3, #1
 801baba:	60a3      	str	r3, [r4, #8]
 801babc:	6823      	ldr	r3, [r4, #0]
 801babe:	1c5a      	adds	r2, r3, #1
 801bac0:	6022      	str	r2, [r4, #0]
 801bac2:	701e      	strb	r6, [r3, #0]
 801bac4:	6963      	ldr	r3, [r4, #20]
 801bac6:	3001      	adds	r0, #1
 801bac8:	4283      	cmp	r3, r0
 801baca:	d004      	beq.n	801bad6 <__swbuf_r+0x62>
 801bacc:	89a3      	ldrh	r3, [r4, #12]
 801bace:	07db      	lsls	r3, r3, #31
 801bad0:	d506      	bpl.n	801bae0 <__swbuf_r+0x6c>
 801bad2:	2e0a      	cmp	r6, #10
 801bad4:	d104      	bne.n	801bae0 <__swbuf_r+0x6c>
 801bad6:	4621      	mov	r1, r4
 801bad8:	4628      	mov	r0, r5
 801bada:	f000 f927 	bl	801bd2c <_fflush_r>
 801bade:	b988      	cbnz	r0, 801bb04 <__swbuf_r+0x90>
 801bae0:	4638      	mov	r0, r7
 801bae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bae4:	4b0a      	ldr	r3, [pc, #40]	; (801bb10 <__swbuf_r+0x9c>)
 801bae6:	429c      	cmp	r4, r3
 801bae8:	d101      	bne.n	801baee <__swbuf_r+0x7a>
 801baea:	68ac      	ldr	r4, [r5, #8]
 801baec:	e7cf      	b.n	801ba8e <__swbuf_r+0x1a>
 801baee:	4b09      	ldr	r3, [pc, #36]	; (801bb14 <__swbuf_r+0xa0>)
 801baf0:	429c      	cmp	r4, r3
 801baf2:	bf08      	it	eq
 801baf4:	68ec      	ldreq	r4, [r5, #12]
 801baf6:	e7ca      	b.n	801ba8e <__swbuf_r+0x1a>
 801baf8:	4621      	mov	r1, r4
 801bafa:	4628      	mov	r0, r5
 801bafc:	f000 f81a 	bl	801bb34 <__swsetup_r>
 801bb00:	2800      	cmp	r0, #0
 801bb02:	d0cb      	beq.n	801ba9c <__swbuf_r+0x28>
 801bb04:	f04f 37ff 	mov.w	r7, #4294967295
 801bb08:	e7ea      	b.n	801bae0 <__swbuf_r+0x6c>
 801bb0a:	bf00      	nop
 801bb0c:	0801c67c 	.word	0x0801c67c
 801bb10:	0801c69c 	.word	0x0801c69c
 801bb14:	0801c65c 	.word	0x0801c65c

0801bb18 <__ascii_wctomb>:
 801bb18:	b149      	cbz	r1, 801bb2e <__ascii_wctomb+0x16>
 801bb1a:	2aff      	cmp	r2, #255	; 0xff
 801bb1c:	bf85      	ittet	hi
 801bb1e:	238a      	movhi	r3, #138	; 0x8a
 801bb20:	6003      	strhi	r3, [r0, #0]
 801bb22:	700a      	strbls	r2, [r1, #0]
 801bb24:	f04f 30ff 	movhi.w	r0, #4294967295
 801bb28:	bf98      	it	ls
 801bb2a:	2001      	movls	r0, #1
 801bb2c:	4770      	bx	lr
 801bb2e:	4608      	mov	r0, r1
 801bb30:	4770      	bx	lr
	...

0801bb34 <__swsetup_r>:
 801bb34:	4b32      	ldr	r3, [pc, #200]	; (801bc00 <__swsetup_r+0xcc>)
 801bb36:	b570      	push	{r4, r5, r6, lr}
 801bb38:	681d      	ldr	r5, [r3, #0]
 801bb3a:	4606      	mov	r6, r0
 801bb3c:	460c      	mov	r4, r1
 801bb3e:	b125      	cbz	r5, 801bb4a <__swsetup_r+0x16>
 801bb40:	69ab      	ldr	r3, [r5, #24]
 801bb42:	b913      	cbnz	r3, 801bb4a <__swsetup_r+0x16>
 801bb44:	4628      	mov	r0, r5
 801bb46:	f000 f985 	bl	801be54 <__sinit>
 801bb4a:	4b2e      	ldr	r3, [pc, #184]	; (801bc04 <__swsetup_r+0xd0>)
 801bb4c:	429c      	cmp	r4, r3
 801bb4e:	d10f      	bne.n	801bb70 <__swsetup_r+0x3c>
 801bb50:	686c      	ldr	r4, [r5, #4]
 801bb52:	89a3      	ldrh	r3, [r4, #12]
 801bb54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb58:	0719      	lsls	r1, r3, #28
 801bb5a:	d42c      	bmi.n	801bbb6 <__swsetup_r+0x82>
 801bb5c:	06dd      	lsls	r5, r3, #27
 801bb5e:	d411      	bmi.n	801bb84 <__swsetup_r+0x50>
 801bb60:	2309      	movs	r3, #9
 801bb62:	6033      	str	r3, [r6, #0]
 801bb64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bb68:	81a3      	strh	r3, [r4, #12]
 801bb6a:	f04f 30ff 	mov.w	r0, #4294967295
 801bb6e:	e03e      	b.n	801bbee <__swsetup_r+0xba>
 801bb70:	4b25      	ldr	r3, [pc, #148]	; (801bc08 <__swsetup_r+0xd4>)
 801bb72:	429c      	cmp	r4, r3
 801bb74:	d101      	bne.n	801bb7a <__swsetup_r+0x46>
 801bb76:	68ac      	ldr	r4, [r5, #8]
 801bb78:	e7eb      	b.n	801bb52 <__swsetup_r+0x1e>
 801bb7a:	4b24      	ldr	r3, [pc, #144]	; (801bc0c <__swsetup_r+0xd8>)
 801bb7c:	429c      	cmp	r4, r3
 801bb7e:	bf08      	it	eq
 801bb80:	68ec      	ldreq	r4, [r5, #12]
 801bb82:	e7e6      	b.n	801bb52 <__swsetup_r+0x1e>
 801bb84:	0758      	lsls	r0, r3, #29
 801bb86:	d512      	bpl.n	801bbae <__swsetup_r+0x7a>
 801bb88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb8a:	b141      	cbz	r1, 801bb9e <__swsetup_r+0x6a>
 801bb8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb90:	4299      	cmp	r1, r3
 801bb92:	d002      	beq.n	801bb9a <__swsetup_r+0x66>
 801bb94:	4630      	mov	r0, r6
 801bb96:	f7ff fcd5 	bl	801b544 <_free_r>
 801bb9a:	2300      	movs	r3, #0
 801bb9c:	6363      	str	r3, [r4, #52]	; 0x34
 801bb9e:	89a3      	ldrh	r3, [r4, #12]
 801bba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bba4:	81a3      	strh	r3, [r4, #12]
 801bba6:	2300      	movs	r3, #0
 801bba8:	6063      	str	r3, [r4, #4]
 801bbaa:	6923      	ldr	r3, [r4, #16]
 801bbac:	6023      	str	r3, [r4, #0]
 801bbae:	89a3      	ldrh	r3, [r4, #12]
 801bbb0:	f043 0308 	orr.w	r3, r3, #8
 801bbb4:	81a3      	strh	r3, [r4, #12]
 801bbb6:	6923      	ldr	r3, [r4, #16]
 801bbb8:	b94b      	cbnz	r3, 801bbce <__swsetup_r+0x9a>
 801bbba:	89a3      	ldrh	r3, [r4, #12]
 801bbbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bbc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bbc4:	d003      	beq.n	801bbce <__swsetup_r+0x9a>
 801bbc6:	4621      	mov	r1, r4
 801bbc8:	4630      	mov	r0, r6
 801bbca:	f000 fa09 	bl	801bfe0 <__smakebuf_r>
 801bbce:	89a0      	ldrh	r0, [r4, #12]
 801bbd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bbd4:	f010 0301 	ands.w	r3, r0, #1
 801bbd8:	d00a      	beq.n	801bbf0 <__swsetup_r+0xbc>
 801bbda:	2300      	movs	r3, #0
 801bbdc:	60a3      	str	r3, [r4, #8]
 801bbde:	6963      	ldr	r3, [r4, #20]
 801bbe0:	425b      	negs	r3, r3
 801bbe2:	61a3      	str	r3, [r4, #24]
 801bbe4:	6923      	ldr	r3, [r4, #16]
 801bbe6:	b943      	cbnz	r3, 801bbfa <__swsetup_r+0xc6>
 801bbe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bbec:	d1ba      	bne.n	801bb64 <__swsetup_r+0x30>
 801bbee:	bd70      	pop	{r4, r5, r6, pc}
 801bbf0:	0781      	lsls	r1, r0, #30
 801bbf2:	bf58      	it	pl
 801bbf4:	6963      	ldrpl	r3, [r4, #20]
 801bbf6:	60a3      	str	r3, [r4, #8]
 801bbf8:	e7f4      	b.n	801bbe4 <__swsetup_r+0xb0>
 801bbfa:	2000      	movs	r0, #0
 801bbfc:	e7f7      	b.n	801bbee <__swsetup_r+0xba>
 801bbfe:	bf00      	nop
 801bc00:	20000190 	.word	0x20000190
 801bc04:	0801c67c 	.word	0x0801c67c
 801bc08:	0801c69c 	.word	0x0801c69c
 801bc0c:	0801c65c 	.word	0x0801c65c

0801bc10 <abort>:
 801bc10:	b508      	push	{r3, lr}
 801bc12:	2006      	movs	r0, #6
 801bc14:	f000 fa4c 	bl	801c0b0 <raise>
 801bc18:	2001      	movs	r0, #1
 801bc1a:	f7f5 fa29 	bl	8011070 <_exit>
	...

0801bc20 <__sflush_r>:
 801bc20:	898a      	ldrh	r2, [r1, #12]
 801bc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc26:	4605      	mov	r5, r0
 801bc28:	0710      	lsls	r0, r2, #28
 801bc2a:	460c      	mov	r4, r1
 801bc2c:	d458      	bmi.n	801bce0 <__sflush_r+0xc0>
 801bc2e:	684b      	ldr	r3, [r1, #4]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	dc05      	bgt.n	801bc40 <__sflush_r+0x20>
 801bc34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	dc02      	bgt.n	801bc40 <__sflush_r+0x20>
 801bc3a:	2000      	movs	r0, #0
 801bc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc42:	2e00      	cmp	r6, #0
 801bc44:	d0f9      	beq.n	801bc3a <__sflush_r+0x1a>
 801bc46:	2300      	movs	r3, #0
 801bc48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bc4c:	682f      	ldr	r7, [r5, #0]
 801bc4e:	602b      	str	r3, [r5, #0]
 801bc50:	d032      	beq.n	801bcb8 <__sflush_r+0x98>
 801bc52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bc54:	89a3      	ldrh	r3, [r4, #12]
 801bc56:	075a      	lsls	r2, r3, #29
 801bc58:	d505      	bpl.n	801bc66 <__sflush_r+0x46>
 801bc5a:	6863      	ldr	r3, [r4, #4]
 801bc5c:	1ac0      	subs	r0, r0, r3
 801bc5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bc60:	b10b      	cbz	r3, 801bc66 <__sflush_r+0x46>
 801bc62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bc64:	1ac0      	subs	r0, r0, r3
 801bc66:	2300      	movs	r3, #0
 801bc68:	4602      	mov	r2, r0
 801bc6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc6c:	6a21      	ldr	r1, [r4, #32]
 801bc6e:	4628      	mov	r0, r5
 801bc70:	47b0      	blx	r6
 801bc72:	1c43      	adds	r3, r0, #1
 801bc74:	89a3      	ldrh	r3, [r4, #12]
 801bc76:	d106      	bne.n	801bc86 <__sflush_r+0x66>
 801bc78:	6829      	ldr	r1, [r5, #0]
 801bc7a:	291d      	cmp	r1, #29
 801bc7c:	d82c      	bhi.n	801bcd8 <__sflush_r+0xb8>
 801bc7e:	4a2a      	ldr	r2, [pc, #168]	; (801bd28 <__sflush_r+0x108>)
 801bc80:	40ca      	lsrs	r2, r1
 801bc82:	07d6      	lsls	r6, r2, #31
 801bc84:	d528      	bpl.n	801bcd8 <__sflush_r+0xb8>
 801bc86:	2200      	movs	r2, #0
 801bc88:	6062      	str	r2, [r4, #4]
 801bc8a:	04d9      	lsls	r1, r3, #19
 801bc8c:	6922      	ldr	r2, [r4, #16]
 801bc8e:	6022      	str	r2, [r4, #0]
 801bc90:	d504      	bpl.n	801bc9c <__sflush_r+0x7c>
 801bc92:	1c42      	adds	r2, r0, #1
 801bc94:	d101      	bne.n	801bc9a <__sflush_r+0x7a>
 801bc96:	682b      	ldr	r3, [r5, #0]
 801bc98:	b903      	cbnz	r3, 801bc9c <__sflush_r+0x7c>
 801bc9a:	6560      	str	r0, [r4, #84]	; 0x54
 801bc9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc9e:	602f      	str	r7, [r5, #0]
 801bca0:	2900      	cmp	r1, #0
 801bca2:	d0ca      	beq.n	801bc3a <__sflush_r+0x1a>
 801bca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bca8:	4299      	cmp	r1, r3
 801bcaa:	d002      	beq.n	801bcb2 <__sflush_r+0x92>
 801bcac:	4628      	mov	r0, r5
 801bcae:	f7ff fc49 	bl	801b544 <_free_r>
 801bcb2:	2000      	movs	r0, #0
 801bcb4:	6360      	str	r0, [r4, #52]	; 0x34
 801bcb6:	e7c1      	b.n	801bc3c <__sflush_r+0x1c>
 801bcb8:	6a21      	ldr	r1, [r4, #32]
 801bcba:	2301      	movs	r3, #1
 801bcbc:	4628      	mov	r0, r5
 801bcbe:	47b0      	blx	r6
 801bcc0:	1c41      	adds	r1, r0, #1
 801bcc2:	d1c7      	bne.n	801bc54 <__sflush_r+0x34>
 801bcc4:	682b      	ldr	r3, [r5, #0]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d0c4      	beq.n	801bc54 <__sflush_r+0x34>
 801bcca:	2b1d      	cmp	r3, #29
 801bccc:	d001      	beq.n	801bcd2 <__sflush_r+0xb2>
 801bcce:	2b16      	cmp	r3, #22
 801bcd0:	d101      	bne.n	801bcd6 <__sflush_r+0xb6>
 801bcd2:	602f      	str	r7, [r5, #0]
 801bcd4:	e7b1      	b.n	801bc3a <__sflush_r+0x1a>
 801bcd6:	89a3      	ldrh	r3, [r4, #12]
 801bcd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bcdc:	81a3      	strh	r3, [r4, #12]
 801bcde:	e7ad      	b.n	801bc3c <__sflush_r+0x1c>
 801bce0:	690f      	ldr	r7, [r1, #16]
 801bce2:	2f00      	cmp	r7, #0
 801bce4:	d0a9      	beq.n	801bc3a <__sflush_r+0x1a>
 801bce6:	0793      	lsls	r3, r2, #30
 801bce8:	680e      	ldr	r6, [r1, #0]
 801bcea:	bf08      	it	eq
 801bcec:	694b      	ldreq	r3, [r1, #20]
 801bcee:	600f      	str	r7, [r1, #0]
 801bcf0:	bf18      	it	ne
 801bcf2:	2300      	movne	r3, #0
 801bcf4:	eba6 0807 	sub.w	r8, r6, r7
 801bcf8:	608b      	str	r3, [r1, #8]
 801bcfa:	f1b8 0f00 	cmp.w	r8, #0
 801bcfe:	dd9c      	ble.n	801bc3a <__sflush_r+0x1a>
 801bd00:	6a21      	ldr	r1, [r4, #32]
 801bd02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bd04:	4643      	mov	r3, r8
 801bd06:	463a      	mov	r2, r7
 801bd08:	4628      	mov	r0, r5
 801bd0a:	47b0      	blx	r6
 801bd0c:	2800      	cmp	r0, #0
 801bd0e:	dc06      	bgt.n	801bd1e <__sflush_r+0xfe>
 801bd10:	89a3      	ldrh	r3, [r4, #12]
 801bd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd16:	81a3      	strh	r3, [r4, #12]
 801bd18:	f04f 30ff 	mov.w	r0, #4294967295
 801bd1c:	e78e      	b.n	801bc3c <__sflush_r+0x1c>
 801bd1e:	4407      	add	r7, r0
 801bd20:	eba8 0800 	sub.w	r8, r8, r0
 801bd24:	e7e9      	b.n	801bcfa <__sflush_r+0xda>
 801bd26:	bf00      	nop
 801bd28:	20400001 	.word	0x20400001

0801bd2c <_fflush_r>:
 801bd2c:	b538      	push	{r3, r4, r5, lr}
 801bd2e:	690b      	ldr	r3, [r1, #16]
 801bd30:	4605      	mov	r5, r0
 801bd32:	460c      	mov	r4, r1
 801bd34:	b913      	cbnz	r3, 801bd3c <_fflush_r+0x10>
 801bd36:	2500      	movs	r5, #0
 801bd38:	4628      	mov	r0, r5
 801bd3a:	bd38      	pop	{r3, r4, r5, pc}
 801bd3c:	b118      	cbz	r0, 801bd46 <_fflush_r+0x1a>
 801bd3e:	6983      	ldr	r3, [r0, #24]
 801bd40:	b90b      	cbnz	r3, 801bd46 <_fflush_r+0x1a>
 801bd42:	f000 f887 	bl	801be54 <__sinit>
 801bd46:	4b14      	ldr	r3, [pc, #80]	; (801bd98 <_fflush_r+0x6c>)
 801bd48:	429c      	cmp	r4, r3
 801bd4a:	d11b      	bne.n	801bd84 <_fflush_r+0x58>
 801bd4c:	686c      	ldr	r4, [r5, #4]
 801bd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d0ef      	beq.n	801bd36 <_fflush_r+0xa>
 801bd56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bd58:	07d0      	lsls	r0, r2, #31
 801bd5a:	d404      	bmi.n	801bd66 <_fflush_r+0x3a>
 801bd5c:	0599      	lsls	r1, r3, #22
 801bd5e:	d402      	bmi.n	801bd66 <_fflush_r+0x3a>
 801bd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd62:	f000 f915 	bl	801bf90 <__retarget_lock_acquire_recursive>
 801bd66:	4628      	mov	r0, r5
 801bd68:	4621      	mov	r1, r4
 801bd6a:	f7ff ff59 	bl	801bc20 <__sflush_r>
 801bd6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd70:	07da      	lsls	r2, r3, #31
 801bd72:	4605      	mov	r5, r0
 801bd74:	d4e0      	bmi.n	801bd38 <_fflush_r+0xc>
 801bd76:	89a3      	ldrh	r3, [r4, #12]
 801bd78:	059b      	lsls	r3, r3, #22
 801bd7a:	d4dd      	bmi.n	801bd38 <_fflush_r+0xc>
 801bd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd7e:	f000 f908 	bl	801bf92 <__retarget_lock_release_recursive>
 801bd82:	e7d9      	b.n	801bd38 <_fflush_r+0xc>
 801bd84:	4b05      	ldr	r3, [pc, #20]	; (801bd9c <_fflush_r+0x70>)
 801bd86:	429c      	cmp	r4, r3
 801bd88:	d101      	bne.n	801bd8e <_fflush_r+0x62>
 801bd8a:	68ac      	ldr	r4, [r5, #8]
 801bd8c:	e7df      	b.n	801bd4e <_fflush_r+0x22>
 801bd8e:	4b04      	ldr	r3, [pc, #16]	; (801bda0 <_fflush_r+0x74>)
 801bd90:	429c      	cmp	r4, r3
 801bd92:	bf08      	it	eq
 801bd94:	68ec      	ldreq	r4, [r5, #12]
 801bd96:	e7da      	b.n	801bd4e <_fflush_r+0x22>
 801bd98:	0801c67c 	.word	0x0801c67c
 801bd9c:	0801c69c 	.word	0x0801c69c
 801bda0:	0801c65c 	.word	0x0801c65c

0801bda4 <std>:
 801bda4:	2300      	movs	r3, #0
 801bda6:	b510      	push	{r4, lr}
 801bda8:	4604      	mov	r4, r0
 801bdaa:	e9c0 3300 	strd	r3, r3, [r0]
 801bdae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bdb2:	6083      	str	r3, [r0, #8]
 801bdb4:	8181      	strh	r1, [r0, #12]
 801bdb6:	6643      	str	r3, [r0, #100]	; 0x64
 801bdb8:	81c2      	strh	r2, [r0, #14]
 801bdba:	6183      	str	r3, [r0, #24]
 801bdbc:	4619      	mov	r1, r3
 801bdbe:	2208      	movs	r2, #8
 801bdc0:	305c      	adds	r0, #92	; 0x5c
 801bdc2:	f7fd fd1d 	bl	8019800 <memset>
 801bdc6:	4b05      	ldr	r3, [pc, #20]	; (801bddc <std+0x38>)
 801bdc8:	6263      	str	r3, [r4, #36]	; 0x24
 801bdca:	4b05      	ldr	r3, [pc, #20]	; (801bde0 <std+0x3c>)
 801bdcc:	62a3      	str	r3, [r4, #40]	; 0x28
 801bdce:	4b05      	ldr	r3, [pc, #20]	; (801bde4 <std+0x40>)
 801bdd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bdd2:	4b05      	ldr	r3, [pc, #20]	; (801bde8 <std+0x44>)
 801bdd4:	6224      	str	r4, [r4, #32]
 801bdd6:	6323      	str	r3, [r4, #48]	; 0x30
 801bdd8:	bd10      	pop	{r4, pc}
 801bdda:	bf00      	nop
 801bddc:	0801c0e9 	.word	0x0801c0e9
 801bde0:	0801c10b 	.word	0x0801c10b
 801bde4:	0801c143 	.word	0x0801c143
 801bde8:	0801c167 	.word	0x0801c167

0801bdec <_cleanup_r>:
 801bdec:	4901      	ldr	r1, [pc, #4]	; (801bdf4 <_cleanup_r+0x8>)
 801bdee:	f000 b8af 	b.w	801bf50 <_fwalk_reent>
 801bdf2:	bf00      	nop
 801bdf4:	0801bd2d 	.word	0x0801bd2d

0801bdf8 <__sfmoreglue>:
 801bdf8:	b570      	push	{r4, r5, r6, lr}
 801bdfa:	2268      	movs	r2, #104	; 0x68
 801bdfc:	1e4d      	subs	r5, r1, #1
 801bdfe:	4355      	muls	r5, r2
 801be00:	460e      	mov	r6, r1
 801be02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801be06:	f7ff fc09 	bl	801b61c <_malloc_r>
 801be0a:	4604      	mov	r4, r0
 801be0c:	b140      	cbz	r0, 801be20 <__sfmoreglue+0x28>
 801be0e:	2100      	movs	r1, #0
 801be10:	e9c0 1600 	strd	r1, r6, [r0]
 801be14:	300c      	adds	r0, #12
 801be16:	60a0      	str	r0, [r4, #8]
 801be18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801be1c:	f7fd fcf0 	bl	8019800 <memset>
 801be20:	4620      	mov	r0, r4
 801be22:	bd70      	pop	{r4, r5, r6, pc}

0801be24 <__sfp_lock_acquire>:
 801be24:	4801      	ldr	r0, [pc, #4]	; (801be2c <__sfp_lock_acquire+0x8>)
 801be26:	f000 b8b3 	b.w	801bf90 <__retarget_lock_acquire_recursive>
 801be2a:	bf00      	nop
 801be2c:	20001585 	.word	0x20001585

0801be30 <__sfp_lock_release>:
 801be30:	4801      	ldr	r0, [pc, #4]	; (801be38 <__sfp_lock_release+0x8>)
 801be32:	f000 b8ae 	b.w	801bf92 <__retarget_lock_release_recursive>
 801be36:	bf00      	nop
 801be38:	20001585 	.word	0x20001585

0801be3c <__sinit_lock_acquire>:
 801be3c:	4801      	ldr	r0, [pc, #4]	; (801be44 <__sinit_lock_acquire+0x8>)
 801be3e:	f000 b8a7 	b.w	801bf90 <__retarget_lock_acquire_recursive>
 801be42:	bf00      	nop
 801be44:	20001586 	.word	0x20001586

0801be48 <__sinit_lock_release>:
 801be48:	4801      	ldr	r0, [pc, #4]	; (801be50 <__sinit_lock_release+0x8>)
 801be4a:	f000 b8a2 	b.w	801bf92 <__retarget_lock_release_recursive>
 801be4e:	bf00      	nop
 801be50:	20001586 	.word	0x20001586

0801be54 <__sinit>:
 801be54:	b510      	push	{r4, lr}
 801be56:	4604      	mov	r4, r0
 801be58:	f7ff fff0 	bl	801be3c <__sinit_lock_acquire>
 801be5c:	69a3      	ldr	r3, [r4, #24]
 801be5e:	b11b      	cbz	r3, 801be68 <__sinit+0x14>
 801be60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be64:	f7ff bff0 	b.w	801be48 <__sinit_lock_release>
 801be68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801be6c:	6523      	str	r3, [r4, #80]	; 0x50
 801be6e:	4b13      	ldr	r3, [pc, #76]	; (801bebc <__sinit+0x68>)
 801be70:	4a13      	ldr	r2, [pc, #76]	; (801bec0 <__sinit+0x6c>)
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	62a2      	str	r2, [r4, #40]	; 0x28
 801be76:	42a3      	cmp	r3, r4
 801be78:	bf04      	itt	eq
 801be7a:	2301      	moveq	r3, #1
 801be7c:	61a3      	streq	r3, [r4, #24]
 801be7e:	4620      	mov	r0, r4
 801be80:	f000 f820 	bl	801bec4 <__sfp>
 801be84:	6060      	str	r0, [r4, #4]
 801be86:	4620      	mov	r0, r4
 801be88:	f000 f81c 	bl	801bec4 <__sfp>
 801be8c:	60a0      	str	r0, [r4, #8]
 801be8e:	4620      	mov	r0, r4
 801be90:	f000 f818 	bl	801bec4 <__sfp>
 801be94:	2200      	movs	r2, #0
 801be96:	60e0      	str	r0, [r4, #12]
 801be98:	2104      	movs	r1, #4
 801be9a:	6860      	ldr	r0, [r4, #4]
 801be9c:	f7ff ff82 	bl	801bda4 <std>
 801bea0:	68a0      	ldr	r0, [r4, #8]
 801bea2:	2201      	movs	r2, #1
 801bea4:	2109      	movs	r1, #9
 801bea6:	f7ff ff7d 	bl	801bda4 <std>
 801beaa:	68e0      	ldr	r0, [r4, #12]
 801beac:	2202      	movs	r2, #2
 801beae:	2112      	movs	r1, #18
 801beb0:	f7ff ff78 	bl	801bda4 <std>
 801beb4:	2301      	movs	r3, #1
 801beb6:	61a3      	str	r3, [r4, #24]
 801beb8:	e7d2      	b.n	801be60 <__sinit+0xc>
 801beba:	bf00      	nop
 801bebc:	0801c2e0 	.word	0x0801c2e0
 801bec0:	0801bded 	.word	0x0801bded

0801bec4 <__sfp>:
 801bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bec6:	4607      	mov	r7, r0
 801bec8:	f7ff ffac 	bl	801be24 <__sfp_lock_acquire>
 801becc:	4b1e      	ldr	r3, [pc, #120]	; (801bf48 <__sfp+0x84>)
 801bece:	681e      	ldr	r6, [r3, #0]
 801bed0:	69b3      	ldr	r3, [r6, #24]
 801bed2:	b913      	cbnz	r3, 801beda <__sfp+0x16>
 801bed4:	4630      	mov	r0, r6
 801bed6:	f7ff ffbd 	bl	801be54 <__sinit>
 801beda:	3648      	adds	r6, #72	; 0x48
 801bedc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bee0:	3b01      	subs	r3, #1
 801bee2:	d503      	bpl.n	801beec <__sfp+0x28>
 801bee4:	6833      	ldr	r3, [r6, #0]
 801bee6:	b30b      	cbz	r3, 801bf2c <__sfp+0x68>
 801bee8:	6836      	ldr	r6, [r6, #0]
 801beea:	e7f7      	b.n	801bedc <__sfp+0x18>
 801beec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bef0:	b9d5      	cbnz	r5, 801bf28 <__sfp+0x64>
 801bef2:	4b16      	ldr	r3, [pc, #88]	; (801bf4c <__sfp+0x88>)
 801bef4:	60e3      	str	r3, [r4, #12]
 801bef6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801befa:	6665      	str	r5, [r4, #100]	; 0x64
 801befc:	f000 f847 	bl	801bf8e <__retarget_lock_init_recursive>
 801bf00:	f7ff ff96 	bl	801be30 <__sfp_lock_release>
 801bf04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bf08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bf0c:	6025      	str	r5, [r4, #0]
 801bf0e:	61a5      	str	r5, [r4, #24]
 801bf10:	2208      	movs	r2, #8
 801bf12:	4629      	mov	r1, r5
 801bf14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bf18:	f7fd fc72 	bl	8019800 <memset>
 801bf1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bf20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bf24:	4620      	mov	r0, r4
 801bf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf28:	3468      	adds	r4, #104	; 0x68
 801bf2a:	e7d9      	b.n	801bee0 <__sfp+0x1c>
 801bf2c:	2104      	movs	r1, #4
 801bf2e:	4638      	mov	r0, r7
 801bf30:	f7ff ff62 	bl	801bdf8 <__sfmoreglue>
 801bf34:	4604      	mov	r4, r0
 801bf36:	6030      	str	r0, [r6, #0]
 801bf38:	2800      	cmp	r0, #0
 801bf3a:	d1d5      	bne.n	801bee8 <__sfp+0x24>
 801bf3c:	f7ff ff78 	bl	801be30 <__sfp_lock_release>
 801bf40:	230c      	movs	r3, #12
 801bf42:	603b      	str	r3, [r7, #0]
 801bf44:	e7ee      	b.n	801bf24 <__sfp+0x60>
 801bf46:	bf00      	nop
 801bf48:	0801c2e0 	.word	0x0801c2e0
 801bf4c:	ffff0001 	.word	0xffff0001

0801bf50 <_fwalk_reent>:
 801bf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf54:	4606      	mov	r6, r0
 801bf56:	4688      	mov	r8, r1
 801bf58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bf5c:	2700      	movs	r7, #0
 801bf5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bf62:	f1b9 0901 	subs.w	r9, r9, #1
 801bf66:	d505      	bpl.n	801bf74 <_fwalk_reent+0x24>
 801bf68:	6824      	ldr	r4, [r4, #0]
 801bf6a:	2c00      	cmp	r4, #0
 801bf6c:	d1f7      	bne.n	801bf5e <_fwalk_reent+0xe>
 801bf6e:	4638      	mov	r0, r7
 801bf70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf74:	89ab      	ldrh	r3, [r5, #12]
 801bf76:	2b01      	cmp	r3, #1
 801bf78:	d907      	bls.n	801bf8a <_fwalk_reent+0x3a>
 801bf7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bf7e:	3301      	adds	r3, #1
 801bf80:	d003      	beq.n	801bf8a <_fwalk_reent+0x3a>
 801bf82:	4629      	mov	r1, r5
 801bf84:	4630      	mov	r0, r6
 801bf86:	47c0      	blx	r8
 801bf88:	4307      	orrs	r7, r0
 801bf8a:	3568      	adds	r5, #104	; 0x68
 801bf8c:	e7e9      	b.n	801bf62 <_fwalk_reent+0x12>

0801bf8e <__retarget_lock_init_recursive>:
 801bf8e:	4770      	bx	lr

0801bf90 <__retarget_lock_acquire_recursive>:
 801bf90:	4770      	bx	lr

0801bf92 <__retarget_lock_release_recursive>:
 801bf92:	4770      	bx	lr

0801bf94 <__swhatbuf_r>:
 801bf94:	b570      	push	{r4, r5, r6, lr}
 801bf96:	460e      	mov	r6, r1
 801bf98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf9c:	2900      	cmp	r1, #0
 801bf9e:	b096      	sub	sp, #88	; 0x58
 801bfa0:	4614      	mov	r4, r2
 801bfa2:	461d      	mov	r5, r3
 801bfa4:	da08      	bge.n	801bfb8 <__swhatbuf_r+0x24>
 801bfa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bfaa:	2200      	movs	r2, #0
 801bfac:	602a      	str	r2, [r5, #0]
 801bfae:	061a      	lsls	r2, r3, #24
 801bfb0:	d410      	bmi.n	801bfd4 <__swhatbuf_r+0x40>
 801bfb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bfb6:	e00e      	b.n	801bfd6 <__swhatbuf_r+0x42>
 801bfb8:	466a      	mov	r2, sp
 801bfba:	f000 f8fb 	bl	801c1b4 <_fstat_r>
 801bfbe:	2800      	cmp	r0, #0
 801bfc0:	dbf1      	blt.n	801bfa6 <__swhatbuf_r+0x12>
 801bfc2:	9a01      	ldr	r2, [sp, #4]
 801bfc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bfc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bfcc:	425a      	negs	r2, r3
 801bfce:	415a      	adcs	r2, r3
 801bfd0:	602a      	str	r2, [r5, #0]
 801bfd2:	e7ee      	b.n	801bfb2 <__swhatbuf_r+0x1e>
 801bfd4:	2340      	movs	r3, #64	; 0x40
 801bfd6:	2000      	movs	r0, #0
 801bfd8:	6023      	str	r3, [r4, #0]
 801bfda:	b016      	add	sp, #88	; 0x58
 801bfdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bfe0 <__smakebuf_r>:
 801bfe0:	898b      	ldrh	r3, [r1, #12]
 801bfe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bfe4:	079d      	lsls	r5, r3, #30
 801bfe6:	4606      	mov	r6, r0
 801bfe8:	460c      	mov	r4, r1
 801bfea:	d507      	bpl.n	801bffc <__smakebuf_r+0x1c>
 801bfec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bff0:	6023      	str	r3, [r4, #0]
 801bff2:	6123      	str	r3, [r4, #16]
 801bff4:	2301      	movs	r3, #1
 801bff6:	6163      	str	r3, [r4, #20]
 801bff8:	b002      	add	sp, #8
 801bffa:	bd70      	pop	{r4, r5, r6, pc}
 801bffc:	ab01      	add	r3, sp, #4
 801bffe:	466a      	mov	r2, sp
 801c000:	f7ff ffc8 	bl	801bf94 <__swhatbuf_r>
 801c004:	9900      	ldr	r1, [sp, #0]
 801c006:	4605      	mov	r5, r0
 801c008:	4630      	mov	r0, r6
 801c00a:	f7ff fb07 	bl	801b61c <_malloc_r>
 801c00e:	b948      	cbnz	r0, 801c024 <__smakebuf_r+0x44>
 801c010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c014:	059a      	lsls	r2, r3, #22
 801c016:	d4ef      	bmi.n	801bff8 <__smakebuf_r+0x18>
 801c018:	f023 0303 	bic.w	r3, r3, #3
 801c01c:	f043 0302 	orr.w	r3, r3, #2
 801c020:	81a3      	strh	r3, [r4, #12]
 801c022:	e7e3      	b.n	801bfec <__smakebuf_r+0xc>
 801c024:	4b0d      	ldr	r3, [pc, #52]	; (801c05c <__smakebuf_r+0x7c>)
 801c026:	62b3      	str	r3, [r6, #40]	; 0x28
 801c028:	89a3      	ldrh	r3, [r4, #12]
 801c02a:	6020      	str	r0, [r4, #0]
 801c02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c030:	81a3      	strh	r3, [r4, #12]
 801c032:	9b00      	ldr	r3, [sp, #0]
 801c034:	6163      	str	r3, [r4, #20]
 801c036:	9b01      	ldr	r3, [sp, #4]
 801c038:	6120      	str	r0, [r4, #16]
 801c03a:	b15b      	cbz	r3, 801c054 <__smakebuf_r+0x74>
 801c03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c040:	4630      	mov	r0, r6
 801c042:	f000 f8c9 	bl	801c1d8 <_isatty_r>
 801c046:	b128      	cbz	r0, 801c054 <__smakebuf_r+0x74>
 801c048:	89a3      	ldrh	r3, [r4, #12]
 801c04a:	f023 0303 	bic.w	r3, r3, #3
 801c04e:	f043 0301 	orr.w	r3, r3, #1
 801c052:	81a3      	strh	r3, [r4, #12]
 801c054:	89a0      	ldrh	r0, [r4, #12]
 801c056:	4305      	orrs	r5, r0
 801c058:	81a5      	strh	r5, [r4, #12]
 801c05a:	e7cd      	b.n	801bff8 <__smakebuf_r+0x18>
 801c05c:	0801bded 	.word	0x0801bded

0801c060 <_raise_r>:
 801c060:	291f      	cmp	r1, #31
 801c062:	b538      	push	{r3, r4, r5, lr}
 801c064:	4604      	mov	r4, r0
 801c066:	460d      	mov	r5, r1
 801c068:	d904      	bls.n	801c074 <_raise_r+0x14>
 801c06a:	2316      	movs	r3, #22
 801c06c:	6003      	str	r3, [r0, #0]
 801c06e:	f04f 30ff 	mov.w	r0, #4294967295
 801c072:	bd38      	pop	{r3, r4, r5, pc}
 801c074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c076:	b112      	cbz	r2, 801c07e <_raise_r+0x1e>
 801c078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c07c:	b94b      	cbnz	r3, 801c092 <_raise_r+0x32>
 801c07e:	4620      	mov	r0, r4
 801c080:	f000 f830 	bl	801c0e4 <_getpid_r>
 801c084:	462a      	mov	r2, r5
 801c086:	4601      	mov	r1, r0
 801c088:	4620      	mov	r0, r4
 801c08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c08e:	f000 b817 	b.w	801c0c0 <_kill_r>
 801c092:	2b01      	cmp	r3, #1
 801c094:	d00a      	beq.n	801c0ac <_raise_r+0x4c>
 801c096:	1c59      	adds	r1, r3, #1
 801c098:	d103      	bne.n	801c0a2 <_raise_r+0x42>
 801c09a:	2316      	movs	r3, #22
 801c09c:	6003      	str	r3, [r0, #0]
 801c09e:	2001      	movs	r0, #1
 801c0a0:	e7e7      	b.n	801c072 <_raise_r+0x12>
 801c0a2:	2400      	movs	r4, #0
 801c0a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c0a8:	4628      	mov	r0, r5
 801c0aa:	4798      	blx	r3
 801c0ac:	2000      	movs	r0, #0
 801c0ae:	e7e0      	b.n	801c072 <_raise_r+0x12>

0801c0b0 <raise>:
 801c0b0:	4b02      	ldr	r3, [pc, #8]	; (801c0bc <raise+0xc>)
 801c0b2:	4601      	mov	r1, r0
 801c0b4:	6818      	ldr	r0, [r3, #0]
 801c0b6:	f7ff bfd3 	b.w	801c060 <_raise_r>
 801c0ba:	bf00      	nop
 801c0bc:	20000190 	.word	0x20000190

0801c0c0 <_kill_r>:
 801c0c0:	b538      	push	{r3, r4, r5, lr}
 801c0c2:	4d07      	ldr	r5, [pc, #28]	; (801c0e0 <_kill_r+0x20>)
 801c0c4:	2300      	movs	r3, #0
 801c0c6:	4604      	mov	r4, r0
 801c0c8:	4608      	mov	r0, r1
 801c0ca:	4611      	mov	r1, r2
 801c0cc:	602b      	str	r3, [r5, #0]
 801c0ce:	f7f4 ffbf 	bl	8011050 <_kill>
 801c0d2:	1c43      	adds	r3, r0, #1
 801c0d4:	d102      	bne.n	801c0dc <_kill_r+0x1c>
 801c0d6:	682b      	ldr	r3, [r5, #0]
 801c0d8:	b103      	cbz	r3, 801c0dc <_kill_r+0x1c>
 801c0da:	6023      	str	r3, [r4, #0]
 801c0dc:	bd38      	pop	{r3, r4, r5, pc}
 801c0de:	bf00      	nop
 801c0e0:	20001580 	.word	0x20001580

0801c0e4 <_getpid_r>:
 801c0e4:	f7f4 bfac 	b.w	8011040 <_getpid>

0801c0e8 <__sread>:
 801c0e8:	b510      	push	{r4, lr}
 801c0ea:	460c      	mov	r4, r1
 801c0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0f0:	f000 f894 	bl	801c21c <_read_r>
 801c0f4:	2800      	cmp	r0, #0
 801c0f6:	bfab      	itete	ge
 801c0f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c0fa:	89a3      	ldrhlt	r3, [r4, #12]
 801c0fc:	181b      	addge	r3, r3, r0
 801c0fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c102:	bfac      	ite	ge
 801c104:	6563      	strge	r3, [r4, #84]	; 0x54
 801c106:	81a3      	strhlt	r3, [r4, #12]
 801c108:	bd10      	pop	{r4, pc}

0801c10a <__swrite>:
 801c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c10e:	461f      	mov	r7, r3
 801c110:	898b      	ldrh	r3, [r1, #12]
 801c112:	05db      	lsls	r3, r3, #23
 801c114:	4605      	mov	r5, r0
 801c116:	460c      	mov	r4, r1
 801c118:	4616      	mov	r6, r2
 801c11a:	d505      	bpl.n	801c128 <__swrite+0x1e>
 801c11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c120:	2302      	movs	r3, #2
 801c122:	2200      	movs	r2, #0
 801c124:	f000 f868 	bl	801c1f8 <_lseek_r>
 801c128:	89a3      	ldrh	r3, [r4, #12]
 801c12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c12e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c132:	81a3      	strh	r3, [r4, #12]
 801c134:	4632      	mov	r2, r6
 801c136:	463b      	mov	r3, r7
 801c138:	4628      	mov	r0, r5
 801c13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c13e:	f000 b817 	b.w	801c170 <_write_r>

0801c142 <__sseek>:
 801c142:	b510      	push	{r4, lr}
 801c144:	460c      	mov	r4, r1
 801c146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c14a:	f000 f855 	bl	801c1f8 <_lseek_r>
 801c14e:	1c43      	adds	r3, r0, #1
 801c150:	89a3      	ldrh	r3, [r4, #12]
 801c152:	bf15      	itete	ne
 801c154:	6560      	strne	r0, [r4, #84]	; 0x54
 801c156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c15a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c15e:	81a3      	strheq	r3, [r4, #12]
 801c160:	bf18      	it	ne
 801c162:	81a3      	strhne	r3, [r4, #12]
 801c164:	bd10      	pop	{r4, pc}

0801c166 <__sclose>:
 801c166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c16a:	f000 b813 	b.w	801c194 <_close_r>
	...

0801c170 <_write_r>:
 801c170:	b538      	push	{r3, r4, r5, lr}
 801c172:	4d07      	ldr	r5, [pc, #28]	; (801c190 <_write_r+0x20>)
 801c174:	4604      	mov	r4, r0
 801c176:	4608      	mov	r0, r1
 801c178:	4611      	mov	r1, r2
 801c17a:	2200      	movs	r2, #0
 801c17c:	602a      	str	r2, [r5, #0]
 801c17e:	461a      	mov	r2, r3
 801c180:	f7f4 ff9d 	bl	80110be <_write>
 801c184:	1c43      	adds	r3, r0, #1
 801c186:	d102      	bne.n	801c18e <_write_r+0x1e>
 801c188:	682b      	ldr	r3, [r5, #0]
 801c18a:	b103      	cbz	r3, 801c18e <_write_r+0x1e>
 801c18c:	6023      	str	r3, [r4, #0]
 801c18e:	bd38      	pop	{r3, r4, r5, pc}
 801c190:	20001580 	.word	0x20001580

0801c194 <_close_r>:
 801c194:	b538      	push	{r3, r4, r5, lr}
 801c196:	4d06      	ldr	r5, [pc, #24]	; (801c1b0 <_close_r+0x1c>)
 801c198:	2300      	movs	r3, #0
 801c19a:	4604      	mov	r4, r0
 801c19c:	4608      	mov	r0, r1
 801c19e:	602b      	str	r3, [r5, #0]
 801c1a0:	f7f4 ffa9 	bl	80110f6 <_close>
 801c1a4:	1c43      	adds	r3, r0, #1
 801c1a6:	d102      	bne.n	801c1ae <_close_r+0x1a>
 801c1a8:	682b      	ldr	r3, [r5, #0]
 801c1aa:	b103      	cbz	r3, 801c1ae <_close_r+0x1a>
 801c1ac:	6023      	str	r3, [r4, #0]
 801c1ae:	bd38      	pop	{r3, r4, r5, pc}
 801c1b0:	20001580 	.word	0x20001580

0801c1b4 <_fstat_r>:
 801c1b4:	b538      	push	{r3, r4, r5, lr}
 801c1b6:	4d07      	ldr	r5, [pc, #28]	; (801c1d4 <_fstat_r+0x20>)
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	4604      	mov	r4, r0
 801c1bc:	4608      	mov	r0, r1
 801c1be:	4611      	mov	r1, r2
 801c1c0:	602b      	str	r3, [r5, #0]
 801c1c2:	f7f4 ffa4 	bl	801110e <_fstat>
 801c1c6:	1c43      	adds	r3, r0, #1
 801c1c8:	d102      	bne.n	801c1d0 <_fstat_r+0x1c>
 801c1ca:	682b      	ldr	r3, [r5, #0]
 801c1cc:	b103      	cbz	r3, 801c1d0 <_fstat_r+0x1c>
 801c1ce:	6023      	str	r3, [r4, #0]
 801c1d0:	bd38      	pop	{r3, r4, r5, pc}
 801c1d2:	bf00      	nop
 801c1d4:	20001580 	.word	0x20001580

0801c1d8 <_isatty_r>:
 801c1d8:	b538      	push	{r3, r4, r5, lr}
 801c1da:	4d06      	ldr	r5, [pc, #24]	; (801c1f4 <_isatty_r+0x1c>)
 801c1dc:	2300      	movs	r3, #0
 801c1de:	4604      	mov	r4, r0
 801c1e0:	4608      	mov	r0, r1
 801c1e2:	602b      	str	r3, [r5, #0]
 801c1e4:	f7f4 ffa3 	bl	801112e <_isatty>
 801c1e8:	1c43      	adds	r3, r0, #1
 801c1ea:	d102      	bne.n	801c1f2 <_isatty_r+0x1a>
 801c1ec:	682b      	ldr	r3, [r5, #0]
 801c1ee:	b103      	cbz	r3, 801c1f2 <_isatty_r+0x1a>
 801c1f0:	6023      	str	r3, [r4, #0]
 801c1f2:	bd38      	pop	{r3, r4, r5, pc}
 801c1f4:	20001580 	.word	0x20001580

0801c1f8 <_lseek_r>:
 801c1f8:	b538      	push	{r3, r4, r5, lr}
 801c1fa:	4d07      	ldr	r5, [pc, #28]	; (801c218 <_lseek_r+0x20>)
 801c1fc:	4604      	mov	r4, r0
 801c1fe:	4608      	mov	r0, r1
 801c200:	4611      	mov	r1, r2
 801c202:	2200      	movs	r2, #0
 801c204:	602a      	str	r2, [r5, #0]
 801c206:	461a      	mov	r2, r3
 801c208:	f7f4 ff9c 	bl	8011144 <_lseek>
 801c20c:	1c43      	adds	r3, r0, #1
 801c20e:	d102      	bne.n	801c216 <_lseek_r+0x1e>
 801c210:	682b      	ldr	r3, [r5, #0]
 801c212:	b103      	cbz	r3, 801c216 <_lseek_r+0x1e>
 801c214:	6023      	str	r3, [r4, #0]
 801c216:	bd38      	pop	{r3, r4, r5, pc}
 801c218:	20001580 	.word	0x20001580

0801c21c <_read_r>:
 801c21c:	b538      	push	{r3, r4, r5, lr}
 801c21e:	4d07      	ldr	r5, [pc, #28]	; (801c23c <_read_r+0x20>)
 801c220:	4604      	mov	r4, r0
 801c222:	4608      	mov	r0, r1
 801c224:	4611      	mov	r1, r2
 801c226:	2200      	movs	r2, #0
 801c228:	602a      	str	r2, [r5, #0]
 801c22a:	461a      	mov	r2, r3
 801c22c:	f7f4 ff2a 	bl	8011084 <_read>
 801c230:	1c43      	adds	r3, r0, #1
 801c232:	d102      	bne.n	801c23a <_read_r+0x1e>
 801c234:	682b      	ldr	r3, [r5, #0]
 801c236:	b103      	cbz	r3, 801c23a <_read_r+0x1e>
 801c238:	6023      	str	r3, [r4, #0]
 801c23a:	bd38      	pop	{r3, r4, r5, pc}
 801c23c:	20001580 	.word	0x20001580

0801c240 <_init>:
 801c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c242:	bf00      	nop
 801c244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c246:	bc08      	pop	{r3}
 801c248:	469e      	mov	lr, r3
 801c24a:	4770      	bx	lr

0801c24c <_fini>:
 801c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c24e:	bf00      	nop
 801c250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c252:	bc08      	pop	{r3}
 801c254:	469e      	mov	lr, r3
 801c256:	4770      	bx	lr
